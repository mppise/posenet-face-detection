/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={377:(t,e,n)=>{var r=n(832),s=n(652),a=n(801),i=n(30),o=n(618),u=n(49),l=n(971);l.alea=r,l.xor128=s,l.xorwow=a,l.xorshift7=i,l.xor4096=o,l.tychei=u,t.exports=l},832:function(t,e,n){var r;!function(t,s,a){function i(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function u(t,e){var n=new i(t),r=e&&e.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.alea=u}(0,t=n.nmd(t),n.amdD)},49:function(t,e,n){var r;!function(t,s,a){function i(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function u(t,e){var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.tychei=u}(0,t=n.nmd(t),n.amdD)},652:function(t,e,n){var r;!function(t,s,a){function i(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function u(t,e){var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xor128=u}(0,t=n.nmd(t),n.amdD)},618:function(t,e,n){var r;!function(t,s,a){function i(t){var e=this;e.next=function(){var t,n,r=e.w,s=e.X,a=e.i;return e.w=r=r+1640531527|0,n=s[a+34&127],t=s[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=s[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,s,a,i,o=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),s=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(e&&e.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;t.w=i,t.X=o,t.i=s}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function u(t,e){null==t&&(t=+new Date);var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xor4096=u}(0,t=n.nmd(t),n.amdD)},30:function(t,e,n){var r;!function(t,s,a){function i(t){var e=this;e.next=function(){var t,n,r=e.x,s=e.i;return t=r[s],n=(t^=t>>>7)^t<<24,n^=(t=r[s+1&7])^t>>>10,n^=(t=r[s+3&7])^t>>>3,n^=(t=r[s+4&7])^t<<7,t=r[s+7&7],n^=(t^=t<<13)^t<<9,r[s]=n,e.i=s+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function u(t,e){null==t&&(t=+new Date);var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xorshift7=u}(0,t=n.nmd(t),n.amdD)},801:function(t,e,n){var r;!function(t,s,a){function i(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function u(t,e){var n=new i(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(e,n,e,s))||(s.exports=r):this.xorwow=u}(0,t=n.nmd(t),n.amdD)},971:(t,e,n)=>{var r;!function(s,a){var i,o=this,u=256,l=a.pow(u,6),c=a.pow(2,52),h=2*c,p=255;function d(t,e,n){var r=[],p=y(g((e=1==e?{entropy:!0}:e||{}).entropy?[t,b(s)]:null==t?function(){try{var t;return i&&(t=i.randomBytes)?t=t(u):(t=new Uint8Array(u),(o.crypto||o.msCrypto).getRandomValues(t)),b(t)}catch(t){var e=o.navigator,n=e&&e.plugins;return[+new Date,o,n,o.screen,b(s)]}}():t,3),r),d=new f(r),x=function(){for(var t=d.g(6),e=l,n=0;t<c;)t=(t+n)*u,e*=u,n=d.g(1);for(;t>=h;)t/=2,e/=2,n>>>=1;return(t+n)/e};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),s),(e.pass||n||function(t,e,n,r){return r&&(r.S&&m(r,d),t.state=function(){return m(d,{})}),n?(a.random=t,e):t})(x,p,"global"in e?e.global:this==a,e.state)}function f(t){var e,n=t.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(t=[n++]);s<u;)i[s]=s++;for(s=0;s<u;s++)i[s]=i[a=p&a+t[s%n]+(e=i[s])],i[a]=e;(r.g=function(t){for(var e,n=0,s=r.i,a=r.j,i=r.S;t--;)e=i[s=p&s+1],n=n*u+i[p&(i[s]=i[a=p&a+e])+(i[a]=e)];return r.i=s,r.j=a,n})(u)}function m(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function g(t,e){var n,r=[],s=typeof t;if(e&&"object"==s)for(n in t)try{r.push(g(t[n],e-1))}catch(t){}return r.length?r:"string"==s?t:t+"\0"}function y(t,e){for(var n,r=t+"",s=0;s<r.length;)e[p&s]=p&(n^=19*e[p&s])+r.charCodeAt(s++);return b(e)}function b(t){return String.fromCharCode.apply(0,t)}if(a.seedrandom=d,y(a.random(),s),t.exports){t.exports=d;try{i=n(906)}catch(t){}}else void 0===(r=function(){return d}.call(e,n,e,t))||(t.exports=r)}([],Math)},656:(t,e,n)=>{"use strict";var r={};n.r(r),n.d(r,{arraysEqual:()=>Z,assert:()=>j,assertNonNegativeIntegerDimensions:()=>Tt,assertNonNull:()=>K,assertShapesMatch:()=>q,bytesFromStringArray:()=>mt,bytesPerElement:()=>ft,checkConversionForErrors:()=>ct,clamp:()=>W,computeStrides:()=>kt,createScalarValue:()=>jr,createShuffledIndices:()=>nt,decodeString:()=>Jr,distSquared:()=>H,encodeString:()=>Yr,fetch:()=>Xr,flatten:()=>X,getArrayFromDType:()=>lt,getTypedArrayFromDType:()=>ut,hasEncodingLoss:()=>pt,indexToLoc:()=>At,inferDtype:()=>xt,inferFromImplicitShape:()=>at,isBoolean:()=>yt,isFunction:()=>wt,isInt:()=>Q,isNumber:()=>bt,isPromise:()=>Rt,isScalarShape:()=>J,isString:()=>gt,isTypedArray:()=>dt,isValidDtype:()=>ht,locToIndex:()=>Et,makeOnesTypedArray:()=>$t,makeZerosNestedTypedArray:()=>Ct,makeZerosTypedArray:()=>St,nearestDivisor:()=>vt,nearestLargerEven:()=>V,now:()=>Kr,parseAxisParam:()=>it,randUniform:()=>G,repeatedTry:()=>st,rightPad:()=>rt,shuffle:()=>P,sizeFromShape:()=>Y,sizeToSquarishShape:()=>et,squeezeShape:()=>ot,sum:()=>U,tanh:()=>tt,toNestedArray:()=>It,toTypedArray:()=>qr});var s={};n.r(s),n.d(s,{assertTypesMatch:()=>ds,getTensorsInContainer:()=>ms,isTensorInList:()=>fs,makeTypesMatch:()=>ps});var a={};n.r(a),n.d(a,{isBrowser:()=>Ns,isMobile:()=>ks});var i={};n.r(i),n.d(i,{browserFiles:()=>Fa,browserHTTPRequest:()=>Va,concatenateArrayBuffers:()=>Ws,copyModel:()=>ka,decodeWeights:()=>Ls,encodeWeights:()=>Ms,fromMemory:()=>Ha,getLoadHandlers:()=>Xs,getModelArtifactsInfoForJSON:()=>Us,getSaveHandlers:()=>Ks,http:()=>Wa,isHTTPScheme:()=>Ba,listModels:()=>wa,loadWeights:()=>Ma,moveModel:()=>Na,registerLoadRouter:()=>qs,registerSaveRouter:()=>js,removeModel:()=>va,weightsLoaderFactory:()=>La,withSaveHandler:()=>ja});var o={};n.r(o),n.d(o,{confusionMatrix:()=>Ja});var u={};n.r(u),n.d(u,{fromPixels:()=>ei,toPixels:()=>ti});var l={};n.r(l),n.d(l,{prepareAndValidate:()=>ni});var c={};n.r(c),n.d(c,{calculateShapes:()=>ai,validateInput:()=>si,validateUpdateShape:()=>ri});var h={};n.r(h),n.d(h,{assertParamsValid:()=>ii,computeFlatOffset:()=>xi,computeOutShape:()=>ui,getNormalizedAxes:()=>pi,isSliceContinous:()=>bi,maskToAxes:()=>oi,parseSliceParams:()=>wi,startForAxis:()=>gi,startIndicesWithElidedDims:()=>di,stopForAxis:()=>yi,stopIndicesWithElidedDims:()=>fi,stridesForAxis:()=>mi,stridesWithElidedDims:()=>li});var p={};n.r(p),n.d(p,{Serializable:()=>vi,SerializationMap:()=>ki,registerClass:()=>Ni});var d={};n.r(d),n.d(d,{TEST_EPSILON_FLOAT16:()=>Ii,expectArrayBuffersEqual:()=>Fi,expectArraysClose:()=>$i,expectArraysEqual:()=>Ei,expectNumbersClose:()=>Ai,expectPromiseToFail:()=>Ti,expectValuesInRange:()=>Di,testEpsilon:()=>Si});var f={};n.r(f),n.d(f,{collectGatherOpShapeInfo:()=>hl,computeOutShape:()=>cl,segOpComputeOptimalWindowSize:()=>ll});var m={};n.r(m),n.d(m,{conv2d:()=>Wh,depthwiseConv2d:()=>Gh,matMul:()=>Hh});var g={};n.r(g),n.d(g,{ERF_A1:()=>jp,ERF_A2:()=>qp,ERF_A3:()=>Kp,ERF_A4:()=>Xp,ERF_A5:()=>Yp,ERF_P:()=>Hp,PARALLELIZE_THRESHOLD:()=>ol,SELU_SCALE:()=>Gp,SELU_SCALEALPHA:()=>Up,applyActivation:()=>Bh,assertAndGetBroadcastShape:()=>To,assertAxesAreInnerMostDims:()=>Wo,assertParamsConsistent:()=>mu,assignToTypedArray:()=>sd,axesAreInnerMostDims:()=>Lo,calculateShapes:()=>ai,castTensor:()=>od,combineLocations:()=>zo,complexWithEvenIndex:()=>ed,complexWithOddIndex:()=>nd,computeConv2DInfo:()=>ru,computeConv3DInfo:()=>su,computeDefaultPad:()=>au,computeDilation2DInfo:()=>tu,computeOptimalWindowSize:()=>ul,computeOutAndReduceShapes:()=>Bo,computeOutShape:()=>gu,computePool2DInfo:()=>eu,computePool3DInfo:()=>nu,convertConv2DDataFormat:()=>pu,eitherStridesOrDilationsAreOne:()=>hu,expandShapeToKeepDim:()=>Po,exponent:()=>id,exponents:()=>ad,getAxesPermutation:()=>Vo,getBroadcastDims:()=>So,getComplexWithIndex:()=>rd,getFusedBiasGradient:()=>zh,getFusedDyActivation:()=>Lh,getImageCenter:()=>Lp,getInnerMostAxes:()=>Go,getPermuted:()=>Bp,getReductionAxes:()=>Co,getReshaped:()=>zp,getReshapedPermuted:()=>Pp,getSliceBeginCoords:()=>Wp,getSliceSize:()=>Vp,getUndoAxesPermutation:()=>Uo,linspaceImpl:()=>ld,log:()=>Zp,mergeRealAndImagArrays:()=>Qp,prepareAndValidate:()=>ni,prepareSplitSize:()=>Uc,reshapeTensor:()=>ud,segment_util:()=>f,shouldFuse:()=>Ph,slice_util:()=>h,splitRealAndImagArrays:()=>td,tupleValuesAreOne:()=>cu,upcastType:()=>cs,validateInput:()=>si,validateUpdateShape:()=>ri,warn:()=>Jp});var y={};n.r(y),n.d(y,{nonMaxSuppressionV3Impl:()=>rp,nonMaxSuppressionV4Impl:()=>sp,nonMaxSuppressionV5Impl:()=>ap,split:()=>cd,tile:()=>hd,topkImpl:()=>pd,whereImpl:()=>uh});var b={};n.r(b),n.d(b,{Abs:()=>zt,Acos:()=>Bt,Acosh:()=>Pt,AdadeltaOptimizer:()=>xo,AdagradOptimizer:()=>vo,AdamOptimizer:()=>Io,AdamaxOptimizer:()=>Ao,Add:()=>Wt,AddN:()=>Vt,All:()=>Ut,Any:()=>Gt,ArgMax:()=>Ht,ArgMin:()=>jt,Asin:()=>qt,Asinh:()=>Kt,Atan:()=>Xt,Atan2:()=>Jt,Atanh:()=>Yt,AvgPool:()=>Zt,AvgPool3D:()=>te,AvgPool3DBackprop:()=>ee,AvgPoolBackprop:()=>Qt,BatchMatMul:()=>ne,BatchToSpaceND:()=>re,BroadcastTo:()=>se,Cast:()=>ae,Ceil:()=>ie,ClipByValue:()=>oe,Complex:()=>ue,Concat:()=>le,Conv2D:()=>ce,Conv2DBackpropFilter:()=>he,Conv2DBackpropInput:()=>pe,Conv3D:()=>de,Conv3DBackpropFilterV2:()=>fe,Conv3DBackpropInputV2:()=>me,Cos:()=>ge,Cosh:()=>ye,CropAndResize:()=>xe,Cumsum:()=>be,DataStorage:()=>L,DepthToSpace:()=>we,DepthwiseConv2dNative:()=>ve,DepthwiseConv2dNativeBackpropFilter:()=>ke,DepthwiseConv2dNativeBackpropInput:()=>Ne,Diag:()=>Ie,Dilation2D:()=>$e,Dilation2DBackpropFilter:()=>Ce,Dilation2DBackpropInput:()=>Se,Div:()=>Te,ENV:()=>Ot,Elu:()=>Ee,EluGrad:()=>Ae,Environment:()=>Dt,Equal:()=>De,Erf:()=>Re,Exp:()=>Fe,Expm1:()=>_e,FFT:()=>Oe,Fill:()=>Me,FlipLeftRight:()=>Le,Floor:()=>ze,FloorDiv:()=>Be,FromPixels:()=>kr,FusedBatchNorm:()=>Pe,FusedConv2D:()=>$r,FusedDepthwiseConv2D:()=>Sr,GatherNd:()=>Ve,GatherV2:()=>We,Greater:()=>Ue,GreaterEqual:()=>Ge,IFFT:()=>je,Identity:()=>He,Imag:()=>qe,IsFinite:()=>Ke,IsInf:()=>Xe,IsNan:()=>Ye,KernelBackend:()=>z,LRN:()=>on,LRNBackprop:()=>un,Less:()=>Je,LessEqual:()=>Ze,LinSpace:()=>Qe,Log:()=>tn,Log1p:()=>en,LogSoftmax:()=>an,LogicalAnd:()=>nn,LogicalNot:()=>rn,LogicalOr:()=>sn,Max:()=>ln,MaxPool:()=>hn,MaxPool3D:()=>dn,MaxPool3DBackprop:()=>fn,MaxPoolBackprop:()=>pn,MaxPoolWithArgmax:()=>mn,Maximum:()=>cn,Mean:()=>gn,Min:()=>yn,Minimum:()=>bn,MirrorPad:()=>xn,Mod:()=>wn,MomentumOptimizer:()=>Do,Multiply:()=>vn,Negate:()=>kn,NonMaxSuppressionV3:()=>In,NonMaxSuppressionV4:()=>$n,NonMaxSuppressionV5:()=>Sn,NotEqual:()=>Nn,OP_SCOPE_SUFFIX:()=>As,OneHot:()=>Tn,OnesLike:()=>Cn,Optimizer:()=>bo,PadV2:()=>En,Pool:()=>An,Pow:()=>Rn,Prelu:()=>Dn,Prod:()=>Fn,RMSPropOptimizer:()=>Fo,Range:()=>_n,Rank:()=>ss,Real:()=>On,Reciprocal:()=>Mn,Reduction:()=>bp,Relu:()=>Ln,Relu6:()=>Un,Reshape:()=>zn,ResizeBilinear:()=>Wn,ResizeBilinearGrad:()=>Vn,ResizeNearestNeighbor:()=>Bn,ResizeNearestNeighborGrad:()=>Pn,Reverse:()=>Gn,RotateWithOffset:()=>Nr,Round:()=>Hn,Rsqrt:()=>jn,SGDOptimizer:()=>Ro,ScatterNd:()=>qn,SelectV2:()=>Kn,Selu:()=>Xn,Sigmoid:()=>tr,Sign:()=>Qn,Sin:()=>Jn,Sinh:()=>Zn,Slice:()=>Yn,Softmax:()=>ir,Softplus:()=>er,SpaceToBatchND:()=>sr,SparseToDense:()=>cr,SplitV:()=>ar,Sqrt:()=>nr,Square:()=>ur,SquaredDifference:()=>or,Step:()=>vr,StridedSlice:()=>hr,Sub:()=>lr,Sum:()=>rr,Tan:()=>pr,Tanh:()=>dr,Tensor:()=>ns,TensorBuffer:()=>Zr,Tile:()=>fr,TopK:()=>mr,Transpose:()=>gr,Unique:()=>yr,Unpack:()=>br,UnsortedSegmentSum:()=>xr,Variable:()=>rs,ZerosLike:()=>wr,_FusedMatMul:()=>Ir,abs:()=>$o,acos:()=>_o,acosh:()=>Oo,add:()=>no,addN:()=>Mo,addStrict:()=>yh,all:()=>Ho,any:()=>jo,argMax:()=>qo,argMin:()=>Ko,asin:()=>Xo,asinh:()=>Yo,atan:()=>Jo,atan2:()=>Zo,atanh:()=>Qo,avgPool:()=>du,avgPool3d:()=>fu,backend:()=>to,backend_util:()=>g,basicLSTMCell:()=>vu,batchNorm:()=>Iu,batchNorm2d:()=>$u,batchNorm3d:()=>Su,batchNorm4d:()=>Cu,batchToSpaceND:()=>ku,booleanMaskAsync:()=>ch,broadcastTo:()=>Tu,browser:()=>u,buffer:()=>Sa,cast:()=>Ca,ceil:()=>Eu,clipByValue:()=>Au,clone:()=>Ta,complex:()=>Ds,concat:()=>yu,concat1d:()=>Ru,concat2d:()=>Du,concat3d:()=>Fu,concat4d:()=>_u,conv1d:()=>Mu,conv2d:()=>Ou,conv2dTranspose:()=>zu,conv3d:()=>Bu,conv3dTranspose:()=>Wu,copyRegisteredKernels:()=>Mr,cos:()=>Vu,cosh:()=>Uu,cosineWindow:()=>_h,cumsum:()=>Gu,customGrad:()=>mo,deprecationWarn:()=>zi,depthToSpace:()=>Hu,depthwiseConv2d:()=>ju,device_util:()=>a,diag:()=>qu,dilation2d:()=>Ku,disableDeprecationWarnings:()=>Li,dispose:()=>Gi,disposeVariables:()=>Bi,div:()=>so,divNoNan:()=>Ju,divStrict:()=>bh,dot:()=>Zu,dropout:()=>Dh,elu:()=>Qu,enableDebugMode:()=>Mi,enableProdMode:()=>Oi,enclosingPowerOfTwo:()=>Fh,engine:()=>Pi,env:()=>Ft,equal:()=>Xu,equalStrict:()=>hh,erf:()=>tl,exp:()=>el,expandDims:()=>nl,expm1:()=>rl,eye:()=>al,fft:()=>Pc,fill:()=>wo,findBackend:()=>Ji,findBackendFactory:()=>Zi,floor:()=>il,floorDiv:()=>ro,fused:()=>m,gather:()=>pl,gatherND:()=>Rh,gather_util:()=>l,getBackend:()=>Xi,getGradient:()=>Ar,getKernel:()=>Er,getKernelsForBackend:()=>Rr,grad:()=>lo,grads:()=>co,greater:()=>dl,greaterEqual:()=>fl,greaterEqualStrict:()=>ph,greaterStrict:()=>dh,ifft:()=>Wc,imag:()=>ml,image:()=>Ap,inTopKAsync:()=>Oh,io:()=>i,irfft:()=>Vc,isFinite:()=>gl,isInf:()=>yl,isNaN:()=>bl,keep:()=>Hi,kernel_impls:()=>y,leakyRelu:()=>xl,less:()=>wl,lessEqual:()=>vl,lessEqualStrict:()=>fh,lessStrict:()=>mh,linalg:()=>Rp,linspace:()=>kl,localResponseNormalization:()=>Nl,log:()=>Il,log1p:()=>$l,logSigmoid:()=>Tl,logSoftmax:()=>Rl,logSumExp:()=>Dl,logicalAnd:()=>Fl,logicalNot:()=>_l,logicalOr:()=>Ol,logicalXor:()=>Ml,losses:()=>Dp,matMul:()=>Ka,math:()=>o,max:()=>El,maxPool:()=>Ll,maxPool3d:()=>zl,maxPoolWithArgmax:()=>Bl,maximum:()=>Eo,maximumStrict:()=>xh,mean:()=>Vl,memory:()=>Wi,min:()=>Ul,minimum:()=>Gl,minimumStrict:()=>wh,mirrorPad:()=>Hl,mod:()=>jl,modStrict:()=>vh,moments:()=>ql,movingAverage:()=>Th,mul:()=>ao,mulStrict:()=>kh,multiRNNCell:()=>Kl,multinomial:()=>Xl,neg:()=>Sl,nextFrame:()=>Mp,norm:()=>Ch,notEqual:()=>Yl,notEqualStrict:()=>gh,oneHot:()=>Xa,ones:()=>Wl,onesLike:()=>Zl,op:()=>Rs,outerProduct:()=>Ql,pad:()=>tc,pad1d:()=>ec,pad2d:()=>nc,pad3d:()=>rc,pad4d:()=>sc,pool:()=>ic,pow:()=>ko,powStrict:()=>Nh,prelu:()=>oc,print:()=>Ea,prod:()=>uc,profile:()=>Vi,rand:()=>lc,randomGamma:()=>fc,randomNormal:()=>mc,randomUniform:()=>gc,range:()=>bc,ready:()=>Ki,real:()=>Jl,reciprocal:()=>xc,registerBackend:()=>Qi,registerGradient:()=>Fr,registerKernel:()=>Dr,relu:()=>wc,relu6:()=>vc,removeBackend:()=>Yi,reshape:()=>qa,reverse:()=>kc,reverse1d:()=>Nc,reverse2d:()=>Ic,reverse3d:()=>$c,reverse4d:()=>Sc,rfft:()=>Hc,round:()=>Cc,rsqrt:()=>Tc,scalar:()=>yo,scatterND:()=>Eh,scatter_util:()=>c,selu:()=>Ec,separableConv2d:()=>Ac,serialization:()=>p,setBackend:()=>qi,setPlatform:()=>eo,setdiff1dAsync:()=>Rc,sigmoid:()=>bu,sign:()=>Dc,signal:()=>Ep,sin:()=>Fc,sinh:()=>_c,slice:()=>xu,slice1d:()=>Oc,slice2d:()=>Mc,slice3d:()=>Lc,slice4d:()=>zc,slice_util:()=>h,softmax:()=>Bc,softplus:()=>Cl,spaceToBatchND:()=>ac,sparseToDense:()=>Ah,spectral:()=>Tp,split:()=>Gc,sqrt:()=>io,square:()=>oo,squaredDifference:()=>jc,squaredDifferenceStrict:()=>Ih,squeeze:()=>qc,stack:()=>Kc,step:()=>Xc,stridedSlice:()=>Yc,sub:()=>No,subStrict:()=>$h,sum:()=>Al,sumOutType:()=>hs,tan:()=>Jc,tanh:()=>wu,tensor:()=>_s,tensor1d:()=>yc,tensor2d:()=>Zc,tensor3d:()=>Za,tensor4d:()=>Qc,tensor5d:()=>th,tensor6d:()=>eh,tensor_util:()=>s,test_util:()=>d,tidy:()=>Ui,tile:()=>sl,time:()=>ji,topk:()=>nh,train:()=>_p,transpose:()=>Ya,truncatedNormal:()=>rh,unique:()=>sh,unregisterGradient:()=>Or,unregisterKernel:()=>_r,unsortedSegmentSum:()=>ah,unstack:()=>ih,upcastType:()=>cs,util:()=>r,valueAndGrad:()=>ho,valueAndGrads:()=>po,variable:()=>oh,variableGrads:()=>fo,version_core:()=>_i,where:()=>Yu,whereAsync:()=>lh,zeros:()=>Pl,zerosLike:()=>uo});var x={};n.r(x),n.d(x,{json:()=>Yx});var w={};n.r(w),n.d(w,{json:()=>Jx});var v={};n.r(v),n.d(v,{json:()=>Zx});var k={};n.r(k),n.d(k,{json:()=>Qx});var N={};n.r(N),n.d(N,{json:()=>tw});var I={};n.r(I),n.d(I,{json:()=>ew});var $={};n.r($),n.d($,{json:()=>nw});var S={};n.r(S),n.d(S,{json:()=>rw});var C={};n.r(C),n.d(C,{json:()=>sw});var T={};n.r(T),n.d(T,{json:()=>aw});var E={};n.r(E),n.d(E,{json:()=>iw});var A={};n.r(A),n.d(A,{json:()=>ow});var R={};n.r(R),n.d(R,{json:()=>uw});var D={};n.r(D),n.d(D,{json:()=>lw});var F={};n.r(F),n.d(F,{json:()=>cw});var _={};n.r(_),n.d(_,{json:()=>hw});var O={};n.r(O),n.d(O,{json:()=>pw});var M={};n.r(M),n.d(M,{addImpl:()=>tk,ceilImpl:()=>Ek,expImpl:()=>dN,expm1Impl:()=>gN,floorImpl:()=>MN,logImpl:()=>KN,maxImpl:()=>eI,multiplyImpl:()=>xN,notEqualImpl:()=>pI,rsqrtImpl:()=>vI,simpleAbsImpl:()=>lk,sliceImpl:()=>NN,squaredDifferenceImpl:()=>HI,subImpl:()=>SN,transposeImpl:()=>nI,uniqueImpl:()=>QI});class L{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class z{time(t){return B("time")}read(t){return B("read")}readSync(t){return B("readSync")}numDataIds(){return B("numDataIds")}disposeData(t){return B("disposeData")}write(t,e,n){return B("write")}move(t,e,n,r){return B("move")}memory(){return B("memory")}floatPrecision(){return B("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,r){return B("batchMatMul")}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){return B("fusedBatchMatMul")}slice(t,e,n){return B("slice")}stridedSlice(t,e,n,r){return B("stridedSlice")}unstack(t,e){return B("unstack")}reverse(t,e){return B("reverse")}concat(t,e){return B("concat")}neg(t){return B("neg")}add(t,e){return B("add")}addN(t){return B("addN")}subtract(t,e){return B("subtract")}multiply(t,e){return B("multiply")}realDivide(t,e){return B("realDivide")}floorDiv(t,e){return B("floorDiv")}sum(t,e){return B("sum")}prod(t,e){return B("prod")}unsortedSegmentSum(t,e,n){return B("unsortedSegmentSum")}argMin(t,e){return B("argMin")}argMax(t,e){return B("argMax")}equal(t,e){return B("equal")}notEqual(t,e){return B("notEqual")}less(t,e){return B("less")}lessEqual(t,e){return B("lessEqual")}greater(t,e){return B("greater")}greaterEqual(t,e){return B("greaterEqual")}logicalNot(t){return B("logicalNot")}logicalAnd(t,e){return B("logicalAnd")}logicalOr(t,e){return B("logicalOr")}where(t){return B("where")}select(t,e,n){return B("select")}topk(t,e,n){return B("topk")}min(t,e){return B("min")}minimum(t,e){return B("minimum")}mod(t,e){return B("mod")}max(t,e){return B("max")}maximum(t,e){return B("maximum")}all(t,e){return B("all")}any(t,e){return B("any")}squaredDifference(t,e){return B("squaredDifference")}ceil(t){return B("ceil")}floor(t){return B("floor")}round(t){return B("round")}sign(t){return B("sign")}isNaN(t){return B("isNaN")}isInf(t){return B("isInf")}isFinite(t){return B("isFinite")}pow(t,e){return B("pow")}exp(t){return B("exp")}expm1(t){return B("expm1")}softmax(t,e){return B("softmax")}log(t){return B("log")}log1p(t){return B("log1p")}sqrt(t){return B("sqrt")}rsqrt(t){return B("rsqrt")}square(t){return B("square")}reciprocal(t){return B("reciprocal")}relu(t){return B("relu")}relu6(t){return B("relu6")}prelu(t,e){return B("prelu")}elu(t){return B("elu")}eluDer(t,e){return B("eluDer")}selu(t){return B("selu")}int(t){return B("int")}clip(t,e,n){return B("clip")}abs(t){return B("abs")}complexAbs(t){return B("complexAbs")}sigmoid(t){return B("sigmoid")}softplus(t){return B("softplus")}sin(t){return B("sin")}cos(t){return B("cos")}tan(t){return B("tan")}asin(t){return B("asin")}acos(t){return B("acos")}atan(t){return B("atan")}atan2(t,e){return B("atan2")}sinh(t){return B("sinh")}cosh(t){return B("cosh")}tanh(t){return B("tanh")}asinh(t){return B("asinh")}acosh(t){return B("acosh")}atanh(t){return B("atanh")}erf(t){return B("erf")}step(t,e){return B("step")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return B("fusedConv2d")}conv2d(t,e,n){return B("conv2d")}conv2dDerInput(t,e,n){return B("conv2dDerInput")}conv2dDerFilter(t,e,n){return B("conv2dDerFilter")}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return B("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return B("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return B("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return B("depthwiseConv2DDerFilter")}conv3d(t,e,n){return B("conv3d")}conv3dDerInput(t,e,n){return B("conv3dDerInput")}conv3dDerFilter(t,e,n){return B("conv3dDerFilter")}maxPool(t,e){return B("maxPool")}maxPoolBackprop(t,e,n,r){return B("maxPoolBackprop")}avgPool(t,e){return B("avgPool")}avgPoolBackprop(t,e,n){return B("avgPoolBackprop")}avgPool3d(t,e){return B("avgPool3d")}avgPool3dBackprop(t,e,n){return B("avgPool3dBackprop")}maxPool3d(t,e){return B("maxPool3d")}maxPool3dBackprop(t,e,n,r){return B("maxPool3dBackprop")}reshape(t,e){return B("reshape")}cast(t,e){return B("cast")}tile(t,e){return B("tile")}pad(t,e,n){return B("pad")}transpose(t,e){return B("transpose")}gather(t,e,n){return B("gather")}gatherND(t,e){return B("gatherND")}scatterND(t,e,n){return B("scatterND")}batchToSpaceND(t,e,n){return B("batchToSpaceND")}spaceToBatchND(t,e,n){return B("spaceToBatchND")}resizeBilinear(t,e,n,r){return B("resizeBilinear")}resizeBilinearBackprop(t,e,n){return B("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,r){return B("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return B("resizeNearestNeighborBackprop")}batchNorm(t,e,n,r,s,a){return B("batchNorm")}localResponseNormalization4D(t,e,n,r,s){return B("localResponseNormalization4D")}LRNGrad(t,e,n,r,s,a,i){return B("LRNGrad")}multinomial(t,e,n,r){return B("multinomial")}oneHot(t,e,n,r){return B("oneHot")}cumsum(t,e,n,r){return B("cumsum")}nonMaxSuppression(t,e,n,r,s){return B("nonMaxSuppression")}fft(t){return B("fft")}ifft(t){return B("ifft")}complex(t,e){return B("complex")}real(t){return B("real")}imag(t){return B("imag")}cropAndResize(t,e,n,r,s,a){return B("cropAndResize")}depthToSpace(t,e,n){return B("depthToSpace")}split(t,e,n){return B("split")}sparseToDense(t,e,n,r){return B("sparseToDense")}diag(t){return B("diag")}fill(t,e,n){return B("fill")}onesLike(t){return B("onesLike")}zerosLike(t){return B("zerosLike")}linspace(t,e,n){return B("linspace")}dispose(){return B("dispose")}}function B(t){throw new Error(`'${t}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function P(t){let e=t.length,n=0,r=0;for(;e>0;)r=Math.random()*e|0,e--,n=t[e],t[e]=t[r],t[r]=n}function W(t,e,n){return Math.max(t,Math.min(e,n))}function V(t){return t%2==0?t:t+1}function U(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}function G(t,e){const n=Math.random();return e*n+(1-n)*t}function H(t,e){let n=0;for(let r=0;r<t.length;r++){const s=Number(t[r])-Number(e[r]);n+=s*s}return n}function j(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function q(t,e,n=""){j(Z(t,e),(()=>n+` Shapes ${t} and ${e} must match`))}function K(t){j(null!=t,(()=>"The input to the tensor constructor must be a non-null value."))}function X(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||dt(t)&&!n)for(let r=0;r<t.length;++r)X(t[r],e,n);else e.push(t);return e}function Y(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function J(t){return 0===t.length}function Z(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function Q(t){return t%1==0}function tt(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function et(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function nt(t){const e=new Uint32Array(t);for(let n=0;n<t;++n)e[n]=n;return P(e),e}function rt(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function st(t,e=(t=>0),n){return new Promise(((r,s)=>{let a=0;const i=()=>{if(t())return void r();a++;const o=e(a);null!=n&&a>=n?s():setTimeout(i,o)};i()}))}function at(t,e){let n=1,r=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${e}`);r=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const s=t.slice();return s[r]=e/n,s}function it(t,e){const n=e.length;return j((t=null==t?e.map(((t,e)=>e)):[].concat(t)).every((t=>t>=-n&&t<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${t}`)),j(t.every((t=>Q(t))),(()=>`All values in axis param must be integers but got axis ${t}`)),t.map((t=>t<0?n+t:t))}function ot(t,e){const n=[],r=[],s=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||s?null:it(e,t).sort();let i=0;for(let e=0;e<t.length;++e){if(null!=a){if(a[i]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==a[i]||a[i]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),a[i]<=e&&i++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}function ut(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error(`Unknown data type ${t}`);n=new Uint8Array(e)}return n}function lt(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error(`Unknown data type ${t}`);n=new Array(e)}return n}function ct(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}function ht(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function pt(t,e){return!("complex64"===e||"float32"===e&&"complex64"!==t||"int32"===e&&"float32"!==t&&"complex64"!==t||"bool"===e&&"bool"===t)}function dt(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function ft(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error(`Unknown dtype ${t}`)}function mt(t){if(null==t)return 0;let e=0;return t.forEach((t=>e+=t.length)),e}function gt(t){return"string"==typeof t||t instanceof String}function yt(t){return"boolean"==typeof t}function bt(t){return"number"==typeof t}function xt(t){return Array.isArray(t)?xt(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":bt(t)?"float32":gt(t)?"string":yt(t)?"bool":"float32"}function wt(t){return!!(t&&t.constructor&&t.call&&t.apply)}function vt(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function kt(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function Nt(t,e,n){const r=new Array;if(1===e.length){const s=e[0];for(let e=0;e<s;e++)r[e]=n[t+e]}else{const s=e[0],a=e.slice(1),i=a.reduce(((t,e)=>t*e));for(let e=0;e<s;e++)r[e]=Nt(t+e*i,a,n)}return r}function It(t,e){if(0===t.length)return e[0];const n=t.reduce(((t,e)=>t*e));if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}.`);return Nt(0,t,e)}function $t(t,e){const n=St(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function St(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error(`Unknown data type ${e}`)}function Ct(t,e){const n=t.reduce(((t,e)=>t*e),1);if(null==e||"float32"===e)return It(t,new Float32Array(n));if("int32"===e)return It(t,new Int32Array(n));if("bool"===e)return It(t,new Uint8Array(n));throw new Error(`Unknown data type ${e}`)}function Tt(t){t.forEach((e=>{j(Number.isInteger(e)&&e>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`))}))}function Et(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let e=0;e<t.length-1;++e)r+=n[e]*t[e];return r}function At(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let e=0;e<r.length-1;++e)r[e]=Math.floor(t/n[e]),t-=r[e]*n[e];return r[r.length-1]=t,r}function Rt(t){return t&&t.then&&"function"==typeof t.then}class Dt{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(Rt(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("=")))),e}(this.global.location.search);"tfjsflags"in t&&t.tfjsflags.split(",").forEach((t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)}))}}function Ft(){return Ot}let _t,Ot=null;function Mt(){if(null==_t){let t;if("undefined"!=typeof window)t=window;else if(void 0!==n.g)t=n.g;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}_t=t}return _t}function Lt(t,e){const n=function(){const t=Mt();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}const zt="Abs",Bt="Acos",Pt="Acosh",Wt="Add",Vt="AddN",Ut="All",Gt="Any",Ht="ArgMax",jt="ArgMin",qt="Asin",Kt="Asinh",Xt="Atan",Yt="Atanh",Jt="Atan2",Zt="AvgPool",Qt="AvgPoolBackprop",te="AvgPool3D",ee="AvgPool3DBackprop",ne="BatchMatMul",re="BatchToSpaceND",se="BroadcastTo",ae="Cast",ie="Ceil",oe="ClipByValue",ue="Complex",le="Concat",ce="Conv2D",he="Conv2DBackpropFilter",pe="Conv2DBackpropInput",de="Conv3D",fe="Conv3DBackpropFilterV2",me="Conv3DBackpropInputV2",ge="Cos",ye="Cosh",be="Cumsum",xe="CropAndResize",we="DepthToSpace",ve="DepthwiseConv2dNative",ke="DepthwiseConv2dNativeBackpropFilter",Ne="DepthwiseConv2dNativeBackpropInput",Ie="Diag",$e="Dilation2D",Se="Dilation2DBackpropInput",Ce="Dilation2DBackpropFilter",Te="Div",Ee="Elu",Ae="EluGrad",Re="Erf",De="Equal",Fe="Exp",_e="Expm1",Oe="FFT",Me="Fill",Le="FlipLeftRight",ze="Floor",Be="FloorDiv",Pe="FusedBatchNorm",We="GatherV2",Ve="GatherNd",Ue="Greater",Ge="GreaterEqual",He="Identity",je="IFFT",qe="Imag",Ke="IsFinite",Xe="IsInf",Ye="IsNan",Je="Less",Ze="LessEqual",Qe="LinSpace",tn="Log",en="Log1p",nn="LogicalAnd",rn="LogicalNot",sn="LogicalOr",an="LogSoftmax",on="LRN",un="LRNBackprop",ln="Max",cn="Maximum",hn="MaxPool",pn="MaxPoolBackprop",dn="MaxPool3D",fn="MaxPool3DBackprop",mn="MaxPoolWithArgmax",gn="Mean",yn="Min",bn="Minimum",xn="MirrorPad",wn="Mod",vn="Multiply",kn="Negate",Nn="NotEqual",In="NonMaxSuppressionV3",$n="NonMaxSuppressionV4",Sn="NonMaxSuppressionV5",Cn="OnesLike",Tn="OneHot",En="PadV2",An="Pool",Rn="Pow",Dn="Prelu",Fn="Prod",_n="Range",On="Real",Mn="Reciprocal",Ln="Relu",zn="Reshape",Bn="ResizeNearestNeighbor",Pn="ResizeNearestNeighborGrad",Wn="ResizeBilinear",Vn="ResizeBilinearGrad",Un="Relu6",Gn="Reverse",Hn="Round",jn="Rsqrt",qn="ScatterNd",Kn="SelectV2",Xn="Selu",Yn="Slice",Jn="Sin",Zn="Sinh",Qn="Sign",tr="Sigmoid",er="Softplus",nr="Sqrt",rr="Sum",sr="SpaceToBatchND",ar="SplitV",ir="Softmax",or="SquaredDifference",ur="Square",lr="Sub",cr="SparseToDense",hr="StridedSlice",pr="Tan",dr="Tanh",fr="Tile",mr="TopK",gr="Transpose",yr="Unique",br="Unpack",xr="UnsortedSegmentSum",wr="ZerosLike",vr="Step",kr="FromPixels",Nr="RotateWithOffset",Ir="_FusedMatMul",$r="FusedConv2D",Sr="FusedDepthwiseConv2D",Cr=Lt("kernelRegistry",(()=>new Map)),Tr=Lt("gradRegistry",(()=>new Map));function Er(t,e){const n=Lr(t,e);return Cr.get(n)}function Ar(t){return Tr.get(t)}function Rr(t){const e=Cr.entries(),n=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===t&&n.push(i)}return n}function Dr(t){const{kernelName:e,backendName:n}=t,r=Lr(e,n);Cr.has(r)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),Cr.set(r,t)}function Fr(t){const{kernelName:e}=t;Tr.has(e)&&Ft().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${e}'`),Tr.set(e,t)}function _r(t,e){const n=Lr(t,e);if(!Cr.has(n))throw new Error(`The kernel '${t}' for backend '${e}' is not registered`);Cr.delete(n)}function Or(t){if(!Tr.has(t))throw new Error(`The gradient '${t}' for backend is not registered`);Tr.delete(t)}function Mr(t,e){Rr(t).forEach((t=>{Dr(Object.assign({},t,{backendName:e}))}))}function Lr(t,e){return`${e}_${t}`}class zr{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new Pr)}profileKernel(t,e,n){let r;const s=this.backendTimer.time((()=>{r=n()}));for(let e=0;e<r.length;e++){const n=r[e];n.data().then((e=>{Br(e,n.dtype,t)}))}return{kernelName:t,outputs:r,inputs:e,timeMs:s.then((t=>t.kernelMs)),extraInfo:s.then((t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():""))}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:r,inputs:s,extraInfo:a}=t;n.forEach((t=>{Promise.all([t.data(),r,a]).then((n=>{this.logger.logKernelProfile(e,t,n[0],n[1],s,n[2])}))}))}}function Br(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class Pr{logKernelProfile(t,e,n,r,s,a){const i="number"==typeof r?rt(`${r}ms`,9):r.error,o=rt(t,25),u=e.rank,l=e.size,c=rt(e.shape.toString(),14);let h="";for(const t in s){const n=s[t];if(null!=n){const r=n.shape||e.shape,s=r.length;h+=`${t}: ${s}D ${s>0?r:""} `}}console.log(`%c${o}\t%c${i}\t%c${u}D ${c}\t%c${l}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Wr(t,e,n,r){const s=kt(e),a=function(t,e,n,r){const s=Y(e),a=r[r.length-1],i=new Array(a).fill(0),o=e.length,u="complex64"===n?Hr(t):t;if(o>1)for(let t=0;t<s/a;t++){const e=t*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],Vr(u[e+t],0,n).length)}return i}(t,e,n,s),i=e.length,o=Gr(t,e,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${i}`),u.push(`  shape: [${e}]`),u.push("  values:")),u.push(o.map((t=>"    "+t)).join("\n")),u.join("\n")}function Vr(t,e,n){let r;return r=Array.isArray(t)?`${parseFloat(t[0].toFixed(7))} + ${parseFloat(t[1].toFixed(7))}j`:gt(t)?`'${t}'`:"bool"===n?Ur(t):parseFloat(t.toFixed(7)).toString(),rt(r,e)}function Ur(t){return 0===t?"false":"true"}function Gr(t,e,n,r,s,a=!0){const i="complex64"===n?2:1,o=e[0],u=e.length;if(0===u)return"complex64"===n?[Vr(Hr(t)[0],0,n)]:"bool"===n?[Ur(t[0])]:[t[0].toString()];if(1===u){if(o>20){const e=3*i;let r=Array.from(t.slice(0,e)),a=Array.from(t.slice((o-3)*i,o*i));return"complex64"===n&&(r=Hr(r),a=Hr(a)),["["+r.map(((t,e)=>Vr(t,s[e],n))).join(", ")+", ..., "+a.map(((t,e)=>Vr(t,s[o-3+e],n))).join(", ")+"]"]}return["["+("complex64"===n?Hr(t):Array.from(t)).map(((t,e)=>Vr(t,s[e],n))).join(", ")+"]"]}const l=e.slice(1),c=r.slice(1),h=r[0]*i,p=[];if(o>20){for(let e=0;e<3;e++){const r=e*h,a=r+h;p.push(...Gr(t.slice(r,a),l,n,c,s,!1))}p.push("...");for(let e=o-3;e<o;e++){const r=e*h,a=r+h;p.push(...Gr(t.slice(r,a),l,n,c,s,e===o-1))}}else for(let e=0;e<o;e++){const r=e*h,a=r+h;p.push(...Gr(t.slice(r,a),l,n,c,s,e===o-1))}const d=2===u?",":"";p[0]="["+p[0]+d;for(let t=1;t<p.length-1;t++)p[t]=" "+p[t]+d;let f=",\n";for(let t=2;t<u;t++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function Hr(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}function jr(t,e){return"string"===e?Yr(t):qr([t],e)}function qr(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=X(t)),Ft().getBool("DEBUG")&&ct(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error(`Unknown data type ${e}`)}function Kr(){return Ft().platform.now()}function Xr(t,e){return Ft().platform.fetch(t,e)}function Yr(t,e="utf-8"){return e=e||"utf-8",Ft().platform.encode(t,e)}function Jr(t,e="utf-8"){return e=e||"utf-8",Ft().platform.decode(t,e)}class Zr{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=Y(t),null!=n){const t=n.length;j(t===this.size,(()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||lt(e,this.size),this.strides=kt(t)}set(t,...e){0===e.length&&(e=[0]),j(e.length===this.rank,(()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`));const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return Qr().makeTensor(this.values,this.shape,this.dtype)}}let Qr=null,ts=null,es=null;class ns{constructor(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=Y(t),this.strides=kt(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return ts.buffer(this.shape,this.dtype,t)}bufferSync(){return ts.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return It(this.shape,t)}arraySync(){return It(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=Qr().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map((t=>Jr(t)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=Qr().readSync(this.dataId);if("string"===this.dtype)try{return t.map((t=>Jr(t)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await Qr().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(Qr().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return ts.print(this,t)}clone(){return this.throwIfDisposed(),ts.clone(this)}toString(t=!1){return Wr(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),ts.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),Qr().makeVariable(this,t,e,n)}}Object.defineProperty(ns,Symbol.hasInstance,{value:t=>!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed});class rs extends ns{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!Z(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);Qr().disposeTensor(this),this.dataId=t.dataId,Qr().incRef(this,null)}dispose(){Qr().disposeVariable(this),this.isDisposedInternal=!0}}var ss,as,is,os,us;Object.defineProperty(rs,Symbol.hasInstance,{value:t=>t instanceof ns&&null!=t.assign&&t.assign instanceof Function}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(ss||(ss={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(as||(as={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(is||(is={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(os||(os={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(us||(us={}));const ls={float32:os,int32:as,bool:is,complex64:us};function cs(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return ls[t][e]}function hs(t){return cs(t,"int32")}function ps(t,e){if(t.dtype===e.dtype)return[t,e];const n=cs(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function ds(t,e){j(t.dtype===e.dtype,(()=>`The dtypes of the first(${t.dtype}) and second(${e.dtype}) input must match`))}function fs(t,e){return e.some((e=>e.id===t.id))}function ms(t){const e=[];return gs(t,e,new Set),e}function gs(t,e,n){if(null==t)return;if(t instanceof ns)return void e.push(t);if(r=t,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=t;for(const t in s){const r=s[t];n.has(r)||(n.add(r),gs(r,e,n))}}class ys{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class bs{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new ys}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(`${t} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new zr(this.backendInstance),!0}setupRegisteredKernels(){Rr(this.backendName).forEach((t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(t){Rr(t).forEach((e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])}))}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(!n||n instanceof z||"function"!=typeof n.then)return this.registry[t]=n,{success:!0,asyncInit:!1};{const e=++this.pendingBackendInitId,r=n.then((n=>!(e<this.pendingBackendInitId||(this.registry[t]=n,this.pendingBackendInit=null,0)))).catch((n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(`${t} backend not found in registry`);this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority))}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,s=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return bs.nextTensorId++}nextVariableId(){return bs.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(t=>({x:()=>{const e="float32",n={x:t},r={dtype:e};return ws.runKernelFunc((n=>n.cast(t,e)),n,null,ae,r)}})),[],{}),e}runKernel(t,e,n,r,s){return this.runKernelFunc(null,e,null,t,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let s=0;n.forEach((t=>{s+="complex64"===t.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-e-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${t}'`)}runKernelFunc(t,e,n,r,s,a,i){let o,u=[];const l=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,h=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const d=Er(r,this.backendName);let f,m;if(null!=d)p=()=>{const t=this.backend.numDataIds();f=d.kernelFunc({inputs:e,attrs:s,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,t,n);const o=n.map((({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n)));if(l){let t=this.getTensorsForGradient(r,e,o);if(null==t){null==i&&(i=[]);const e=o.filter(((t,e)=>i[e]));t=(a||[]).slice().concat(e)}u=this.saveTensorsForBackwardMode(t)}return o};else{const e=t=>{l&&(u=t.map((t=>this.keep(this.clone(t)))))};p=()=>{const n=this.backend.numDataIds();f=this.tidy((()=>t(this.backend,e)));const s=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(r,e,(()=>p())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),o=m.outputs):o=p()})),l&&this.addTapeNode(r,e,o,n,u,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map((t=>null!=e[t]?e[t].shape:null)),outputShapes:o.map((t=>t.shape)),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(f)?o:o[0]}saveTensorsForBackwardMode(t){return t.map((t=>this.keep(this.clone(t))))}getTensorsForGradient(t,e,n){const r=Ar(t);if(null!=r){const t=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(j(Array.isArray(e),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(e).map((t=>e[t]))):a=t.map((t=>e[t]));const i=n.filter(((t,e)=>s[e]));return a.concat(i)}return null}makeTensor(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=t;"string"===n&&gt(t[0])&&(s=t.map((t=>Yr(t))));const a=r.write(s,e,n),i=new ns(e,n,a,this.nextTensorId());if(this.incRef(i,r),"string"===n){const t=this.state.tensorInfo.get(a),e=mt(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return i}makeTensorFromDataId(t,e,n,r){const s=new ns(e,n=n||"float32",t,this.nextTensorId());return this.incRef(s,r),s}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));const s=new rs(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*ft(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof rs||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((t=>t.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const t of this.state.activeProfile.kernels)t.kernelTimeMs=await t.kernelTimeMs,t.extraInfo=await t.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},o=Ar(t);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=t=>(t=t.map(((t,e)=>{if(null==t){const t=n[e],r=St(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t})),r(t.length>1?t:t[0],s,a))),this.state.activeTape.push(i)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=ms(t),n=new Set(e.map((t=>t.id)));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach((t=>{t.kept||t.scopeId!==r.id||this.track(t)}))}gradients(t,e,n,r=!1){if(j(e.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",t)));j(s instanceof ns,(()=>"The result y returned by f() must be a tensor."));const a=function(t,e,n){const r={},s={};for(let t=0;t<e.length;t++)r[e[t].id]=!0;for(let n=0;n<t.length;n++){const a=t[n],i=a.inputs;for(const t in i){const n=i[t];let o=!1;for(let t=0;t<e.length;t++)if(r[n.id]){a.outputs.forEach((t=>r[t.id]=!0)),o=!0,s[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let e=t.length-1;e>=0;e--){const n=t[e],r=n.inputs;for(let t=0;t<n.outputs.length;t++)if(a[n.outputs[t].id]){for(const t in r)a[r[t].id]=!0,i[n.id]=!0;break}}const o=[];for(let e=0;e<t.length;e++){const n=t[e];if(s[n.id]&&i[n.id]){const t={};for(const e in n.inputs){const s=n.inputs[e];r[s.id]&&(t[e]=s)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,o.push(e)}}return o}(this.state.activeTape,e,s);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const t={};t[s.id]=null==n?function(t){const e=$t(Y(t),"float32");return ws.makeTensor(e,t,"float32")}(s.shape):n,function(t,e,n,r){for(let s=e.length-1;s>=0;s--){const a=e[s],i=[];if(a.outputs.forEach((e=>{const n=t[e.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const e in a.inputs){if(!(e in o))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(o)}.`);const s=n((()=>o[e]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${s.dtype}'`);const i=a.inputs[e];if(!Z(s.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${e}' has shape '${s.shape}', which does not match the shape of the input '${i.shape}'`);if(null==t[i.id])t[i.id]=s;else{const e=t[i.id];t[i.id]=r(e,s),e.dispose()}}}}(t,a,(t=>this.tidy(t)),vs);const r=e.map((e=>t[e.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((t=>{for(const e of t.saved)e.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(t){return j(wt(t),(()=>"The f passed in customGrad(f) must be a function.")),(...e)=>{let n;j(e.every((t=>t instanceof ns)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};return e.forEach(((t,e)=>{r[e]=t})),this.runKernelFunc(((r,s)=>(n=t(...e,s),j(n.value instanceof ns,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),j(wt(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value)),r,((t,r)=>{const s=n.gradFunc(t,r),a=Array.isArray(s)?s:[s];j(a.length===e.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),j(a.every((t=>t instanceof ns)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((t,e)=>{i[e]=()=>t})),i}))}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=Kr(),n=await this.backend.time(t);return n.wallMs=Kr()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new ys;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function xs(){const t=Mt();if(null==t._tfengine){const e=new Dt(t);t._tfengine=new bs(e)}var e;return e=t._tfengine.ENV,Ot=e,Qr=()=>t._tfengine,t._tfengine}bs.nextTensorId=0,bs.nextVariableId=0;const ws=xs();function vs(t,e){const n={a:t,b:e};return ws.runKernelFunc(((n,r)=>{const s=n.add(t,e);return r([t,e]),s}),n,null,Wt)}function ks(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Ns(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Is=Ft();function $s(t,e){let n=t;if(dt(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const r=[];for(;Array.isArray(n)||dt(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&Ft().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Ss(t,r,[]),r}function Ss(t,e,n){if(n=n||[],!Array.isArray(t)&&!dt(t))return void j(0===e.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`));j(e.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${t.length} elements`)),j(t.length===e[0],(()=>`Element arr[${n.join("][")}] should have ${e[0]} elements, but has ${t.length} elements`));const r=e.slice(1);for(let e=0;e<t.length;++e)Ss(t[e],r,n.concat(e))}function Cs(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}function Ts(t,e,n,r="numeric"){if(t instanceof ns)return Cs(r,t.dtype,e,n),t;let s=xt(t);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Cs(r,s,e,n),null==t||!dt(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=$s(t,s);dt(t)||Array.isArray(t)||(t=[t]);const i="string"!==s?qr(t,s):X(t,[],!0);return ws.makeTensor(i,a,s)}function Es(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map(((t,r)=>Ts(t,`${e}[${r}]`,n)),r)}Is.registerFlag("DEBUG",(()=>!1),(t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Is.registerFlag("IS_BROWSER",(()=>Ns())),Is.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),Is.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Is.registerFlag("PROD",(()=>!1)),Is.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Is.getBool("DEBUG"))),Is.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Is.registerFlag("IS_TEST",(()=>!1));const As="__op";function Rs(t){const e=Object.keys(t);if(1!==e.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);let n=e[0];const r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=As;const s=(...t)=>{ws.startScope(n);try{const e=r(...t);return Rt(e)&&console.error("Cannot return a Promise inside of tidy."),ws.endScope(e),e}catch(t){throw ws.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Ds=Rs({complex_:function(t,e){const n=Ts(t,"real","complex"),r=Ts(e,"imag","complex");q(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return ws.runKernelFunc((t=>t.complex(n,r)),s,null,ue)}});function Fs(t,e,n,r){if(null==r&&(r=xt(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!dt(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){Tt(e);const t=Y(e),r=Y(n);j(t===r,(()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`));for(let t=0;t<n.length;++t){const r=n[t],s=t!==n.length-1||r!==Y(e.slice(t));j(n[t]===e[t]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `))}}return dt(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?qr(t,r):X(t,[],!0),ws.makeTensor(t,e,r)}function _s(t,e,n){return Fs(t,e,$s(t,n),n)}const Os={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function Ms(t,e){const n=[],r=[],s=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(t)?t[a].tensor:t[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const t=new Promise((async t=>{const e=await o.bytes(),n=e.reduce(((t,e)=>t+e.length),0)+4*e.length,r=new Uint8Array(n);let s=0;for(let t=0;t<e.length;t++){const n=e[t],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}t(r)}));r.push(t)}else r.push(o.data());null!=e&&(u.group=e),n.push(u)}return{data:zs(await Promise.all(r)),specs:n}}function Ls(t,e){const n={};let r,s=0;for(const a of e){const e=a.name,i=a.dtype,o=a.shape,u=Y(o);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Os[n.dtype],c=t.slice(s,s+u*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];l[t]=e*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Gs()),l=r(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];l[t]=Math.round(e*n.scale+n.min)}}s+=u*o}else if("string"===i){const e=Y(a.shape);l=[];for(let n=0;n<e;n++){const e=new Uint32Array(t.slice(s,s+4))[0];s+=4;const n=new Uint8Array(t.slice(s,s+e));l.push(n),s+=e}}else{const r=Os[i],a=t.slice(s,s+u*r);if("float32"===i)l=new Float32Array(a);else if("int32"===i)l=new Int32Array(a);else if("bool"===i)l=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);{l=new Float32Array(a);const t=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let e=0;e<t.length;e++)t[e]=l[2*e],r[e]=l[2*e+1];const s=_s(t,o,"float32"),i=_s(r,o,"float32");n[e]=Ds(s,i),s.dispose(),i.dispose()}}s+=u*r}"complex64"!==i&&(n[e]=_s(l,o,i))}return n}function zs(t){if(null===t)throw new Error(`Invalid input value: ${JSON.stringify(t)}`);let e=0;const n=[];t.forEach((t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${t.constructor.name}`)}));const r=new Uint8Array(e);let s=0;return n.forEach((t=>{r.set(new Uint8Array(t.buffer),s),s+=t.byteLength})),r.buffer}const Bs="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Ps(t){return Bs?Buffer.byteLength(t):new Blob([t]).size}function Ws(t){if(1===t.length)return t[0];let e=0;t.forEach((t=>{e+=t.byteLength}));const n=new Uint8Array(e);let r=0;return t.forEach((t=>{n.set(new Uint8Array(t),r),r+=t.byteLength})),n.buffer}function Vs(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);const e=t.split("/");return e[e.length-1]}function Us(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:Ps(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:Ps(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function Gs(){const t=function(){const t=t=>{let e=t<<13,n=0;for(;0==(8388608&e);)n-=8388608,e<<=1;return e&=-8388609,n+=947912704,e|n},e=new Uint32Array(2048);e[0]=0;for(let n=1;n<1024;n++)e[n]=t(n);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let e=1;e<31;e++)t[e]=e<<23;for(let e=33;e<63;e++)t[e]=2147483648+(e-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let e=0;e<64;e++)t[e]=1024;return t[0]=t[32]=0,t}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const i=r[s],o=t[n[i>>10]+(1023&i)]+e[i>>10];a[s]=o}return new Float32Array(s)}}class Hs{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Hs.instance&&(Hs.instance=new Hs),Hs.instance}static registerSaveRouter(t){Hs.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Hs.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Hs.getHandlers(t,"save")}static getLoadHandlers(t,e){return Hs.getHandlers(t,"load",e)}static getHandlers(t,e,n){const r=[];return("load"===e?Hs.getInstance().loadRouters:Hs.getInstance().saveRouters).forEach((e=>{const s=e(t,n);null!==s&&r.push(s)})),r}}const js=t=>Hs.registerSaveRouter(t),qs=t=>Hs.registerLoadRouter(t),Ks=t=>Hs.getSaveHandlers(t),Xs=(t,e)=>Hs.getLoadHandlers(t,e),Ys="tensorflowjs",Js="models_store",Zs="model_info_store";function Qs(){if(!Ft().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function ta(t){const e=t.result;e.createObjectStore(Js,{keyPath:"modelPath"}),e.createObjectStore(Zs,{keyPath:"modelPath"})}class ea{constructor(t){if(this.indexedDB=Qs(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise(((t,n)=>{const r=this.indexedDB.open(Ys,1);r.onupgradeneeded=()=>ta(r),r.onsuccess=()=>{const s=r.result;if(null==e){const e=s.transaction(Js,"readonly"),r=e.objectStore(Js).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(r.result.modelArtifacts)},r.onerror=t=>(s.close(),n(r.error)),e.oncomplete=()=>s.close()}else{const r=Us(e),a=s.transaction(Zs,"readwrite");let i=a.objectStore(Zs);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;o.onsuccess=()=>{u=s.transaction(Js,"readwrite");const o=u.objectStore(Js).put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:r});o.onsuccess=()=>t({modelArtifactsInfo:r}),o.onerror=t=>{i=a.objectStore(Zs);const e=i.delete(this.modelPath);e.onsuccess=()=>(s.close(),n(o.error)),e.onerror=t=>(s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=t=>n(r.error)}))}}ea.URL_SCHEME="indexeddb://";const na=t=>{return Ft().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(ea.URL_SCHEME)?(e=t.slice(ea.URL_SCHEME.length),new ea(e)):null;var e};Hs.registerSaveRouter(na),Hs.registerLoadRouter(na);class ra{constructor(){this.indexedDB=Qs()}async listModels(){return new Promise(((t,e)=>{const n=this.indexedDB.open(Ys,1);n.onupgradeneeded=()=>ta(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(Zs,"readonly"),a=s.objectStore(Zs).getAll();a.onsuccess=()=>{const e={};for(const t of a.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},a.onerror=t=>(r.close(),e(a.error)),s.oncomplete=()=>r.close()},n.onerror=t=>e(n.error)}))}async removeModel(t){var e;return t=(e=t).startsWith(ea.URL_SCHEME)?e.slice(ea.URL_SCHEME.length):e,new Promise(((e,n)=>{const r=this.indexedDB.open(Ys,1);r.onupgradeneeded=()=>ta(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(Zs,"readwrite"),i=a.objectStore(Zs),o=i.get(t);let u;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const r=i.delete(t),a=()=>{u=s.transaction(Js,"readwrite");const r=u.objectStore(Js).delete(t);r.onsuccess=()=>e(o.result.modelArtifactsInfo),r.onerror=t=>n(o.error)};r.onsuccess=a,r.onerror=t=>(a(),s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=t=>n(r.error)}))}}const sa="/",aa="tensorflowjs_models",ia="info",oa="model_topology",ua="weight_specs",la="weight_data",ca="model_metadata";function ha(t){return{info:[aa,t,ia].join(sa),topology:[aa,t,oa].join(sa),weightSpecs:[aa,t,ua].join(sa),weightData:[aa,t,la].join(sa),modelMetadata:[aa,t,ca].join(sa)}}function pa(t){const e=t.split(sa);if(e.length<3)throw new Error(`Invalid key format: ${t}`);return e.slice(1,e.length-1).join(sa)}class da{constructor(t){if(!Ft().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=ha(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=Us(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(Bs)return Buffer.from(t).toString("base64");const e=new Uint8Array(t);let n="";for(let t=0,r=e.length;t<r;t++)n+=String.fromCharCode(e[t]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:r}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const t=JSON.parse(s);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,e.userDefinedMetadata=t.userDefinedMetadata}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=function(t){if(Bs){const e=Buffer.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}const e=atob(t),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n.set([e.charCodeAt(t)],t);return n.buffer}(a),e}}da.URL_SCHEME="localstorage://";const fa=t=>{return Ft().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(da.URL_SCHEME)?(e=t.slice(da.URL_SCHEME.length),new da(e)):null;var e};Hs.registerSaveRouter(fa),Hs.registerLoadRouter(fa);class ma{constructor(){j(Ft().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),j("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const t={},e=aa+sa,n=sa+ia;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);s.startsWith(e)&&s.endsWith(n)&&(t[pa(s)]=JSON.parse(this.LS.getItem(s)))}return t}async removeModel(t){var e;const n=ha(t=(e=t).startsWith(da.URL_SCHEME)?e.slice(da.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}const ga="://";class ya{constructor(){this.managers={}}static getInstance(){return null==ya.instance&&(ya.instance=new ya),ya.instance}static registerManager(t,e){j(null!=t,(()=>"scheme must not be undefined or null.")),t.endsWith(ga)&&(t=t.slice(0,t.indexOf(ga))),j(t.length>0,(()=>"scheme must not be an empty string."));const n=ya.getInstance();j(null==n.managers[t],(()=>`A model store manager is already registered for scheme '${t}'.`)),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}function ba(t){if(-1===t.indexOf(ga))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ya.getSchemes().join(",")}`);return{scheme:t.split(ga)[0],path:t.split(ga)[1]}}async function xa(t,e,n=!1){j(t!==e,(()=>`Old path and new path are the same: '${t}'`));const r=Hs.getLoadHandlers(t);j(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${t}.`)),j(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${t}.`));const s=r[0],a=Hs.getSaveHandlers(e);j(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${e}.`)),j(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${e}.`));const i=a[0],o=ba(t).scheme,u=ba(t).path,l=o===ba(t).scheme,c=await s.load();n&&l&&await ya.getManager(o).removeModel(u);const h=await i.save(c);return n&&!l&&await ya.getManager(o).removeModel(u),h.modelArtifactsInfo}async function wa(){const t=ya.getSchemes(),e={};for(const n of t){const t=await ya.getManager(n).listModels();for(const r in t)e[n+ga+r]=t[r]}return e}async function va(t){const e=ba(t);return ya.getManager(e.scheme).removeModel(e.path)}async function ka(t,e){return xa(t,e,!1)}async function Na(t,e){return xa(t,e,!0)}class Ia{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}if(Ft().get("IS_BROWSER")){Ft().setPlatform("browser",new Ia);try{ya.registerManager(da.URL_SCHEME,new ma)}catch(t){}try{ya.registerManager(ea.URL_SCHEME,new ra)}catch(t){}}let $a;function Sa(t,e="float32",n){return e=e||"float32",Tt(t),new Zr(t,e,n)}Ft().get("IS_NODE")&&Ft().setPlatform("node",new class{constructor(){this.util=n(758),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=Ft().global.fetch?Ft().global.fetch(t,e):(null==$a&&($a=n(352)),$a(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}});const Ca=Rs({cast_:function(t,e){const n=Ts(t,"x","cast");if(!ht(e))throw new Error(`Failed to cast to unknown dtype ${e}`);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:e};return ws.runKernelFunc((t=>t.cast(n,e)),r,null,ae,s)}}),Ta=Rs({clone_:function(t){const e=Ts(t,"x","clone",null),n={x:e};return ws.runKernelFunc((()=>ws.makeTensorFromDataId(e.dataId,e.shape,e.dtype)),n,null,He)}});function Ea(t,e=!1){console.log(t.toString(e))}function Aa(t){return new Promise((t=>setTimeout(t))).then(t)}xs(),ts={buffer:Sa,cast:Ca,clone:Ta,print:Ea};class Ra{constructor(t){if(!Ft().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(Ra.URL_SCHEME)&&(t=t.slice(Ra.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=s,await Aa((()=>a.dispatchEvent(new MouseEvent("click")))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await Aa((()=>t.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Us(t)}}}}Ra.URL_SCHEME="downloads://";class Da{constructor(t){if(null==t||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.files=t}async load(){const t=this.files[0],e=this.files.slice(1);return new Promise(((n,r)=>{const s=new FileReader;s.onload=s=>{const a=JSON.parse(s.target.result),i=a.modelTopology;if(null==i)return void r(new Error(`modelTopology field is missing from file ${t.name}`));0===e.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void r(new Error(`weightManifest field is missing from file ${t.name}`));let u;try{u=this.checkManifestAndWeightFiles(o,e)}catch(t){return void r(t)}const l=[],c=[],h=[];o.forEach((t=>{t.paths.forEach((t=>{c.push(t),h.push(null)})),l.push(...t.weights)})),o.forEach((t=>{t.paths.forEach((t=>{const e=new FileReader;e.onload=e=>{const r=e.target.result,s=c.indexOf(t);h[s]=r,-1===h.indexOf(null)&&n({modelTopology:i,weightSpecs:l,weightData:Ws(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},e.onerror=e=>r(`Failed to weights data from file of path '${t}'.`),e.readAsArrayBuffer(u[t])}))}))},s.onerror=e=>r(`Failed to read model topology and weights manifest JSON from file '${t.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),s.readAsText(t)}))}checkManifestAndWeightFiles(t,e){const n=[],r=e.map((t=>Vs(t.name))),s={};for(const a of t)a.paths.forEach((t=>{const a=Vs(t);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===r.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[t]=e[r.indexOf(a)]}));if(n.length!==e.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${e.length}).`);return s}}function Fa(t){return new Da(t)}function _a(t,e,n,r){!function(t){j(null!=t&&Array.isArray(t)&&t.length>0,(()=>"promises must be a none empty array"))}(t),function(t,e){j(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${t}`)),j(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${e}`)),j(e>=t,(()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction ${e}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(t.map((a=>(a.then((a=>{const i=n+ ++s/t.length*(r-n);return e(i),a})),a))))}async function Oa(t,e){null==e&&(e={});const n=null==e.fetchFunc?Ft().platform.fetch:e.fetchFunc,r=t.map((t=>n(t,e.requestInit,{isBinary:!0}))),s=(null==e.onProgress?await Promise.all(r):await _a(r,e.onProgress,0,.5)).map((t=>t.arrayBuffer()));return null==e.onProgress?await Promise.all(s):await _a(s,e.onProgress,.5,1)}async function Ma(t,e="",n,r){return La((t=>Oa(t,{requestInit:r})))(t,e,n)}function La(t){return async(e,n="",r)=>{const s=e.map((()=>!1)),a={},i=null!=r?r.map((()=>!1)):[],o=[];if(e.forEach(((t,e)=>{let n=0;t.weights.forEach((t=>{const u="quantization"in t?t.quantization.dtype:t.dtype,l=Os[u]*Y(t.shape),c=()=>{s[e]=!0,null==a[e]&&(a[e]=[]),a[e].push({manifestEntry:t,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((e,n)=>{e===t.name&&(c(),i[n]=!0)})):c(),o.push(t.name),n+=l}))})),!i.every((t=>t))){const t=r.filter(((t,e)=>!i[e]));throw new Error(`Could not find weights in manifest with names: ${t.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const u=s.reduce(((t,e,n)=>(e&&t.push(n),t)),[]),l=[];u.forEach((t=>{e[t].paths.forEach((t=>{const e=n+(n.endsWith("/")?"":"/")+t;l.push(e)}))}));const c=await t(l),h={};let p=0;return u.forEach((t=>{const n=e[t].paths.length;let r=0;for(let t=0;t<n;t++)r+=c[p+t].byteLength;const s=new ArrayBuffer(r),i=new Uint8Array(s);let o=0;for(let t=0;t<n;t++){const e=new Uint8Array(c[p+t]);i.set(e,o),o+=e.byteLength}a[t].forEach((t=>{const e=Ls(s.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(const t in e)h[t]=e[t]})),p+=n})),h}}Hs.registerSaveRouter((t=>Ft().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Ra.URL_SCHEME)?function(t="model"){return new Ra(t)}(t.slice(Ra.URL_SCHEME.length)):null));class za{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,null!=e.fetchFunc?(j("function"==typeof e.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=e.fetchFunc):this.fetch=Ft().platform.fetch,j(null!=t&&t.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(t)&&j(2===t.length,(()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`)),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n};e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:Us(t),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,r=e.weightsManifest,s=e.generatedBy,a=e.convertedBy,i=e.format,o=e.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,l;if(null!=r){const t=await this.loadWeights(r);[u,l]=t}const c={modelTopology:n,weightSpecs:u,weightData:l,userDefinedMetadata:o,generatedBy:s,convertedBy:a,format:i},h=e.modelInitializer;return h&&(c.modelInitializer=h),c}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?");return[t.substring(0,e)+"/",n>e?t.substring(n):""]}(e),s=this.weightPathPrefix||n,a=[];for(const e of t)a.push(...e.weights);const i=[],o=[];for(const e of t)for(const t of e.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(t)):i.push(s+t+r);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[a,Ws(await Oa(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Ba(t){return null!=t.match(za.URL_SCHEME_REGEX)}za.URL_SCHEME_REGEX=/^https?:\/\//;const Pa=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every((t=>Ba(t))):Ba(t),n)return Wa(t,e)}return null};function Wa(t,e){return new za(t,e)}function Va(t,e){return Wa(t,e)}Hs.registerSaveRouter(Pa),Hs.registerLoadRouter(Pa);class Ua{constructor(t){this.modelArtifacts=t}async load(){return this.modelArtifacts}}class Ga{constructor(t){this.saveHandler=t}async save(t){return this.saveHandler(t)}}function Ha(t,e,n,r){return 1===arguments.length?null!=t.modelTopology||null!=t.weightSpecs?new Ua(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ua({modelTopology:t})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ua({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r}))}function ja(t){return new Ga(t)}const qa=Rs({reshape_:function(t,e){const n=Ts(t,"x","reshape",null),r={x:n},s={shape:e};return ws.runKernelFunc(((t,r)=>(e=at(e,n.size),j(n.size===Y(e),(()=>"new shape and old shape must have the same number of elements.")),r([n]),t.reshape(n,e))),r,null,zn,s)}}),Ka=Rs({matMul_:function(t,e,n=!1,r=!1){let s=Ts(t,"a","matMul"),a=Ts(e,"b","matMul");[s,a]=ps(s,a);const i={a:s,b:a},o={transposeA:n,transposeB:r};return ws.runKernelFunc(((t,e)=>{e([s,a]);const i=n?s.shape[s.rank-2]:s.shape[s.rank-1],o=r?a.shape[a.rank-1]:a.shape[a.rank-2],u=n?s.shape[s.rank-1]:s.shape[s.rank-2],l=r?a.shape[a.rank-2]:a.shape[a.rank-1],c=s.shape.slice(0,-2),h=a.shape.slice(0,-2),p=Y(c),d=Y(h),f=p===d||1===p||1===d;j(s.rank>=2&&a.rank>=2&&f,(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${c}) and (${h}).`)),j(i===o,(()=>`Error in matMul: inner shapes (${i}) and (${o}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${n} and transposeB=${r} must match.`));const m=(p>d?c:h).concat([u,l]),g=qa(s,n?[p,i,u]:[p,u,i]),y=qa(a,r?[d,l,o]:[d,o,l]),b=t.batchMatMul(g,y,n,r);return qa(b,m)}),i,null,ne,o)}}),Xa=Rs({oneHot_:function(t,e,n=1,r=0){if(e<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);const s=Ts(t,"indices","oneHot","int32"),a=[...s.shape,e],i={indices:s},o={depth:e,onValue:n,offValue:r};return ws.runKernelFunc(((t,i)=>(i([s]),qa(t.oneHot(qa(s,[s.size]),e,n,r),a))),i,null,Tn,o)}}),Ya=Rs({transpose_:function(t,e){const n=Ts(t,"x","transpose");if(null==e&&(e=n.shape.map(((t,e)=>e)).reverse()),j(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`)),e.forEach((t=>{j(t>=0&&t<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${e}`))})),n.rank<=1)return n.clone();const r={x:n},s={perm:e};return ws.runKernelFunc((t=>t.transpose(n,e)),r,null,gr,s)}}),Ja=Rs({confusionMatrix_:function(t,e,n){const r=Ts(t,"labels","confusionMatrix"),s=Ts(e,"predictions","confusionMatrix");j(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),j(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),j(1===s.rank,(()=>`Expected the rank of predictions to be 1, but got ${s.rank}`)),j(r.shape[0]===s.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`)),j(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=Xa(Ca(r,"int32"),n),i=Xa(Ca(s,"int32"),n),o=Ya(a),u=Ka(o,i);return Ca(u,"int32")}});function Za(t,e,n){if(K(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const r=$s(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Fs(t,e,r,n)}let Qa;async function ti(t,e){let n=Ts(t,"img","toPixels");if(!(t instanceof ns)){const t=n;n=Ca(t,"int32"),t.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,u=new Uint8ClampedArray(s*r*4);for(let t=0;t<r*s;++t){const e=[0,0,0,255];for(let r=0;r<a;r++){const s=i[t*a+r];if("float32"===n.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if("int32"===n.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===a?(e[0]=s*o,e[1]=s*o,e[2]=s*o):e[r]=s*o}const r=4*t;u[r+0]=Math.round(e[0]),u[r+1]=Math.round(e[1]),u[r+2]=Math.round(e[2]),u[r+3]=Math.round(e[3])}if(null!=e){e.width=s,e.height=r;const t=e.getContext("2d"),n=new ImageData(u,s,r);t.putImageData(n,0,0)}return n!==t&&n.dispose(),u}const ei=Rs({fromPixels_:function(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${t.constructor.name}`);i=!0}if(s){const e=2;if(s&&t.readyState<e)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Er(kr,ws.backendName)){const n={pixels:t},r={numChannels:e};return ws.runKernel(kr,n,r)}const[o,u]=s?[t.videoWidth,t.videoHeight]:[t.width,t.height];let l,c;if(i?l=t.getContext("2d").getImageData(0,0,o,u).data:r||n?l=t.data:(a||s)&&(null==Qa&&(Qa=document.createElement("canvas").getContext("2d")),Qa.canvas.width=o,Qa.canvas.height=u,Qa.drawImage(t,0,0,o,u),l=Qa.getImageData(0,0,o,u).data),4===e)c=new Int32Array(l);else{const t=o*u;c=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)c[n*e+t]=l[4*n+t]}return Za(c,[u,o,e],"int32")}});function ni(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,r=n[n.length-1];let s=1;for(let t=0;t<n.length-1;++t)s*=n[t];const a=t.shape,i=n.slice();i.pop();let o=1;for(let e=r;e<t.rank;++e)o*=a[e],i.push(a[e]);const u=[...kt(t.shape).map((t=>t/o)),1].slice(0,r);return[i,s,o,u]}function ri(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${e.shape}, shape: ${t}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(t.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+t.length-r)throw new Error(a+" update.rank != "+(s+t.length-r));for(let t=0;t<s;++t)if(n.shape[t]!==e.shape[t])throw new Error(a+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-s;++e)if(n.shape[e+s]!==t[e+r])throw new Error(a+` updates.shape[${e+s}] (${n.shape[e+s]}) != shape[${e+s}] (${t[e+s]})`)}function si(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===e.size)throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);if(0===t.size)throw new Error(`Updates specified for empty output. updates shape: ${t.shape}`)}ri(n,e,t)}function ai(t,e,n){const r=e.shape.length,s=r>1?e.shape[r-1]:1,a=n.length;let i=1;for(let t=s;t<a;++t)i*=n[t];const o=s<1?1:s;return{sliceRank:s,numUpdates:Y(e.shape)/o,sliceSize:i,strides:[...kt(n.slice(0,s)),1],outputSize:Y(n)}}function ii(t,e,n){const r=t.shape.length;j(r===e.length,(()=>`Error in slice${r}D: Length of begin ${e} must match the rank of the array (${r}).`)),j(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)j(e[s]+n[s]<=t.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${e[s]+n[s]}) would overflow input.shape[${s}] (${t.shape[s]})`))}function oi(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function ui(t,e,n){const r=[];for(let s=0;s<t.length;s++)r[s]=Math.ceil((e[s]-t[s])/n[s]);return r}function li(t,e,n,r){const s=[...t];for(let t=s.length;t<r.length;t++)s.push(1);for(let t=0;t<n;t++)0===t?s[e]=1:(s.splice(e,0,1),s.pop());return s}function ci(t,e,n){return n<=t?n:n-(e-1)}function hi(t,e){const n=[];for(let r=0;r<t;r++)n.push(e+r);return n}function pi(t,e,n,r,s,a,i,o,u){const l=t.length;let c=new Array(l),h=new Array(l),p=new Array(l);if(e.length&&n>0){const u=e[0],l=n+1;c=di(i,u,l,r,t),h=fi(o,u,l,s,t),p=li(a,u,l,t)}else for(let e=0;e<l;e++)c[e]=gi(i,r,a,t,e,u),h[e]=yi(o,s,a,t,e,u),p[e]=mi(a,e,u);return{begin:c,end:h,strides:p}}function di(t,e,n,r,s){const a=[...s],i=hi(n,e);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=0;else{const i=ci(e,n,s);let o=r[i];t&1<<i&&(o=0),a[s]=o}return a}function fi(t,e,n,r,s){const a=[...s],i=hi(n,e);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const i=ci(e,n,s);let o=r[i];t&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[s]=o}for(let t=0;t<a.length;t++){const e=s[t];a[t]<0&&(a[t]+=e),a[t]=W(0,a[t],s[t])}return a}function mi(t,e,n){let r=t[e];return(n&1<<e||null==r)&&(r=1),r}function gi(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=W(0,i,u-1),i}function yi(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=o>0?W(0,i,u):W(-1,i,u-1),i}function bi(t,e,n){let r=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){r=t;break}for(let s=r+1;s<n.length;s++)if(e[s]>0||n[s]!==t[s])return!1;return!0}function xi(t,e){let n=t.length>0?t[t.length-1]:1;for(let r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}function wi(t,e,n){let r;const s=t.shape.length;let a;return r="number"==typeof e?[e,...new Array(s-1).fill(0)]:e.length<s?e.concat(new Array(s-e.length).fill(0)):e.slice(),r.forEach((t=>{j(-1!==t,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map(((e,n)=>e>=0?e:(j(-1===e,(()=>`Negative size values should be exactly -1 but got ${e} for the slice() size at index ${n}.`)),t.shape[n]-r[n]))),[r,a]}class vi{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class ki{constructor(){this.classNameMap={}}static getMap(){return null==ki.instance&&(ki.instance=new ki),ki.instance}static register(t){ki.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function Ni(t){j(null!=t.className,(()=>"Class being registered does not have the static className property defined.")),j("string"==typeof t.className,(()=>"className is required to be a string, but got type "+typeof t.className)),j(t.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),ki.register(t)}const Ii=.1;function $i(t,e,n){return null==n&&(n=Si()),Ci(t,e,((t,e)=>Ri(t,e,n)))}function Si(){return 32===ws.backend.floatPrecision()?.001:Ii}function Ci(t,e,n){let r=!0;if((dt(t)||dt(e))&&(r=!1),dt(t)&&dt(e)&&(r=!0),r){const n=t.constructor.name,r=e.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${r}`)}if(Array.isArray(t)&&Array.isArray(e)){const n=$s(t),r=$s(e);if(!Z(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const s=dt(t)?t:X(t),a=dt(e)?e:X(e);if(s.length!==a.length)throw new Error(`Arrays have different lengths actual: ${s.length} vs expected: ${a.length}.\nActual:   ${s}.\nExpected: ${a}.`);for(let t=0;t<a.length;++t){const e=s[t],r=a[t];if(!n(e,r))throw new Error(`Arrays differ: actual[${t}] = ${e}, expected[${t}] = ${r}.\nActual:   ${s}.\nExpected: ${a}.`)}}function Ti(t,e){t().then((()=>e.fail()),(()=>e()))}function Ei(t,e){const n="string"==typeof e||"number"==typeof e||"boolean"==typeof e?[e]:e;return gt(t)||gt(t[0])||gt(e)||gt(e[0])?Ci(t,n,((t,e)=>t==e)):Ci(t,e,((t,e)=>Ri(t,e,0)))}function Ai(t,e,n){if(null==n&&(n=Si()),!Ri(t,e,n))throw new Error(`Numbers differ: actual === ${t}, expected === ${e}`)}function Ri(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}function Di(t,e,n){for(let r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error(`Value out of range:${t[r]} low: ${e}, high: ${n}`)}function Fi(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}const _i="2.7.0";function Oi(){Ft().set("PROD",!0)}function Mi(){Ft().set("DEBUG",!0)}function Li(){Ft().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function zi(t){Ft().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Bi(){ws.disposeVariables()}function Pi(){return ws}function Wi(){return ws.memory()}function Vi(t){return ws.profile(t)}function Ui(t,e){return ws.tidy(t,e)}function Gi(t){ms(t).forEach((t=>t.dispose()))}function Hi(t){return ws.keep(t)}function ji(t){return ws.time(t)}function qi(t){return ws.setBackend(t)}function Ki(){return ws.ready()}function Xi(){return ws.backendName}function Yi(t){ws.removeBackend(t)}function Ji(t){return ws.findBackend(t)}function Zi(t){return ws.findBackendFactory(t)}function Qi(t,e,n=1){return ws.registerBackend(t,e,n)}function to(){return ws.backend}function eo(t,e){Ft().setPlatform(t,e)}es=zi;const no=Rs({add_:function(t,e){let n=Ts(t,"a","add"),r=Ts(e,"b","add");[n,r]=ps(n,r);const s={a:n,b:r};return ws.runKernelFunc(((t,e)=>{const s=t.add(n,r);return e([n,r]),s}),s,null,Wt)}}),ro=Rs({floorDiv_:function(t,e){let n=Ts(t,"a","floorDiv"),r=Ts(e,"b","floorDiv");[n,r]=ps(n,r);const s={a:n,b:r};return ws.runKernelFunc(((t,e)=>{const s=t.floorDiv(n,r);return e([n,r]),s}),s,null,Be)}}),so=Rs({div_:function(t,e){let n=Ts(t,"a","div"),r=Ts(e,"b","div");if([n,r]=ps(n,r),"int32"===n.dtype&&"int32"===r.dtype)return ro(n,r);const s={a:n,b:r};return ws.runKernelFunc(((t,e)=>{const s=t.realDivide(n,r);return e([n,r]),s}),s,null,Te,{})}}),ao=Rs({mul_:function(t,e){let n=Ts(t,"a","mul"),r=Ts(e,"b","mul");[n,r]=ps(n,r);const s={a:n,b:r};return ws.runKernelFunc(((t,e)=>{const s=t.multiply(n,r);return e([n,r]),s}),s,null,vn)}}),io=Rs({sqrt_:function(t){const e=Ts(t,"x","sqrt"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.sqrt(e);return n([e]),r}),n,null,nr)}}),oo=Rs({square_:function(t){const e=Ts(t,"x","square"),n=[e];return ws.runKernelFunc(((t,n)=>(n([e]),t.square(e))),{x:e},null,"Square",{},n,[])}}),uo=Rs({zerosLike_:function(t){const e=Ts(t,"x","zerosLike"),n={x:e};return ws.runKernelFunc((t=>t.zerosLike(e)),n,null,wr)}});function lo(t){return j(wt(t),(()=>"The f passed in grad(f) must be a function")),(e,n)=>{const r=Ts(e,"x","tf.grad",null),s=null!=n?Ts(n,"dy","tf.grad"):null;return ws.tidy((()=>{const{value:e,grads:n}=ws.gradients((()=>t(r)),[r],s);return null!=s&&q(e.shape,s.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),go(n),n[0]}))}}function co(t){return j(wt(t),(()=>"The f passed in grads(f) must be a function")),(e,n)=>{j(Array.isArray(e),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const r=Es(e,"args","tf.grads",null),s=null!=n?Ts(n,"dy","tf.grads"):null;return ws.tidy((()=>{const{value:e,grads:n}=ws.gradients((()=>t(...r)),r,s);return null!=s&&q(e.shape,s.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),go(n),n}))}}function ho(t){return j(wt(t),(()=>"The f passed in valueAndGrad(f) must be a function")),(e,n)=>{j(e instanceof ns,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),j(null==n||n instanceof ns,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:r,value:s}=ws.gradients((()=>t(e)),[e],n);return go(r),{grad:r[0],value:s}}}function po(t){return j(wt(t),(()=>"The f passed in valueAndGrads(f) must be a function")),(e,n)=>{j(Array.isArray(e)&&e.every((t=>t instanceof ns)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),j(null==n||n instanceof ns,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const r=ws.gradients((()=>t(...e)),e,n);return null!=n&&q(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),go(r.grads),r}}function fo(t,e){j(wt(t),(()=>"The f passed in variableGrads(f) must be a function")),j(null==e||Array.isArray(e)&&e.every((t=>t instanceof rs)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=e;if(!n){e=[];for(const t in ws.registeredVariables)e.push(ws.registeredVariables[t])}const r=n?e.filter((t=>!t.trainable)):null,s=e.length;j((e=e.filter((t=>t.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:a,grads:i}=ws.gradients(t,e,null,!0);j(i.some((t=>null!=t)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),j(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return e.forEach(((t,e)=>{null!=i[e]&&(o[t.name]=i[e])})),null!=r&&r.forEach((t=>o[t.name]=null)),{value:a,grads:o}}function mo(t){return ws.customGrad(t)}function go(t){if(t.filter((t=>null==t)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function yo(t,e){if((dt(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&dt(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Fs(t,[],[],e)}class bo extends vi{minimize(t,e=!1,n){const{value:r,grads:s}=this.computeGradients(t,n);if(null!=n){const t=n.map((t=>({name:t.name,tensor:s[t.name]})));this.applyGradients(t)}else this.applyGradients(s);return Gi(s),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return fo(t,e)}dispose(){null!=this.iterations_&&Gi(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:yo(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(bo,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});class xo extends bo{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=ws.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=ws.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${e}/accum_grad`,variable:Ui((()=>uo(r).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${e}/accum_var`,variable:Ui((()=>uo(r).variable(!1)))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;Ui((()=>{const t=no(ao(a,this.rho),ao(oo(s),1-this.rho)),e=ao(so(io(no(i,this.epsilon)),io(no(a,this.epsilon))),s),n=no(ao(i,this.rho),ao(oo(e),1-this.rho));a.assign(t),i.assign(n);const o=no(ao(e,-this.learningRate),r);r.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Gi(this.accumulatedGrads.map((t=>t.variable))),Gi(this.accumulatedUpdates.map((t=>t.variable))))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(!1)}))),this.accumulatedUpdates=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}function wo(t,e,n){const r={shape:t,value:e,dtype:n};return ws.runKernelFunc((r=>r.fill(t,e,n)),{},null,Me,r)}xo.className="Adadelta",Ni(xo);class vo extends bo{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=ws.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:`${e}/accumulator`,variable:Ui((()=>wo(r.shape,this.initialAccumulatorValue).variable(t)))}}const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable;Ui((()=>{const t=no(a,oo(s));a.assign(t);const e=no(ao(so(s,io(no(t,ws.backend.epsilon()))),-this.learningRate),r);r.assign(e)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Gi(this.accumulatedGrads.map((t=>t.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t),this.accumulatedGrads=t.map((t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}vo.className="Adagrad",Ni(vo);const ko=Rs({pow_:function(t,e){let n=Ts(t,"base","pow"),r=Ts(e,"exp","pow");[n,r]=ps(n,r);const s={a:n,b:r};return ws.runKernelFunc(((t,e)=>{const s=t.pow(n,r);return e([n,r,s]),s}),s,null,Rn)}}),No=Rs({sub_:function(t,e){let n=Ts(t,"a","sub"),r=Ts(e,"b","sub");[n,r]=ps(n,r);const s={a:n,b:r};return ws.runKernelFunc(((t,e)=>{const s=t.subtract(n,r);return e([n,r]),s}),s,null,lr)}});class Io extends bo{constructor(t,e,n,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Ui((()=>{this.accBeta1=yo(e).variable(),this.accBeta2=yo(n).variable()})),null==r&&(this.epsilon=ws.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);Ui((()=>{const n=No(1,this.accBeta1),r=No(1,this.accBeta2);e.forEach(((e,s)=>{const a=ws.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${e}/m`,variable:Ui((()=>uo(a).variable(!1)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${e}/v`,variable:Ui((()=>uo(a).variable(!1)))});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,l=no(ao(o,this.beta1),ao(i,1-this.beta1)),c=no(ao(u,this.beta2),ao(oo(i),1-this.beta2)),h=so(l,n),p=so(c,r);o.assign(l),u.assign(c);const d=no(ao(so(h,no(io(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(ao(this.accBeta1,this.beta1)),this.accBeta2.assign(ao(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Gi(this.accumulatedFirstMoment.map((t=>t.variable))),null!=this.accumulatedSecondMoment&&Gi(this.accumulatedSecondMoment.map((t=>t.variable)))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t),Ui((()=>{this.accBeta1.assign(ko(this.beta1,this.iterations_+1)),this.accBeta2.assign(ko(this.beta2,this.iterations_+1))}));const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(!1)}))),this.accumulatedSecondMoment=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}Io.className="Adam",Ni(Io);const $o=Rs({abs_:function(t){const e=Ts(t,"x","abs"),n={x:e};return ws.runKernelFunc(((t,n)=>(n([e]),"complex64"===e.dtype?t.complexAbs(e):t.abs(e))),n,null,zt)}});function So(t,e){const n=t.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=t[a]||1;(e[e.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function Co(t,e){const n=[];for(let r=0;r<e.length;r++){const s=t[t.length-r-1],a=e.length-r-1,i=e[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function To(t,e){const n=[],r=Math.max(t.length,e.length);for(let s=0;s<r;s++){let r=t[t.length-s-1];null==r&&(r=1);let a=e[e.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a)throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`);n.unshift(r)}}return n}const Eo=Rs({maximum_:function(t,e){let n=Ts(t,"a","maximum"),r=Ts(e,"b","maximum");[n,r]=ps(n,r),"bool"===n.dtype&&(n=Ca(n,"int32"),r=Ca(r,"int32")),To(n.shape,r.shape);const s={a:n,b:r};return ws.runKernelFunc(((t,e)=>{const s=t.maximum(n,r);return e([n,r]),s}),s,null,cn)}});class Ao extends bo{constructor(t,e,n,r=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Ui((()=>{this.iteration=yo(0).variable(),this.accBeta1=yo(e).variable()})),null==r&&(this.epsilon=ws.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);Ui((()=>{const n=No(1,this.accBeta1),r=so(-this.learningRate,no(ao(this.iteration,this.decay),1));e.forEach(((e,s)=>{const a=ws.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${e}/m`,variable:uo(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${e}/v`,variable:uo(a).variable(!1)});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,l=no(ao(o,this.beta1),ao(i,1-this.beta1)),c=ao(u,this.beta2),h=$o(i),p=Eo(c,h);o.assign(l),u.assign(p);const d=no(ao(so(r,n),so(l,no(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(no(this.iteration,1)),this.accBeta1.assign(ao(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Gi(this.accumulatedFirstMoment.map((t=>t.variable))),null!=this.accumulatedWeightedInfNorm&&Gi(this.accumulatedWeightedInfNorm.map((t=>t.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}Ao.className="Adamax",Ni(Ao);class Ro extends bo{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const s=ws.registeredVariables[e];Ui((()=>{const t=no(ao(this.c,r),s);s.assign(t)}))})),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=Hi(yo(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}Ro.className="SGD",Ni(Ro);class Do extends Ro{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=yo(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=ws.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:`${e}/momentum`,variable:Ui((()=>uo(r).variable(t)))}}const s=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[e];null!=a&&Ui((()=>{let t;const e=no(ao(this.m,s),a);t=this.useNesterov?no(ao(this.c,no(a,ao(e,this.m))),r):no(ao(this.c,e),r),s.assign(e),r.assign(t)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Gi(this.accumulations.map((t=>t.variable)))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t),this.accumulations=t.map((t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}Do.className="Momentum",Ni(Do);class Fo extends bo{constructor(t,e=.9,n=0,r=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=ws.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=ws.registeredVariables[e],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${e}/rms`,variable:Ui((()=>uo(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${e}/momentum`,variable:Ui((()=>uo(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${e}/mg`,variable:Ui((()=>uo(r).variable(s)))});const a=Array.isArray(t)?t[n].tensor:t[e];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;Ui((()=>{const t=no(ao(i,this.decay),ao(oo(a),1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,s=no(ao(e,this.decay),ao(a,1-this.decay)),u=so(ao(a,this.learningRate),io(No(t,no(oo(s),this.epsilon)))),l=no(ao(o,this.momentum),u);i.assign(t),e.assign(s),o.assign(l);const c=No(r,l);r.assign(c)}else{const t=no(ao(i,this.decay),ao(oo(a),1-this.decay)),e=no(ao(o,this.momentum),so(ao(a,this.learningRate),io(no(t,this.epsilon))));i.assign(t),o.assign(e);const n=No(r,e);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Gi(this.accumulatedMeanSquares.map((t=>t.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Gi(this.accumulatedMeanGrads.map((t=>t.variable))),null!=this.accumulatedMoments&&Gi(this.accumulatedMoments.map((t=>t.variable)))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2,n=!1;this.accumulatedMeanSquares=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))),this.accumulatedMoments=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}Fo.className="RMSProp",Ni(Fo);const _o=Rs({acos_:function(t){const e=Ts(t,"x","acos"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.acos(e);return n([e]),r}),n,null,Bt)}}),Oo=Rs({acosh_:function(t){const e=Ts(t,"x","acosh"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.acosh(e);return n([e]),r}),n,null,Pt)}}),Mo=Rs({addN_:function(t){j(Array.isArray(t),(()=>"The argument passed to tf.addN() must be a list of tensors")),j(t.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${t.length}`));const e=t.map(((t,e)=>Ts(t,`tensors${e}`,"addN"))),n=e[0];e.forEach((t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),e.forEach((t=>{if(!Z(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=e;return ws.runKernelFunc(((t,n)=>{const r=t.addN(e);return n(e),r}),r,null,Vt)}});function Lo(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function zo(t,e,n){const r=t.length+e.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(t[a++]):s.push(e[i++]);return s}function Bo(t,e){const n=[],r=t.length;for(let s=0;s<r;s++)-1===e.indexOf(s)&&n.push(t[s]);return[n,e.map((e=>t[e]))]}function Po(t,e){return zo(t,e.map((t=>1)),e)}function Wo(t,e,n){j(Lo(e,n),(()=>`${t} supports only inner-most axes for now. Got axes ${e} and rank-${n} input.`))}function Vo(t,e){if(Lo(t,e))return null;const n=[];for(let r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach((t=>n.push(t))),n}function Uo(t){return t.map(((t,e)=>[e,t])).sort(((t,e)=>t[1]-e[1])).map((t=>t[0]))}function Go(t,e){const n=[];for(let r=e-t;r<e;++r)n.push(r);return n}const Ho=Rs({all_:function(t,e=null,n=!1){let r=Ts(t,"x","all","bool");const s={x:r},a={axis:e,keepDims:n};return ws.runKernelFunc((t=>{const s=it(e,r.shape);let a=s;const i=Vo(a,r.rank);null!=i&&(r=Ya(r,i),a=Go(a.length,r.rank));const o=t.all(r,a);if(n){const t=Po(o.shape,s);return qa(o,t)}return o}),s,null,Ut,a)}}),jo=Rs({any_:function(t,e=null,n=!1){let r=Ts(t,"x","any","bool");const s={x:r},a={axis:e,keepDims:n};return ws.runKernelFunc((t=>{const s=it(e,r.shape);let a=s;const i=Vo(a,r.rank);null!=i&&(r=Ya(r,i),a=Go(a.length,r.rank));const o=t.any(r,a);if(n){const t=Po(o.shape,s);return qa(o,t)}return o}),s,null,Gt,a)}}),qo=Rs({argMax_:function(t,e=0){let n=Ts(t,"x","argMax");const r={x:n},s={axis:e};return ws.runKernelFunc(((t,r)=>{r([n]);let s=it(e,n.shape);const a=Vo(s,n.rank);return null!=a&&(n=Ya(n,a),s=Go(s.length,n.rank)),t.argMax(n,s[0])}),r,null,Ht,s)}}),Ko=Rs({argMin_:function(t,e=0){let n=Ts(t,"x","argMin");const r={x:n},s={axis:e};return ws.runKernelFunc(((t,r)=>{r([n]),null==e&&(e=0);let s=it(e,n.shape);const a=Vo(s,n.rank);return null!=a&&(n=Ya(n,a),s=Go(s.length,n.rank)),t.argMin(n,s[0])}),r,null,jt,s)}}),Xo=Rs({asin_:function(t){const e=Ts(t,"x","asin"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.asin(e);return n([e]),r}),n,null,qt)}}),Yo=Rs({asinh_:function(t){const e=Ts(t,"x","asinh"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.asinh(e);return n([e]),r}),n,null,Kt)}}),Jo=Rs({atan_:function(t){const e=Ts(t,"x","atan"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.atan(e);return n([e]),r}),n,null,Xt)}}),Zo=Rs({atan2_:function(t,e){let n=Ts(t,"a","atan2"),r=Ts(e,"b","atan2");[n,r]=ps(n,r);const s={a:n,b:r};return ws.runKernelFunc(((t,e)=>{const s=t.atan2(n,r);return e([n,r]),s}),s,null,Jt)}}),Qo=Rs({atanh_:function(t){const e=Ts(t,"x","atanh"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.atanh(e);return n([e]),r}),n,null,Yt)}});function tu(t,e,n,r,s="NHWC",a){return ru(t,[...e,t[3]],n,a,r,null,null,pu(s))}function eu(t,e,n,r,s,a,i="channelsLast"){const[o,u]=iu(e);let l;if("channelsLast"===i)l=[o,u,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);l=[o,u,t[1],t[1]]}return ru(t,l,n,r,s,a,!1,i)}function nu(t,e,n,r,s,a,i="NDHWC"){const[o,u,l]=ou(e);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,u,l,t[4],t[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,u,l,t[1],t[1]]}return su(t,c,n,r,s,!1,h,a)}function ru(t,e,n,r,s,a,i=!1,o="channelsLast"){let[u,l,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,h]=t;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,h,l,c]=t}const[p,d,,f]=e,[m,g]=iu(n),[y,b]=iu(r),x=uu(p,y),w=uu(d,b),{padInfo:v,outHeight:k,outWidth:N}=function(t,e,n,r,s,a,i,o,u){let l,c,h;if("number"==typeof t){l={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,r,s){null==r&&(r=au(t,e,n));const a=t[1],i=lu((t[0]-e+2*r)/n+1,s);j(Q(i),(()=>`The output # of rows (${i}) must be an integer. Change the stride and/or zero pad parameters`));const o=lu((a-e+2*r)/n+1,s);return j(Q(o),(()=>`The output # of columns (${o}) must be an integer. Change the stride and/or zero pad parameters`)),[i,o]}([e,n],a,r,t,o);c=s[0],h=s[1]}else if("same"===t){c=Math.ceil(e/r),h=Math.ceil(n/s);const t=Math.max(0,(c-1)*r+a-e),o=Math.max(0,(h-1)*s+i-n),u=Math.floor(t/2),p=t-u,d=Math.floor(o/2);l={top:u,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===t)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof t)throw Error(`Unknown padding parameter: ${t}`);{const p="channelsLast"===u?t[1][0]:t[2][0],d="channelsLast"===u?t[1][1]:t[2][1],f="channelsLast"===u?t[2][0]:t[3][0],m="channelsLast"===u?t[2][1]:t[3][1];l={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=lu((e-a+p+d)/r+1,o),h=lu((n-i+f+m)/s+1,o)}}return{padInfo:l,outHeight:c,outWidth:h}}(s,l,c,m,g,x,w,a,o),I=i?f*h:f;let $;return"channelsFirst"===o?$=[u,I,k,N]:"channelsLast"===o&&($=[u,k,N,I]),{batchSize:u,dataFormat:o,inHeight:l,inWidth:c,inChannels:h,outHeight:k,outWidth:N,outChannels:I,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:t,outShape:$,filterShape:e}}function su(t,e,n,r,s,a=!1,i="channelsLast",o){let[u,l,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,h,p]=t;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,p,l,c,h]=t}const[d,f,m,,g]=e,[y,b,x]=ou(n),[w,v,k]=ou(r),N=uu(d,w),I=uu(f,v),$=uu(m,k),{padInfo:S,outDepth:C,outHeight:T,outWidth:E}=function(t,e,n,r,s,a,i,o,u,l,c){let h,p,d,f;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const a=function(t,e,n,r,s,a){null==s&&(s=au(t,e,r));const i=t[1],o=t[2],u=lu((t[0]-e+2*s)/r+1,a);j(Q(u),(()=>`The output # of depths (${u}) must be an integer. Change the stride and/or zero pad parameters`));const l=lu((i-e+2*s)/r+1,a);j(Q(l),(()=>`The output # of rows (${l}) must be an integer. Change the stride and/or zero pad parameters`));const c=lu((o-e+2*s)/r+1,a);return j(Q(c),(()=>`The output # of columns (${c}) must be an integer. Change the stride and/or zero pad parameters`)),[u,l,c,1]}([e,n,r,1],o,0,s,t,c);p=a[0],d=a[1],f=a[2]}else if("same"===t){p=Math.ceil(e/s),d=Math.ceil(n/a),f=Math.ceil(r/i);const t=(p-1)*s+o-e,c=(d-1)*a+u-n,m=(f-1)*i+l-r,g=Math.floor(t/2),y=t-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==t)throw Error(`Unknown padding parameter: ${t}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((e-o+1)/s),d=Math.ceil((n-u+1)/a),f=Math.ceil((r-l+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(s,l,c,h,y,b,x,N,I,$,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[u,A,C,T,E]:"channelsLast"===i&&(R=[u,C,T,E,A]),{batchSize:u,dataFormat:i,inDepth:l,inHeight:c,inWidth:h,inChannels:p,outDepth:C,outHeight:T,outWidth:E,outChannels:A,padInfo:S,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:I,effectiveFilterWidth:$,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:t,outShape:R,filterShape:e}}function au(t,e,n,r=1){const s=uu(e,r);return Math.floor((t[0]*(n-1)-n+s)/2)}function iu(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function ou(t){return"number"==typeof t?[t,t,t]:t}function uu(t,e){return e<=1?t:t+(t-1)*(e-1)}function lu(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error(`Unknown roundingMode ${e}`)}}function cu(t){const[e,n,r]=iu(t);return 1===e&&1===n&&1===r}function hu(t,e){return cu(t)||cu(e)}function pu(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error(`Unknown dataFormat ${t}`)}const du=Rs({avgPool_:function(t,e,n,r,s){const a=Ts(t,"x","avgPool","float32");j(hu(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=qa(a,[1,a.shape[0],a.shape[1],a.shape[2]])),j(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),null!=s&&j(Q(r),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const u={x:i},l={filterSize:e,strides:n,pad:r,dimRoundingMode:s};let c=ws.runKernelFunc(((t,a)=>{const o=eu(i.shape,e,n,1,r,s);return a([i]),1===o.filterWidth&&1===o.filterHeight&&Z(o.inShape,o.outShape)?i.clone():t.avgPool(i,o)}),u,null,Zt,l);return c=Ca(c,a.dtype),o?qa(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),fu=Rs({avgPool3d_:function(t,e,n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:zi("dilations is deprecated, this field will be gone in v3.0.0.");const o=Ts(t,"x","avgPool3d","float32");let u=o,l=!1;4===o.rank&&(l=!0,u=qa(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),j(5===u.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${u.rank}.`)),j("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),j(hu(n,i),(()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=s&&j(Q(r),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const c={x:u},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i};let p=ws.runKernelFunc(((t,o)=>{null==i&&(i=[1,1,1]);const l=nu(u.shape,e,n,i,r,s,a);return o([u]),t.avgPool3d(u,l)}),c,null,te,h);return p=Ca(p,u.dtype),l?qa(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});function mu(t,e){const n=t[0].length;t.forEach(((t,e)=>{j(t.length===n,(()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`))})),j(e>=0&&e<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=t[0];t.forEach(((t,s)=>{for(let a=0;a<n;a++)j(a===e||t[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function gu(t,e){const n=t[0].slice();for(let r=1;r<t.length;r++)n[e]+=t[r][e];return n}const yu=Rs({concat_:function(t,e=0){j(t.length>=1,(()=>"Pass at least one tensor to concat"));let n=Es(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach((t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)}));const r=n,s={axis:e};return ws.runKernelFunc(((t,r)=>{const s=it(e,n[0].shape)[0],a=gu(n.map((t=>t.shape)),s);if(0===Y(a))return _s([],a);if(n=n.filter((t=>t.size>0)),1===n.length)return n[0];mu(n.map((t=>t.shape)),s);const i=t.concat(n,s);return r(n),i}),r,null,le,s)}}),bu=Rs({sigmoid_:function(t){const e=Ts(t,"x","sigmoid"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.sigmoid(e);return n([r]),r}),n,null,tr)}}),xu=Rs({slice_:function(t,e,n){const r=Ts(t,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:e,size:n};return ws.runKernelFunc(((t,s)=>{const[a,i]=wi(r,e,n);return ii(r,a,i),s([r]),t.slice(r,a,i)}),s,null,Yn,a)}}),wu=Rs({tanh_:function(t){const e=Ts(t,"x","tanh"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.tanh(e);return n([r]),r}),n,null,dr)}}),vu=Rs({basicLSTMCell_:function(t,e,n,r,s,a){const i=Ts(t,"forgetBias","basicLSTMCell"),o=Ts(e,"lstmKernel","basicLSTMCell"),u=Ts(n,"lstmBias","basicLSTMCell"),l=Ts(r,"data","basicLSTMCell"),c=Ts(s,"c","basicLSTMCell"),h=Ts(a,"h","basicLSTMCell"),p=yu([l,h],1),d=Ka(p,o),f=no(d,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=xu(f,[0,0],y),x=xu(f,[0,g],y),w=xu(f,[0,2*g],y),v=xu(f,[0,3*g],y),k=no(ao(bu(b),wu(x)),ao(c,bu(no(i,w))));return[k,ao(wu(k),bu(v))]}}),ku=Rs({batchToSpaceND_:function(t,e,n){const r=Ts(t,"x","batchToSpaceND"),s=e.reduce(((t,e)=>t*e));j(r.rank>=1+e.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`)),j(n.length===e.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`)),j(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`));const a={x:r},i={blockShape:e,crops:n};return ws.runKernelFunc((t=>t.batchToSpaceND(r,e,n)),a,null,re,i)}});function Nu(t){return null==t?null:0===t.rank?qa(t,[t.size]):1===t.rank?t:2===t.rank?qa(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?qa(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t}const Iu=Rs({batchNorm_:function(t,e,n,r,s,a){null==a&&(a=.001);const i=Ts(t,"x","batchNorm"),o=Ts(e,"mean","batchNorm"),u=Ts(n,"variance","batchNorm");let l,c;null!=s&&(l=Ts(s,"scale","batchNorm")),null!=r&&(c=Ts(r,"offset","batchNorm")),j(o.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),j(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),j(null==l||o.rank===l.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h=function(t){let e;return e=0===t.rank||1===t.rank?qa(t,[1,1,1,t.size]):2===t.rank?qa(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?qa(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(i),p={x:h,scale:l,offset:c,mean:o,variance:u},d={varianceEpsilon:a},f=ws.runKernelFunc(((t,e)=>(e([h,o,u,l]),t.batchNorm(h,Nu(o),Nu(u),Nu(c),Nu(l),a))),p,null,Pe,d);return qa(f,i.shape)}}),$u=Rs({batchNorm2d_:function(t,e,n,r,s,a){const i=Ts(t,"x","batchNorm"),o=Ts(e,"mean","batchNorm"),u=Ts(n,"variance","batchNorm");let l,c;return null!=s&&(l=Ts(s,"scale","batchNorm")),null!=r&&(c=Ts(r,"offset","batchNorm")),j(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),j(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),j(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&j(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&j(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),Iu(i,o,u,c,l,a)}}),Su=Rs({batchNorm3d_:function(t,e,n,r,s,a){const i=Ts(t,"x","batchNorm"),o=Ts(e,"mean","batchNorm"),u=Ts(n,"variance","batchNorm");let l,c;return null!=s&&(l=Ts(s,"scale","batchNorm")),null!=r&&(c=Ts(r,"offset","batchNorm")),j(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),j(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),j(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&j(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&j(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),Iu(i,o,u,c,l,a)}}),Cu=Rs({batchNorm4d_:function(t,e,n,r,s,a){const i=Ts(t,"x","batchNorm"),o=Ts(e,"mean","batchNorm"),u=Ts(n,"variance","batchNorm");let l,c;return null!=s&&(l=Ts(s,"scale","batchNorm")),null!=r&&(c=Ts(r,"offset","batchNorm")),j(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),j(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),j(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&j(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&j(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),Iu(i,o,u,c,l,a)}}),Tu=Rs({broadcastTo_:function(t,e){let n=Ts(t,"broadcastTo","x");const r=n.shape;if(e.some((t=>!(t>0)||t%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=qa(n,t)}const s=n.shape,a=Array.from(e);for(let t=e.length-1;t>=0;t--)if(s[t]===e[t])a[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(0===a.map(((t,e)=>t>1?e:-1)).filter((t=>t>=0)).length)return Ta(n);const i={x:n},o={shape:e,inputShape:s};return ws.runKernelFunc((t=>t.tile(n,a)),i,null,se,o)}}),Eu=Rs({ceil_:function(t){const e=Ts(t,"x","ceil"),n={x:e};return ws.runKernelFunc((t=>t.ceil(e)),n,null,ie)}}),Au=Rs({clipByValue_:function(t,e,n){const r=Ts(t,"x","clipByValue");j(e<=n,(()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`));const s={x:r},a={clipValueMin:e,clipValueMax:n};return ws.runKernelFunc(((t,s)=>{const a=t.clip(r,e,n);return s([r]),a}),s,null,oe,a)}}),Ru=Rs({concat1d_:function(t){return yu(t,0)}}),Du=Rs({concat2d_:function(t,e){return yu(t,e)}}),Fu=Rs({concat3d_:function(t,e){return yu(t,e)}}),_u=Rs({concat4d_:function(t,e){return yu(t,e)}}),Ou=Rs({conv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Ts(t,"x","conv2d"),u=Ts(e,"filter","conv2d");let l=o,c=!1;3===o.rank&&(c=!0,l=qa(o,[1,o.shape[0],o.shape[1],o.shape[2]])),j(4===l.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`)),j(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),null!=i&&j(Q(r),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const h="NHWC"===s?l.shape[3]:l.shape[1];j(h===u.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${u.shape[2]}.`)),j(hu(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const p={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},f=ws.runKernelFunc(((t,e)=>{const o=pu(s),c=ru(l.shape,u.shape,n,a,r,i,!1,o),h=t.conv2d(l,u,c);return e([l,u]),h}),p,null,ce,d);return c?qa(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Mu=Rs({conv1d_:function(t,e,n,r,s="NWC",a=1,i){const o=Ts(t,"x","conv1d"),u=Ts(e,"filter","conv1d");let l=o,c=!1;2===o.rank&&(c=!0,l=qa(o,[1,o.shape[0],o.shape[1]])),j(3===l.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`)),j(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),null!=i&&j(Q(r),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`)),j(l.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),j(hu(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),j("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const h=qa(u,[1,u.shape[0],u.shape[1],u.shape[2]]),p=qa(l,[l.shape[0],1,l.shape[1],l.shape[2]]),d=Ou(p,h,[1,n],r,"NHWC",[1,a],i);return qa(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),Lu=Rs({conv2DBackpropInput_:function(t,e,n,r,s,a="NHWC",i){j(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let o=t,u=e,l=!1;3===e.rank&&(l=!0,u=qa(e,[1,e.shape[0],e.shape[1],e.shape[2]]),o=[1,t[0],t[1],t[2]]),j(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),j(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),j(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?u.shape[3]:u.shape[1];j(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),j(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),null!=i&&j(Q(s),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const p={dy:u,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o},f=ws.runKernelFunc(((t,e)=>{const l=pu(a),c=ru(o,n.shape,r,1,s,i,!1,l),h=t.conv2dDerInput(u,n,c);return e([u,n]),h}),p,null,pe,d);return l?qa(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),zu=Rs({conv2dTranspose_:function(t,e,n,r,s,a){const i=Ts(t,"x","conv2dTranspose"),o=Ts(e,"filter","conv2dTranspose");return Lu(n,i,o,r,s,"NHWC",a)}}),Bu=Rs({conv3d_:function(t,e,n,r,s="NDHWC",a=[1,1,1]){const i=Ts(t,"x","conv3d"),o=Ts(e,"filter","conv3d");let u=i,l=!1;4===i.rank&&(l=!0,u=qa(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),j(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),j(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),j(u.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),j(hu(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),j("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:u,filter:o},h={strides:n,pad:r,dataFormat:s,dilations:a},p=ws.runKernelFunc(((t,e)=>{const s=su(u.shape,o.shape,n,a,r),i=t.conv3d(u,o,s);return e([u,o]),i}),c,null,de,h);return l?qa(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Pu=Rs({conv3DBackpropInput_:function(t,e,n,r,s){j(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let a=t,i=e,o=!1;4===e.rank&&(o=!0,i=qa(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),a=[1,t[0],t[1],t[2],t[3]]);const u=a[4],l=i.shape[4];j(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),j(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),j(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),j(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),j(l===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:s,strides:r,inputShape:a},p=ws.runKernelFunc((t=>{const e=su(a,n.shape,r,1,s);return t.conv3dDerInput(i,n,e)}),c,null,me,h);return o?qa(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Wu=Rs({conv3dTranspose_:function(t,e,n,r,s){const a=Ts(t,"x","conv3dTranspose"),i=Ts(e,"filter","conv3dTranspose");return Pu(n,a,i,r,s)}}),Vu=Rs({cos_:function(t){const e=Ts(t,"x","cos"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.cos(e);return n([e]),r}),n,null,ge)}}),Uu=Rs({cosh_:function(t){const e=Ts(t,"x","cosh"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.cosh(e);return n([e]),r}),n,null,ye)}}),Gu=Rs({cumsum_:function(t,e=0,n=!1,r=!1){const s=Ts(t,"x","cumsum"),a={x:s},i={axis:e,exclusive:n,reverse:r};return ws.runKernelFunc(((t,a)=>{const i=Vo([e],s.rank);let o=s;null!=i&&(o=Ya(s,i));const u=Go(1,s.rank)[0];let l=t.cumsum(o,u,n,r);if(a([s]),null!=i){const t=Uo(i);l=Ya(l,t)}return l}),a,null,be,i)}}),Hu=Rs({depthToSpace_:function(t,e,n="NHWC"){const r=Ts(t,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];j(s*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${e}  for depthToSpace with input shape\n    ${r.shape}`)),j(a*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${e} for depthToSpace with input shape\n        ${r.shape}`)),j(i%(e*e)==0,(()=>`Dimension size must be evenly divisible by ${e*e} but is ${i} for depthToSpace with input shape ${r.shape}`));const o={x:r},u={blockSize:e,dataFormat:n};return ws.runKernelFunc((t=>t.depthToSpace(r,e,n)),o,null,we,u)}}),ju=Rs({depthwiseConv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=Ts(t,"x","depthwiseConv2d"),u=Ts(e,"filter","depthwiseConv2d");let l=o,c=!1;3===o.rank&&(c=!0,l=qa(o,[1,o.shape[0],o.shape[1],o.shape[2]])),j(4===l.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`)),j(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`)),j(l.shape[3]===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),null!=i&&j(Q(r),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const h={x:l,filter:u},p={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},d=ws.runKernelFunc(((t,e)=>{null==a&&(a=[1,1]),j(hu(n,a),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const s=ru(l.shape,u.shape,n,a,r,i,!0),o=t.depthwiseConv2D(l,u,s);return e([l,u]),o}),h,null,ve,p);return c?qa(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),qu=Rs({diag_:function(t){const e=Ts(t,"x","diag"),n={x:e};return ws.runKernelFunc((n=>{const r=qa(e,[e.size]),s=n.diag(r),a=[...t.shape,...t.shape];return qa(s,a)}),n,null,Ie)}}),Ku=Rs({dilation2d_:function(t,e,n,r,s=[1,1],a="NHWC"){const i=Ts(t,"x","dilation2d"),o=Ts(e,"filter","dilation2d");j(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),j(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),j("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=i,l=!1;3===i.rank&&(u=qa(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=!0);const c={x:u,filter:o},h={strides:n,pad:r,dilations:s},p=ws.runKernel($e,c,h);return l?qa(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Xu=Rs({equal_:function(t,e){let n=Ts(t,"a","equal"),r=Ts(e,"b","equal");[n,r]=ps(n,r),To(n.shape,r.shape);const s={a:n,b:r};return ws.runKernelFunc((t=>t.equal(n,r)),s,null,De)}}),Yu=Rs({where_:function(t,e,n){const r=Ts(e,"a","where"),s=Ts(n,"b","where"),a=Ts(t,"condition","where","bool"),i=To(r.shape,s.shape),o=Tu(r,i),u=Tu(s,i);1===a.rank&&j(a.shape[0]===r.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==a.rank&&q(a.shape,u.shape,"Error in where: ");const l={condition:a,t:o,e:u};return ws.runKernelFunc(((t,e)=>{const n=t.select(a,o,u);return e([a]),n}),l,null,Kn)}}),Ju=Rs({divNoNan_:function(t,e){let n=Ts(t,"a","div"),r=Ts(e,"b","div");[n,r]=ps(n,r);const s=so(n,r),a=uo(s),i=Xu(r,a);return Yu(i,a,s)}}),Zu=Rs({dot_:function(t,e){const n=Ts(t,"t1","dot"),r=Ts(e,"t2","dot");j(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(j(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const t=qa(n,[1,-1]),e=qa(r,[-1,1]),s=Ka(t,e);return qa(s,[])}if(1===n.rank&&2===r.rank){const t=qa(n,[1,-1]),e=qa(r,[r.shape[0],r.shape[1]]),s=Ka(t,e);return qa(s,[s.size])}if(2===n.rank&&1===r.rank){const t=qa(r,[-1,1]),e=Ka(n,t);return qa(e,[e.size])}{const t=qa(r,[r.shape[0],r.shape[1]]);return Ka(n,t)}}}),Qu=Rs({elu_:function(t){const e=Ts(t,"x","elu"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.elu(e);return n([r]),r}),n,null,Ee)}}),tl=Rs({erf_:function(t){let e=Ts(t,"x","erf");j("int32"===e.dtype||"float32"===e.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===e.dtype&&(e=Ca(e,"float32"));const n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.erf(e);return n([e]),r}),n,null,Re)}}),el=Rs({exp_:function(t){const e=Ts(t,"x","exp"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.exp(e);return n([r]),r}),n,null,Fe)}}),nl=Rs({expandDims_:function(t,e=0){const n=Ts(t,"x","expandDims",null);j(e<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r=n.shape.slice();return e<0&&(j(-(n.rank+1)<=e,(()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`)),e=n.rank+e+1),r.splice(e,0,1),qa(n,r)}}),rl=Rs({expm1_:function(t){const e=Ts(t,"x","expm1"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.expm1(e);return n([e]),r}),n,null,_e)}}),sl=Rs({tile_:function(t,e){const n=Ts(t,"x","tile",null);j(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`));const r=[n],s={x:n},a={reps:e};return ws.runKernelFunc(((t,r)=>{const s=t.tile(n,e);return r([n]),s}),s,null,fr,a,r)}}),al=Rs({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const s=Sa([t,e],r),a=t<=e?t:e;for(let t=0;t<a;++t)s.set(1,t,t);const i=qa(s.toTensor(),[t,e]);if(null==n)return i;if(1===n.length)return sl(nl(i,0),[n[0],1,1]);if(2===n.length)return sl(nl(nl(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return sl(nl(nl(nl(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),il=Rs({floor_:function(t){const e=Ts(t,"x","floor"),n={x:e};return ws.runKernelFunc((t=>t.floor(e)),n,null,ze)}}),ol=30;function ul(t){return t<=ol?t:vt(t,Math.floor(Math.sqrt(t)))}function ll(t,e){let n,r=!1;for(t<=ol?(n=t,r=!0):n=vt(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=vt(t,n+1);return n}function cl(t,e,n){const r=[],s=t.length;for(let a=0;a<s;a++)a!==e?r.push(t[a]):r.push(n);return r}function hl(t,e,n){const r=t.shape[n],s=[];let a=1,i=1;for(let e=0;e<n;e++)s.push(t.shape[e]),a*=t.shape[e];for(let t=0;t<e.rank;t++)s.push(e.shape[t]);for(let e=n+1;e<t.rank;e++)s.push(t.shape[e]),i*=t.shape[e];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:s}}const pl=Rs({gather_:function(t,e,n=0){const r=Ts(t,"x","gather"),s=Ts(e,"indices","gather","int32"),a={x:r,indices:s},i={axis:n};return ws.runKernelFunc(((t,e)=>{const a=it(n,r.shape)[0],i=hl(r,s,a),o=t.gather(r,qa(s,[s.size]),a);return e([r,s]),qa(o,i.outputShape)}),a,null,We,i)}}),dl=Rs({greater_:function(t,e){let n=Ts(t,"a","greater"),r=Ts(e,"b","greater");[n,r]=ps(n,r),To(n.shape,r.shape);const s={a:n,b:r};return ws.runKernelFunc((t=>t.greater(n,r)),s,null,Ue)}}),fl=Rs({greaterEqual_:function(t,e){let n=Ts(t,"a","greaterEqual"),r=Ts(e,"b","greaterEqual");[n,r]=ps(n,r),To(n.shape,r.shape);const s={a:n,b:r};return ws.runKernelFunc(((t,e)=>{const s=t.greaterEqual(n,r);return e([n,r]),s}),s,null,Ge)}}),ml=Rs({imag_:function(t){const e=Ts(t,"input","imag"),n={input:e};return ws.runKernelFunc((t=>t.imag(e)),n,null,qe)}}),gl=Rs({isFinite_:function(t){const e=Ts(t,"x","isFinite"),n={x:e};return ws.runKernelFunc((t=>t.isFinite(e)),n,null,Ke)}}),yl=Rs({isInf_:function(t){const e=Ts(t,"x","isInf"),n={x:e};return ws.runKernelFunc((t=>t.isInf(e)),n,null,Xe)}}),bl=Rs({isNaN_:function(t){const e=Ts(t,"x","isNaN"),n={x:e};return ws.runKernelFunc((t=>t.isNaN(e)),n,null,Ye)}}),xl=Rs({leakyRelu_:function(t,e=.2){const n=Ts(t,"x","leakyRelu");return Eo(ao(yo(e),n),n)}}),wl=Rs({less_:function(t,e){let n=Ts(t,"a","less"),r=Ts(e,"b","less");[n,r]=ps(n,r),To(n.shape,r.shape);const s={a:n,b:r};return ws.runKernelFunc((t=>t.less(n,r)),s,null,Je)}}),vl=Rs({lessEqual_:function(t,e){let n=Ts(t,"a","lessEqual"),r=Ts(e,"b","lessEqual");[n,r]=ps(n,r),To(n.shape,r.shape);const s={a:n,b:r};return ws.runKernelFunc(((t,e)=>{const s=t.lessEqual(n,r);return e([n,r]),s}),s,null,Ze)}});function kl(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:t,stop:e,num:n};return ws.runKernelFunc((r=>r.linspace(t,e,n)),{},null,Qe,r)}const Nl=Rs({localResponseNormalization_:function(t,e=5,n=1,r=1,s=.5){const a=Ts(t,"x","localResponseNormalization");j(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),j(Q(e),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=qa(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:i},l={depthRadius:e,bias:n,alpha:r,beta:s},c=ws.runKernelFunc(((t,a)=>{const o=t.localResponseNormalization4D(i,e,n,r,s);return a([i,o]),o}),u,null,on,l);return o?qa(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Il=Rs({log_:function(t){const e=Ts(t,"x","log"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.log(e);return n([e]),r}),n,null,tn)}}),$l=Rs({log1p_:function(t){const e=Ts(t,"x","log1p"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.log1p(e);return n([e]),r}),n,null,en)}}),Sl=Rs({neg_:function(t){const e=Ts(t,"x","neg"),n={x:e};return ws.runKernelFunc((t=>t.neg(e)),n,null,kn)}}),Cl=Rs({softplus_:function(t){const e=Ts(t,"x","softplus"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.softplus(e);return n([e]),r}),n,null,er)}}),Tl=Rs({logSigmoid_:function(t){const e=Ts(t,"x","logSigmoid");return mo((t=>({value:Sl(Cl(Sl(t))),gradFunc:e=>ao(e,bu(Sl(t)))})))(e)}}),El=Rs({max_:function(t,e=null,n=!1){const r=Ts(t,"x","max"),s={x:r},a={reductionIndices:e,keepDims:n};return ws.runKernelFunc(((t,s)=>{let a=it(e,r.shape);const i=Vo(a,r.rank);let o=r;null!=i&&(o=Ya(r,i),a=Go(a.length,o.rank));const u=t.max(o,a);null!=i&&o.dispose();let l=u;if(n){const t=Po(l.shape,it(e,r.shape));l=qa(l,t),u.dispose()}return s([r,l]),l}),s,null,ln,a)}}),Al=Rs({sum_:function(t,e=null,n=!1){let r=Ts(t,"x","sum");"bool"===r.dtype&&(r=Ca(r,"int32"));const s={x:r},a={axis:e,keepDims:n};return ws.runKernelFunc(((t,s)=>{s([r]);const a=it(e,r.shape),i=Vo(a,r.rank);let o=a,u=r;null!=i&&(u=Ya(r,i),o=Go(o.length,r.rank));let l=t.sum(u,o);if(n){const t=Po(l.shape,a);l=qa(l,t)}return l}),s,null,rr,a)}}),Rl=Rs({logSoftmax_:function(t,e=-1){const n=Ts(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);const r={logits:n},s={axis:e};return ws.runKernelFunc(((n,r)=>{const s=El(t,e,!0),a=No(t,s),i=No(Ca(a,"float32"),Il(Al(el(a),e,!0)));return r([i]),i}),r,null,an,s)}}),Dl=Rs({logSumExp_:function(t,e=null,n=!1){const r=Ts(t,"x","logSumExp"),s=it(e,r.shape),a=El(r,s,!0),i=No(r,a),o=el(i),u=Al(o,s),l=Il(u),c=no(qa(a,l.shape),l);if(n){const t=Po(c.shape,s);return qa(c,t)}return c}}),Fl=Rs({logicalAnd_:function(t,e){const n=Ts(t,"a","logicalAnd","bool"),r=Ts(e,"b","logicalAnd","bool");To(n.shape,r.shape);const s={a:n,b:r};return ws.runKernelFunc((t=>t.logicalAnd(n,r)),s,null,nn)}}),_l=Rs({logicalNot_:function(t){const e=Ts(t,"x","logicalNot","bool"),n={x:e};return ws.runKernelFunc((t=>t.logicalNot(e)),n,null,rn)}}),Ol=Rs({logicalOr_:function(t,e){const n=Ts(t,"a","logicalOr","bool"),r=Ts(e,"b","logicalOr","bool");To(n.shape,r.shape);const s={a:n,b:r};return ws.runKernelFunc((t=>t.logicalOr(n,r)),s,null,sn)}}),Ml=Rs({logicalXor_:function(t,e){const n=Ts(t,"a","logicalXor","bool"),r=Ts(e,"b","logicalXor","bool");return To(n.shape,r.shape),Fl(Ol(t,e),_l(Fl(t,e)))}}),Ll=Rs({maxPool_:function(t,e,n,r,s){const a=Ts(t,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=qa(a,[1,a.shape[0],a.shape[1],a.shape[2]])),j(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),j(hu(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=s&&j(Q(r),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const u={x:i},l={filterSize:e,strides:n,pad:r,dimRoundingMode:s},c=ws.runKernelFunc(((t,a)=>{const o=eu(i.shape,e,n,1,r,s);let u;return u=1===o.filterWidth&&1===o.filterHeight&&Z(o.inShape,o.outShape)?i.clone():t.maxPool(i,o),a([i,u]),u}),u,null,hn,l);return o?qa(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),zl=Rs({maxPool3d_:function(t,e=[1,1,1],n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:zi("dilations is deprecated, this field will be gone in v3.0.0.");const o=Ts(t,"x","maxPool3d");let u=o,l=!1;4===o.rank&&(l=!0,u=qa(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),j(5===u.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${u.rank}.`)),j("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),j(hu(n,i),(()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=s&&j(Q(r),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const c={x:u},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i},p=ws.runKernelFunc(((t,o)=>{null==i&&(i=[1,1,1]);const l=nu(u.shape,e,n,i,r,s,a),c=t.maxPool3d(u,l);return o([u,c]),c}),c,null,dn,h);return l?qa(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Bl=Rs({maxPoolWithArgmax_:function(t,e,n,r,s=!1){const a={x:Ts(t,"x","maxPoolWithArgmax")},i={filterSize:e,strides:n,pad:r,includeBatchInIndex:s},o=ws.runKernel(mn,a,i);return{result:o[0],indexes:o[1]}}});function Pl(t,e="float32"){if("complex64"===e){const e=Pl(t,"float32"),n=Pl(t,"float32");return Ds(e,n)}const n=St(Y(t),e);return ws.makeTensor(n,t,e)}function Wl(t,e="float32"){if("complex64"===e){const e=Wl(t,"float32"),n=Pl(t,"float32");return Ds(e,n)}const n=$t(Y(t),e);return ws.makeTensor(n,t,e)}const Vl=Rs({mean_:function(t,e=null,n=!1){const r=Ts(t,"x","mean"),s=it(e,r.shape),a=Y(Bo(r.shape,s)[1]),i={x:r},o={axis:e,keepDims:n},u=()=>{const t=yo(a),s=t.dtype===r.dtype?r:Ca(r,t.dtype),i=so(s,t);return Al(i,e,n)};return mo((t=>({value:ws.runKernelFunc(u,i,null,gn,o),gradFunc:e=>{const n=t.shape.slice();s.forEach((t=>{n[t]=1}));const r=qa(e,n);return so(ao(r,Wl(t.shape,"float32")),a)}})))(r)}}),Ul=Rs({min_:function(t,e=null,n=!1){const r=Ts(t,"x","min"),s={x:r},a={axis:e,keepDims:n};return ws.runKernelFunc(((t,s)=>{const a=it(e,r.shape);let i=a;const o=Vo(i,r.rank);let u=r;null!=o&&(u=Ya(r,o),i=Go(i.length,r.rank));const l=t.min(u,i);null!=o&&u.dispose();let c=l;if(n){const t=Po(c.shape,a);c=qa(l,t),l.dispose()}return s([r,c]),c}),s,null,yn,a)}}),Gl=Rs({minimum_:function(t,e){let n=Ts(t,"a","minimum"),r=Ts(e,"b","minimum");[n,r]=ps(n,r),"bool"===n.dtype&&(n=Ca(n,"int32"),r=Ca(r,"int32")),To(n.shape,r.shape);const s={a:n,b:r};return ws.runKernelFunc(((t,e)=>{const s=t.minimum(n,r);return e([n,r]),s}),s,null,bn)}}),Hl=Rs({mirrorPad_:function(t,e,n){j("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=Ts(t,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");j(e.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${e.length}.`));const s="reflect"===n?1:0;for(let t=0;t<r.rank;t++)j(2===e[t].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),j(e[t][0]>=0&&e[t][0]<=r.shape[t]-s&&e[t][1]>=0&&e[t][1]<=r.shape[t]-s,(()=>`Padding in dimension ${t} cannot be greater than or equal to ${r.shape[t]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:e,mode:n},i={x:r};return ws.runKernel(xn,i,a)}}),jl=Rs({mod_:function(t,e){let n=Ts(t,"a","mod"),r=Ts(e,"b","mod");[n,r]=ps(n,r);const s={a:n,b:r};return ws.runKernelFunc(((t,e)=>{const s=t.mod(n,r);return e([n,r]),s}),s,null,wn)}}),ql=Rs({moments_:function(t,e=null,n=!1){const r=it(e,(t=Ts(t,"x","moments")).shape),s=Vl(t,r,n);let a=s.shape;n||(a=Po(s.shape,r));const i=oo(No(Ca(t,"float32"),qa(s,a)));return{mean:s,variance:Vl(i,r,n)}}}),Kl=Rs({multiRNNCell_:function(t,e,n,r){const s=Ts(e,"data","multiRNNCell"),a=Es(n,"c","multiRNNCell"),i=Es(r,"h","multiRNNCell");let o=s;const u=[];for(let e=0;e<t.length;e++){const n=t[e](o,a[e],i[e]);u.push(n[0]),u.push(n[1]),o=n[1]}const l=[],c=[];for(let t=0;t<u.length;t+=2)l.push(u[t]),c.push(u[t+1]);return[l,c]}}),Xl=Rs({multinomial_:function(t,e,n,r=!1){const s=Ts(t,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o=1===i?qa(s,[1,-1]):s,u=ws.runKernelFunc((t=>t.multinomial(o,r,e,n)),{logits2D:o});return 1===i?qa(u,[u.size]):u}}),Yl=Rs({notEqual_:function(t,e){let n=Ts(t,"a","notEqual"),r=Ts(e,"b","notEqual");[n,r]=ps(n,r),To(n.shape,r.shape);const s={a:n,b:r};return ws.runKernelFunc((t=>t.notEqual(n,r)),s,null,Nn)}}),Jl=Rs({real_:function(t){const e=Ts(t,"input","real"),n={input:e};return ws.runKernelFunc((t=>t.real(e)),n,null,On)}}),Zl=Rs({onesLike_:function(t){const e=Ts(t,"x","onesLike"),n={x:e};return ws.runKernelFunc(((t,n)=>{if("complex64"===e.dtype){const t=Zl(Jl(e)),n=uo(ml(e));return Ds(t,n)}return t.onesLike(e)}),n,null,Cn)}}),Ql=Rs({outerProduct_:function(t,e){const n=Ts(t,"v1","outerProduct"),r=Ts(e,"v2","outerProduct");j(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=qa(n,[-1,1]),a=qa(r,[1,-1]);return Ka(s,a)}}),tc=Rs({pad_:function(t,e,n=0){const r=Ts(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:n},a={x:r};return ws.runKernelFunc(((t,s)=>(s([r]),t.pad(r,e,n))),a,null,En,s)}}),ec=Rs({pad1d_:function(t,e,n=0){return j(2===e.length,(()=>"Invalid number of paddings. Must be length of 2.")),tc(t,[e],n)}}),nc=Rs({pad2d_:function(t,e,n=0){return j(2===e.length&&2===e[0].length&&2===e[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),tc(t,e,n)}}),rc=Rs({pad3d_:function(t,e,n=0){return j(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),tc(t,e,n)}}),sc=Rs({pad4d_:function(t,e,n=0){return j(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),tc(t,e,n)}}),ac=Rs({spaceToBatchND_:function(t,e,n){const r=Ts(t,"x","spaceToBatchND");j(r.rank>=1+e.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`)),j(n.length===e.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`)),j(r.shape.reduce(((t,r,s)=>s>0&&s<=e.length?t&&(r+n[s-1][0]+n[s-1][1])%e[s-1]==0:t),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`));const s={x:r},a={blockShape:e,paddings:n};return ws.runKernelFunc((t=>t.spaceToBatchND(r,e,n)),s,null,sr,a)}}),ic=Rs({pool_:function(t,e,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Ts(t,"x","maxPool");let o=i,u=!1;3===i.rank&&(u=!0,o=qa(i,[1,i.shape[0],i.shape[1],i.shape[2]])),j(hu(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const l=eu(o.shape,e,a,s,r),c=[l.dilationHeight,l.dilationWidth];let h;h="same"===r?function(t,e){const n=t.map(((t,n)=>t+(t-1)*(e[n]-1))).map((t=>t-1)),r=n.map((t=>Math.floor(t/2))),s=n.map(((t,e)=>t-r[e]));return n.map(((t,e)=>[r[e],s[e]]))}([l.filterHeight,l.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(t,e,n){const r=n.map((t=>t[0])),s=n.map((t=>t[1])),a=t.concat(r,s),i=e.map(((t,e)=>(t-a[e]%t)%t)),o=s.map(((t,e)=>t+i[e]));return[e.map(((t,e)=>[r[e],o[e]])),e.map(((t,e)=>[0,i[e]]))]}([l.inHeight,l.inWidth],c,h),m=p?r:"valid",g=p?o:ac(o,c,d),y=("avg"===n?()=>du(g,e,a,m):()=>Ll(g,e,a,m))(),b=p?y:ku(y,c,f);return u?qa(b,[b.shape[1],b.shape[2],b.shape[3]]):b}}),oc=Rs({prelu_:function(t,e){const n=Ts(t,"x","prelu"),r=Ts(e,"alpha","prelu"),s={x:n,alpha:r};return ws.runKernelFunc(((t,e)=>{const s=t.prelu(n,r);return e([n,r]),s}),s,null,Dn)}}),uc=Rs({prod_:function(t,e=null,n=!1){let r=Ts(t,"x","prod");"bool"===r.dtype&&(r=Ca(r,"int32"));const s={x:r},a={axis:e,keepDims:n};return ws.runKernelFunc((t=>{const s=it(e,r.shape),a=Vo(s,r.rank);let i=s,o=r;null!=a&&(o=Ya(r,a),i=Go(i.length,r.rank));let u=t.prod(o,i);if(n){const t=Po(u.shape,s);u=qa(u,t)}return u}),s,null,Fn,a)}}),lc=Rs({rand_:function(t,e,n){const r=Y(t);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let t=0;t<r;t++)s[t]=e();return ws.makeTensor(s,t,n)}});var cc=n(377);class hc{constructor(t,e,n,r,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=cc.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class pc{constructor(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;const s=r||Math.random();this.randu=cc.alea(s.toString()),this.randn=new hc(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,n=.5*t+this.d*(1-a+Math.log(a)),s=this.randu(),s<e||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class dc{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=cc.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const fc=Rs({randomGamma_:function(t,e,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new pc(e,n,r,s),i=Sa(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}}),mc=Rs({randomNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new hc(e,n,r,!1,s),i=Sa(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}}),gc=Rs({randomUniform_:function(t,e=0,n=1,r="float32",s){const a=Sa(t,r),i=new dc(e,n,null,s);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}});function yc(t,e){K(t);const n=$s(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Fs(t,null,n,e)}function bc(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:t,stop:e,step:n,dtype:r};return ws.runKernelFunc((()=>{if(t===e||t<e&&n<0||e<t&&n>1)return Pl([0],r);const s=St(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+n;return yc(s,r)}),{},null,_n,s)}const xc=Rs({reciprocal_:function(t){const e=Ts(t,"x","reciprocal"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.reciprocal(e);return n([e]),r}),n,null,Mn)}}),wc=Rs({relu_:function(t){const e=Ts(t,"x","relu"),n={x:e};return ws.runKernelFunc(((t,n)=>(n([e]),"bool"===e.dtype?Ca(e,"int32"):t.relu(e))),n,null,Ln)}}),vc=Rs({relu6_:function(t){const e=Ts(t,"x","relu6"),n={x:e};return ws.runKernelFunc(((t,n)=>(n([e]),"bool"===e.dtype?Ca(e,"int32"):t.relu6(e))),n,null,Un)}}),kc=Rs({reverse_:function(t,e){const n=Ts(t,"x","reverse"),r={x:n},s={dims:e};return ws.runKernelFunc((t=>{const r=it(e,n.shape);if(0===n.rank)return Ta(n);const s=t.reverse(n,r);return qa(s,n.shape)}),r,null,Gn,s)}}),Nc=Rs({reverse1d_:function(t){const e=Ts(t,"x","reverse");return j(1===e.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`)),kc(e,0)}}),Ic=Rs({reverse2d_:function(t,e){const n=Ts(t,"x","reverse");return j(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),kc(n,e)}}),$c=Rs({reverse3d_:function(t,e){const n=Ts(t,"x","reverse");return j(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),kc(n,e)}}),Sc=Rs({reverse4d_:function(t,e){const n=Ts(t,"x","reverse");return j(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),kc(n,e)}}),Cc=Rs({round_:function(t){const e=Ts(t,"x","round"),n={x:e};return ws.runKernelFunc((t=>t.round(e)),n,null,Hn)}}),Tc=Rs({rsqrt_:function(t){const e=Ts(t,"x","rsqrt"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.rsqrt(e);return n([e]),r}),n,null,jn)}}),Ec=Rs({selu_:function(t){const e=Ts(t,"x","selu"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.selu(e);return n([e]),r}),n,null,Xn)}}),Ac=Rs({separableConv2d_:function(t,e,n,r,s,a=[1,1],i="NHWC"){const o=Ts(t,"x","separableConv2d"),u=Ts(e,"depthwiseFilter","separableConv2d"),l=Ts(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=qa(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");j(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),j(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),j(4===l.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),j(1===l.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`)),j(1===l.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`));const p=u.shape[2],d=u.shape[3];j(l.shape[2]===p*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${l.shape[2]}.`));const f=ju(c,u,r,s,i,a),m=Ou(f,l,1,"valid",i);return h?qa(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),Rc=async function(t,e){const n=Ts(t,"x","setdiff1d"),r=Ts(e,"y","setdiff1d");j(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),j(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),j(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let t=0;t<s.length;t++)i.has(s[t])||o++;const u=new Zr([o],n.dtype),l=new Zr([o],"int32");for(let t=0,e=0;t<s.length;t++)i.has(s[t])||(u.values[e]=s[t],l.values[e]=t,e++);return[u.toTensor(),l.toTensor()]},Dc=Rs({sign_:function(t){const e=Ts(t,"x","sign"),n={x:e};return ws.runKernelFunc((t=>t.sign(e)),n,null,Qn)}}),Fc=Rs({sin_:function(t){const e=Ts(t,"x","sin"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.sin(e);return n([e]),r}),n,null,Jn)}}),_c=Rs({sinh_:function(t){const e=Ts(t,"x","sinh"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.sinh(e);return n([e]),r}),n,null,Zn)}}),Oc=Rs({slice1d_:function(t,e,n){const r=Ts(t,"x","slice1d");return j(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),xu(r,[e],[n])}}),Mc=Rs({slice2d_:function(t,e,n){const r=Ts(t,"x","slice2d");return j(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),xu(r,e,n)}}),Lc=Rs({slice3d_:function(t,e,n){const r=Ts(t,"x","slice3d");return j(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),xu(r,e,n)}}),zc=Rs({slice4d_:function(t,e,n){const r=Ts(t,"x","slice4d");return j(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),xu(r,e,n)}}),Bc=Rs({softmax_:function(t,e=-1){const n=Ts(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const r={logits:n},s={dim:e};return ws.runKernelFunc(((t,r)=>{const s=t.softmax(n,e);return r([s]),s}),r,null,ir,s)}}),Pc=Rs({fft_:function(t){j("complex64"===t.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`));const e={input:t};return ws.runKernelFunc((e=>{const n=t.shape[t.shape.length-1],r=t.size/n,s=t.as2D(r,n);return e.fft(s).reshape(t.shape)}),e,null,Oe)}}),Wc=Rs({ifft_:function(t){j("complex64"===t.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`));const e={input:t};return ws.runKernelFunc((e=>{const n=t.shape[t.shape.length-1],r=t.size/n,s=qa(t,[r,n]),a=e.ifft(s);return qa(a,t.shape)}),e,null,je)}}),Vc=Rs({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let r;if(e<=2){const s=qa(t,[n,e]);r=Wc(s)}else{const s=[n,2*(e-1)],a=qa(Jl(t),[n,e]),i=qa(ml(t),[n,e]),o=kc(xu(a,[0,1],[n,e-2]),1),u=ao(kc(xu(i,[0,1],[n,e-2]),1),yo(-1)),l=yu([a,o],1),c=yu([i,u],1),h=qa(Ds(l,c),[s[0],s[1]]);r=Wc(h)}if(r=Jl(r),3===t.rank&&0!==t.shape[0]){const e=r,n=t.shape[0];r=qa(r,[n,r.shape[0]/n,r.shape[1]]),e.dispose()}return r}});function Uc(t,e,n=0){let r=[];if("number"==typeof e)j(t.shape[n]%e==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(e).fill(t.shape[n]/e);else{j(e.reduce(((t,e)=>(-1===e&&(t+=1),t)),0)<=1,(()=>"There should be only one negative value in split array."));const s=e.indexOf(-1);if(-1!==s){const r=e.reduce(((t,e)=>e>0?t+e:t));e[s]=t.shape[n]-r}j(t.shape[n]===e.reduce(((t,e)=>t+e)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=e}return r}const Gc=Rs({split_:function(t,e,n=0){const r=Ts(t,"x","split"),s={x:r},a={numOrSizeSplits:e,axis:n};return ws.runKernelFunc(((t,s)=>{const a=it(n,r.shape)[0],i=Uc(r,e,a);return t.split(r,i,a)}),s,null,ar,a)}}),Hc=Rs({rfft_:function(t,e){j("float32"===t.dtype,(()=>`The dtype for rfft() must be real value but got ${t.dtype}`));let n=t.shape[t.shape.length-1];const r=t.size/n;let s;if(null!=e&&e<n){const r=t.shape.map((t=>0)),a=t.shape.map((t=>t));a[t.shape.length-1]=e,s=xu(t,r,a),n=e}else if(null!=e&&e>n){const r=t.shape.map((t=>t));r[t.shape.length-1]=e-n,s=yu([t,Pl(r)],t.shape.length-1),n=e}else s=t;const a=uo(s),i=qa(Ds(s,a),[r,n]),o=Pc(i),u=Math.floor(n/2)+1,l=Jl(o),c=ml(o),h=Gc(l,[u,n-u],l.shape.length-1),p=Gc(c,[u,n-u],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,qa(Ds(h[0],p[0]),d)}}),jc=Rs({squaredDifference_:function(t,e){let n=Ts(t,"a","squaredDifference"),r=Ts(e,"b","squaredDifference");[n,r]=ps(n,r),To(n.shape,r.shape);const s={a:n,b:r};return ws.runKernelFunc(((t,e)=>{const s=t.squaredDifference(n,r);return e([n,r]),s}),s,null,or,{})}}),qc=Rs({squeeze_:function(t,e){const n=Ts(t,"x","squeeze");return qa(n,ot(n.shape,e).newShape)}}),Kc=Rs({stack_:function(t,e=0){const n=Es(t,"tensors","stack");if(j(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),1===n.length)return nl(n[0],e);const r=n[0].rank,s=n[0].shape,a=n[0].dtype;j(e<=r,(()=>"Axis must be <= rank of the tensor")),n.forEach((t=>{q(s,t.shape,"All tensors passed to stack must have matching shapes"),j(a===t.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=n.map((t=>nl(t,e)));return yu(i,e)}}),Xc=Rs({step_:function(t,e=0){const n=Ts(t,"x","step"),r={x:n},s={alpha:e};return ws.runKernelFunc((t=>t.step(n,e)),r,null,vr,s)}}),Yc=Rs({stridedSlice_:function(t,e,n,r,s=0,a=0,i=0,o=0,u=0){let l=Ts(t,"x","stridedSlice");const c={x:l},h={begin:e,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u};return ws.runKernelFunc((t=>{null==r&&(r=new Array(e.length));const c=oi(i);if(c.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=l.rank-e.length,p=oi(o),d=l.shape.slice();p.forEach((t=>{e[t]=0,n[t]=1,d.splice(t,0,1)})),l=qa(l,d);const{begin:f,end:m,strides:g}=pi(l.shape,c,h,e,n,r,s,a,i);e=f,n=m,r=g;const y=oi(u);y.forEach((t=>{n[t]=e[t]+1,r[t]=1}));const b=ui(e,n,r),x=b.filter(((t,e)=>-1===y.indexOf(e)));if(r.every((t=>1===t)))return qa(xu(l,e,b),x);const w=t.stridedSlice(l,e,n,r);return qa(w,x)}),c,null,hr,h)}}),Jc=Rs({tan_:function(t){const e=Ts(t,"x","tan"),n={x:e};return ws.runKernelFunc(((t,n)=>{const r=t.tan(e);return n([e]),r}),n,null,pr)}});function Zc(t,e,n){if(K(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=$s(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Fs(t,e,r,n)}function Qc(t,e,n){if(K(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const r=$s(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Fs(t,e,r,n)}function th(t,e,n){if(K(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");const r=$s(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Fs(t,e,r,n)}function eh(t,e,n){if(K(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");const r=$s(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Fs(t,e=e||r,r,n)}const nh=Rs({topk_:function(t,e=1,n=!0){const r=Ts(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${e}`);const a={x:r},i={k:e,sorted:n},[o,u]=ws.runKernelFunc((t=>t.topk(r,e,n)),a,null,mr,i);return{values:o,indices:u}}}),rh=Rs({truncatedNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new hc(e,n,r,!0,s),i=Sa(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}}),sh=Rs({unique_:function(t,e=0){const n=Ts(t,"x","unique",null);j(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:e},[a,i]=ws.runKernel(yr,r,s);return{values:a,indices:i}}}),ah=Rs({unsortedSegmentSum_:function(t,e,n){const r=Ts(t,"x","unsortedSegmentSum"),s=Ts(e,"segmentIds","unsortedSegmentSum","int32");j(Q(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},i={numSegments:n};return ws.runKernelFunc(((t,e)=>{const a=t.unsortedSegmentSum(r,s,n);return e([s]),a}),a,null,xr,i)}}),ih=Rs({unstack_:function(t,e=0){const n=Ts(t,"x","unstack");j(e>=-n.shape.length&&e<n.shape.length,(()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`)),e<0&&(e+=n.shape.length);const r={value:n},s={axis:e};return ws.runKernelFunc((t=>t.unstack(n,e)),r,null,br,s)}});function oh(t,e=!0,n,r){return ws.makeVariable(t,e,n,r)}function uh(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const r=Sa(t,"int32"),s=Sa([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const a=r.indexToLoc(n[e]),i=e*t.length;s.values.set(a,i)}return s.toTensor()}const lh=async function(t){const e=Ts(t,"condition","whereAsync","bool"),n=await e.data(),r=uh(e.shape,n);return t!==e&&e.dispose(),r},ch=async function(t,e,n){const r=Ts(t,"tensor","boolMask"),s=Ts(e,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,o=r.shape;j(i>0,(()=>"mask cannot be scalar")),q(o.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let t=a;t<a+i;t++)u*=o[t];const l=o.slice(0,a).concat([u],o.slice(a+i)),c=qa(r,l),h=qa(s,[-1]),p=await lh(h),d=qc(p,[1]),f=pl(c,d,a);return t!==r&&r.dispose(),e!==s&&s.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f},hh=Rs({equalStrict_:function(t,e){zi("strict variants of ops have been deprecated and will be removed in future");const n=Ts(t,"a","equalStrict"),r=Ts(e,"b","equalStrict");return q(n.shape,r.shape,"Error in equalStrict: "),Xu(n,r)}}),ph=Rs({greaterEqualStrict_:function(t,e){zi("strict variants of ops have been deprecated and will be removed in future");const n=Ts(t,"a","greaterEqualStrict"),r=Ts(e,"b","greaterEqualStrict");return q(n.shape,r.shape,"Error in greaterEqualStrict: "),fl(n,r)}}),dh=Rs({greaterStrict_:function(t,e){zi("strict variants of ops have been deprecated and will be removed in future");const n=Ts(t,"a","greaterStrict"),r=Ts(e,"b","greaterStrict");return q(n.shape,r.shape,"Error in greaterStrict: "),dl(n,r)}}),fh=Rs({lessEqualStrict_:function(t,e){zi("strict variants of ops have been deprecated and will be removed in future");const n=Ts(t,"a","lessEqualStrict"),r=Ts(e,"b","lessEqualStrict");return q(n.shape,r.shape,"Error in lessEqualStrict: "),vl(n,r)}}),mh=Rs({lessStrict_:function(t,e){zi("strict variants of ops have been deprecated and will be removed in future");const n=Ts(t,"a","lessStrict"),r=Ts(e,"b","lessStrict");return q(n.shape,r.shape,"Error in lessStrict: "),wl(n,r)}}),gh=Rs({notEqualStrict_:function(t,e){zi("strict variants of ops have been deprecated and will be removed in future");const n=Ts(t,"a","notEqualStrict"),r=Ts(e,"b","notEqualStrict");return q(n.shape,r.shape,"Error in notEqualStrict: "),Yl(n,r)}}),yh=Rs({addStrict_:function(t,e){zi("strict variants of ops have been deprecated and will be removed in future");const n=Ts(t,"a","addStrict"),r=Ts(e,"b","addStrict");return q(n.shape,r.shape,"Error in addStrict: "),no(n,r)}}),bh=Rs({divStrict_:function(t,e){zi("strict variants of ops have been deprecated and will be removed in future");const n=Ts(t,"a","div"),r=Ts(e,"b","div");return q(n.shape,r.shape,"Error in divideStrict: "),so(n,r)}}),xh=Rs({maximumStrict_:function(t,e){zi("strict variants of ops have been deprecated and will be removed in future");const n=Ts(t,"a","maximumStrict"),r=Ts(e,"b","maximumStrict");return q(n.shape,r.shape,"Error in maximumStrict: "),Eo(n,r)}}),wh=Rs({minimumStrict_:function(t,e){zi("strict variants of ops have been deprecated and will be removed in future");const n=Ts(t,"a","minimumStrict"),r=Ts(e,"b","minimumStrict");return q(n.shape,r.shape,"Error in minimumStrict: "),Gl(n,r)}}),vh=Rs({modStrict_:function(t,e){zi("strict variants of ops have been deprecated and will be removed in future");const n=Ts(t,"a","modStrict"),r=Ts(e,"b","modStrict");return q(n.shape,r.shape,"Error in modStrict: "),jl(n,r)}}),kh=Rs({mulStrict_:function(t,e){zi("strict variants of ops have been deprecated and will be removed in future");const n=Ts(t,"a","mul"),r=Ts(e,"b","mul");return q(n.shape,r.shape,"Error in multiplyStrict: "),ao(n,r)}}),Nh=Rs({powStrict_:function(t,e){return zi("strict variants of ops have been deprecated and will be removed in future"),q(t.shape,e.shape,"Error in powStrict: "),ko(t,e)}}),Ih=Rs({squaredDifferenceStrict_:function(t,e){zi("strict variants of ops have been deprecated and will be removed in future");const n=Ts(t,"a","squaredDifferenceStrict"),r=Ts(e,"b","squaredDifferenceStrict");return q(n.shape,r.shape,"Error in squaredDifferenceStrict: "),jc(n,r)}}),$h=Rs({subStrict_:function(t,e){zi("strict variants of ops have been deprecated and will be removed in future");const n=Ts(t,"a","subStrict"),r=Ts(e,"b","subStrict");return q(n.shape,r.shape,"Error in subStrict: "),No(n,r)}});function Sh(t,e,n=null){if(0===t.rank)return $o(t);if(1!==t.rank&&null===n)return Sh(qa(t,[-1]),e,n);if(1===t.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===e)return Al($o(t),n);if(e===1/0)return El($o(t),n);if(e===-1/0)return Ul($o(t),n);if("euclidean"===e||2===e)return io(Al(ko($o(t),yo(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${e}`)}if(Array.isArray(n)&&2===n.length){if(1===e)return El(Al($o(t),n[0]),n[1]-1);if(e===1/0)return El(Al($o(t),n[1]),n[0]);if(e===-1/0)return Ul(Al($o(t),n[1]),n[0]);if("fro"===e||"euclidean"===e)return io(Al(oo(t),n));throw new Error(`Error in norm: invalid ord value: ${e}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Ch=Rs({norm_:function(t,e="euclidean",n=null,r=!1){const s=Sh(t=Ts(t,"x","norm"),e,n);let a=s.shape;if(r){const e=it(n,t.shape);a=Po(s.shape,e)}return qa(s,a)}}),Th=Rs({movingAverage_:function(t,e,n,r,s=!0){const a=Ts(t,"v","movingAverage"),i=Ts(e,"x","movingAverage"),o=Ts(n,"decay","movingAverage");ds(a,i),j(Z(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const u=yo(1),l=No(u,o);let c=ao(No(i,a),l);if(s){j(null!=r,(()=>"When using zeroDebias: true, step is required."));const t=Ts(r,"step","movingAverage");c=so(c,No(u,ko(o,t)))}return no(a,c)}}),Eh=Rs({scatterND_:function(t,e,n){const r=Ts(t,"indices","scatterND","int32"),s=Ts(e,"updates","scatterND");si(s,r,n);const a={indices:r,updates:s},i={shape:n};return ws.runKernelFunc((t=>t.scatterND(r,s,n)),a,null,qn,i)}}),Ah=Rs({sparseToDense_:function(t,e,n,r=0){const s=Ts(t,"sparseIndices","sparseToDense","int32"),a=Ts(e,"sparseValues","sparseToDense"),i=Ts(r,"defaultValue","sparseToDense",a.dtype);!function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const s=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=e.size;if(0!==e.rank&&(1!==e.rank||i!==s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i);const o={sparseIndices:s,sparseValues:a,defaultValue:i},u={outputShape:n};return ws.runKernelFunc((t=>t.sparseToDense(s,a,n,i)),o,null,cr,u)}}),Rh=Rs({gatherND_:function(t,e){const n=Ts(e,"indices","gatherND","int32"),r=Ts(t,"x","gatherND"),s={params:r,indices:n};return ws.runKernelFunc((t=>t.gatherND(r,n)),s,null,Ve)}}),Dh=Rs({dropout_:function(t,e,n,r){const s=Ts(t,"x","dropout");if(j("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),j(e>=0&&e<1,(()=>`rate must be a float in the range [0, 1), but got ${e}.`)),0===e)return t instanceof ns?s.clone():s;const a=function(t,e){if(null==e)return t.shape.slice();if(Z(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(s,n),i=1-e,o=so(il(no(gc(a,0,1,"float32",r),i)),i);return ao(s,o)}});function Fh(t){return Math.floor(Math.pow(2,Math.ceil(Math.log(t)/Math.log(2))))}function _h(t,e,n){const r=1-t%2,s=new Float32Array(t);for(let a=0;a<t;++a){const i=2*Math.PI*a/(t+r-1);s[a]=e-n*Math.cos(i)}return yc(s,"float32")}const Oh=async function(t,e,n=1){const r=Ts(t,"predictions","inTopK"),s=Ts(e,"targets","inTopK");j(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),j(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),q(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];j(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await r.data(),o=await s.data(),[u,l]=[i.length/a,a],c=ut("bool",u);for(let t=0;t<u;t++){const e=t*l,r=i.subarray(e,e+l),s=[];for(let t=0;t<r.length;t++)s.push({value:r[t],index:t});s.sort(((t,e)=>e.value-t.value)),c[t]=0;for(let e=0;e<n;e++)if(s[e].index===o[t]){c[t]=1;break}}return t!==r&&r.dispose(),e!==s&&s.dispose(),_s(c,s.shape,"bool")},Mh=Rs({conv2DBackpropFilter_:function(t,e,n,r,s,a="NHWC",i){let o=t;3===t.rank&&(o=qa(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u=e;3===u.rank&&(u=qa(e,[1,e.shape[0],e.shape[1],e.shape[2]])),j(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),j(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),j(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const l="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];j(l===n[2],(()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`)),j(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),null!=i&&j(Q(s),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const h={x:o,dy:u},p={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,filterShape:n};return ws.runKernelFunc((t=>{const e=pu(a),l=ru(o.shape,n,r,1,s,i,!1,e);return t.conv2dDerFilter(o,u,l)}),h,null,he,p)}});function Lh(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return ao(t,Xc(e));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function zh(t,e){let n=e;const r=Co(t.shape,e.shape);return r.length>0&&(n=Al(n,r)),qa(n,t.shape)}function Bh(t,e,n){if("linear"===e)return t;if("relu"===e)return wc(t);if("elu"===e)return Qu(t);if("relu6"===e)return vc(t);if("prelu"===e)return oc(t,n);throw new Error(`Unknown fused activation ${e}.`)}const Ph=(t,e)=>!(t>0)||"linear"===e,Wh=Rs({fusedConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l}){if(u=u||"linear",!1===Ph(ws.state.gradientDepth,u)){let c=Ou(t,e,n,r,s,a,i);return null!=o&&(c=no(c,o)),Bh(c,u,l)}const c=Ts(t,"x","conv2d"),h=Ts(e,"filter","conv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=qa(c,[1,c.shape[0],c.shape[1],c.shape[2]])),j(4===p.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`)),j(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),null!=i&&j(Q(r),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`)),j(p.shape[3]===h.shape[2],(()=>`Error in conv2d: depth of input (${p.shape[3]}) must match input depth for filter ${h.shape[2]}.`)),j(hu(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),j("NHWC"===s,(()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`));const f=ru(p.shape,h.shape,n,a,r,i);let m,g;null!=o&&(m=Ts(o,"bias","fused conv2d"),[m]=ps(m,c),To(f.outShape,m.shape)),null!=l&&(g=Ts(l,"prelu weights","fused conv2d"));const y=(t,e)=>{const[s,i,o,l]=e,c=Lh(t,o,u);j(cu(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[Lu(i.shape,c,s,n,r),Mh(i,c,s.shape,n,r)];if(null!=l){const t=zh(l,c);h.push(t)}return h},b=t=>t.fusedConv2d({input:p,filter:h,convInfo:f,bias:m,activation:u,preluActivationWeights:g}),x={x:p,filter:h,bias:m,preluActivationWeights:g},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u};return null==o?mo(((t,e,n)=>{let r=ws.runKernelFunc(b,x,null,$r,w);return n([e,t,r]),d&&(r=qa(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}}))(p,h):mo(((t,e,n,r)=>{let s=ws.runKernelFunc(b,x,null,$r,w);return r([e,t,s,n]),d&&(s=qa(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}}))(p,h,m)}}),Vh=Rs({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,r,s,a=[1,1],i){let o=t;3===t.rank&&(o=qa(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u=e;3===u.rank&&(u=qa(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const l={x:o,dy:u},c={strides:r,pad:s,dimRoundingMode:i,dilations:a,filterShape:n};return ws.runKernelFunc((e=>{const l=ru(t.shape,n,r,a,s,i,!0);return e.depthwiseConv2DDerFilter(o,u,l)}),l,null,ke,c)}}),Uh=Rs({depthwiseConv2dNativeBackpropInput_:function(t,e,n,r,s,a=[1,1],i){let o=e,u=!1;3===e.rank&&(u=!0,o=qa(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const l={dy:o,filter:n},c={strides:r,pad:s,dimRoundingMode:i,dilations:a,inputShape:t},h=ws.runKernelFunc((e=>{const u=ru(t,n.shape,r,a,s,i,!0);return e.depthwiseConv2DDerInput(o,n,u)}),l,null,Ne,c);return u?qa(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Gh=Rs({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l}){if(!1===Ph(ws.state.gradientDepth,u)){let c=ju(t,e,n,r,s,a,i);return null!=o&&(c=no(c,o)),Bh(c,u,l)}const c=Ts(t,"x","depthwiseConv2d"),h=Ts(e,"filter","depthwiseConv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=qa(c,[1,c.shape[0],c.shape[1],c.shape[2]])),j(4===p.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`)),j(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),j(p.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),j(hu(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=i&&j(Q(r),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${r}.`));const f=ru(p.shape,h.shape,n,a,r,i,!0);let m,g;null!=o&&(m=Ts(o,"bias","fused conv2d"),[m]=ps(m,c),To(f.outShape,m.shape)),null!=l&&(g=Ts(l,"prelu weights","fused depthwiseConv2d"));const y=(t,e)=>{j(cu(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,o,l,c]=e,h=Lh(t,l,u),p=Uh(o.shape,h,s,n,r,a,i),d=Vh(o,h,s.shape,n,r,a,i);return null!=c?[p,d,zh(m,h)]:[p,d]},b=t=>t.fusedDepthwiseConv2D({input:p,filter:h,convInfo:f,bias:m,activation:u,preluActivationWeights:g}),x={x:p,filter:h,bias:m,preluActivationWeights:g},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u};return null==o?mo(((t,e,n)=>{let r=ws.runKernelFunc(b,x,null,Sr,w);return n([e,t,r]),d&&(r=qa(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}}))(p,h):mo(((t,e,n,r)=>{let s=ws.runKernelFunc(b,x,null,Sr,w);return r([e,t,s,n]),d&&(s=qa(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}}))(p,h,m)}}),Hh=Rs({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i}){if(!1===Ph(ws.state.gradientDepth,a)){let o=Ka(t,e,n,r);return null!=s&&(o=no(o,s)),Bh(o,a,i)}let o=Ts(t,"a","fused matMul"),u=Ts(e,"b","fused matMul");[o,u]=ps(o,u);const l=n?o.shape[o.rank-2]:o.shape[o.rank-1],c=r?u.shape[u.rank-1]:u.shape[u.rank-2],h=n?o.shape[o.rank-1]:o.shape[o.rank-2],p=r?u.shape[u.rank-2]:u.shape[u.rank-1],d=o.shape.slice(0,-2),f=u.shape.slice(0,-2),m=Y(d),g=Y(f);j(o.rank>=2&&u.rank>=2&&o.rank===u.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${u.rank}.`)),j(Z(d,f),(()=>`Error in fused matMul: outer dimensions (${d}) and (${f}) of Tensors with shapes ${o.shape} and ${u.shape} must match.`)),j(l===c,(()=>`Error in fused matMul: inner shapes (${l}) and (${c}) of Tensors with shapes ${o.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`));const y=o.shape.slice(0,-2).concat([h,p]),b=qa(o,n?[m,l,h]:[m,h,l]),x=qa(u,r?[g,p,c]:[g,c,p]);let w,v;null!=s&&(w=Ts(s,"bias","fused matMul"),[w]=ps(w,o),To(y,w.shape)),null!=i&&(v=Ts(i,"prelu weights","fused matMul"));const k=(t,e)=>{const[i,o,u,l]=e,c=Lh(qa(t,u.shape),u,a);let h,p;return n||r?!n&&r?(h=Ka(c,o,!1,!1),p=Ka(c,i,!0,!1)):n&&!r?(h=Ka(o,c,!1,!0),p=Ka(i,c,!1,!1)):(h=Ka(o,c,!0,!0),p=Ka(c,i,!0,!0)):(h=Ka(c,o,!1,!0),p=Ka(i,c,!0,!1)),null!=s?[h,p,zh(l,c)]:[h,p]},N=t=>t.fusedBatchMatMul({a:b,b:x,transposeA:n,transposeB:r,bias:w,activation:a,preluActivationWeights:v}),I={a:b,b:x,bias:w,preluActivationWeights:v},$={transposeA:n,transposeB:r,activation:a};return null==s?mo(((t,e,n)=>{const r=ws.runKernelFunc(N,I,null,Ir,$);return n([t,e,r]),{value:qa(r,y),gradFunc:k}}))(b,x):mo(((t,e,n,r)=>{const s=ws.runKernelFunc(N,I,null,Ir,$);return r([t,e,s,n]),{value:qa(s,y),gradFunc:k}}))(b,x,w)}}),jh=Rs({hammingWindow_:function(t){return _h(t,.54,.46)}}),qh=Rs({hannWindow_:function(t){return _h(t,.5,.5)}}),Kh=Rs({frame_:function(t,e,n,r=!1,s=0){let a=0;const i=[];for(;a+e<=t.size;)i.push(xu(t,a,e)),a+=n;if(r)for(;a<t.size;){const r=a+e-t.size,o=yu([xu(t,a,e-r),wo([r],s)]);i.push(o),a+=n}return 0===i.length?Zc([],[0,e]):qa(yu(i),[i.length,e])}}),Xh=Rs({stft_:function(t,e,n,r,s=qh){null==r&&(r=Fh(e));const a=Kh(t,e,n),i=ao(a,s(e)),o=[];for(let t=0;t<a.shape[0];t++)o.push(Hc(xu(i,[t,0],[1,e]),r));return yu(o)}}),Yh=Rs({cropAndResize_:function(t,e,n,r,s,a){const i=Ts(t,"image","cropAndResize"),o=Ts(e,"boxes","cropAndResize","float32"),u=Ts(n,"boxInd","cropAndResize","int32");s=s||"bilinear",a=a||0;const l=o.shape[0];j(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),j(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${o.shape}.`)),j(1===u.rank&&u.shape[0]===l,(()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${o.shape}.`)),j(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),j(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),j("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:i,boxes:o,boxInd:u},h={method:s,extrapolationValue:a,cropSize:r};return ws.runKernelFunc((t=>t.cropAndResize(i,o,u,r,s,a)),c,null,xe,h)}}),Jh=Rs({flipLeftRight_:function(t){const e=Ts(t,"image","flipLeftRight","float32");j(4===e.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`));const n={image:e};return ws.runKernel(Le,n,{})}}),Zh=Rs({rotateWithOffset_:function(t,e,n=0,r=.5){const s=Ts(t,"image","rotateWithOffset","float32");j(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},i={radians:e,fillValue:n,center:r};return ws.runKernel(Nr,a,i)}});function Qh(t,e,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=t.shape[0];return n=Math.min(n,i),j(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),j(2===t.rank,(()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`)),j(4===t.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${t.shape[1]}`)),j(1===e.rank,(()=>"scores must be a 1D tensor")),j(e.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${e.shape[0]}`)),j(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const tp=Rs({nonMaxSuppression_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Ts(t,"boxes","nonMaxSuppression"),i=Ts(e,"scores","nonMaxSuppression"),o=Qh(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u={maxOutputSize:n,iouThreshold:r,scoreThreshold:s};return ws.runKernelFunc((t=>t.nonMaxSuppression(a,i,n,r,s)),{boxes:a,scores:i},null,In,u)}});function ep(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,s=t.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(e,t[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(t,e,n||np)}(t,e,n),s=r<0?-(r+1):r;t.splice(s,0,e)}function np(t,e){return t>e?1:t<e?-1:0}function rp(t,e,n,r,s){return ip(t,e,n,r,s,0).selectedIndices}function sp(t,e,n,r,s,a){return ip(t,e,n,r,s,0,!1,a,!0)}function ap(t,e,n,r,s,a){return ip(t,e,n,r,s,a,!0)}function ip(t,e,n,r,s,a,i=!1,o=!1,u=!1){const l=[];for(let t=0;t<e.length;t++)e[t]>s&&l.push({score:e[t],boxIndex:t,suppressBeginIndex:0});l.sort(lp);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&l.length>0;){const e=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=e;if(n<s)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=op(t,a,h[n]);if(i>=r){o=!0;break}if(e.score=e.score*up(r,c,i),e.score<=s)break}e.suppressBeginIndex=h.length,o||(e.score===n?(h.push(a),p.push(e.score)):e.score>s&&ep(l,e,lp))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:yc(h,"int32")};return i&&(m.selectedScores=yc(p,"float32")),u&&(m.validOutputs=yo(d,"int32")),m}function op(t,e,n){const r=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),p=Math.max(s[1],s[3]),d=(o-a)*(u-i),f=(h-l)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(u,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function up(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function lp(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}const cp=Rs({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Ts(t,"boxes","nonMaxSuppression"),o=Ts(e,"scores","nonMaxSuppression"),u=Qh(i,o,n,r,s,a),l={boxes:i,scores:o},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},h=ws.runKernel(Sn,l,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),hp=Rs({nonMaxSuppressionPadded_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Ts(t,"boxes","nonMaxSuppression"),o=Ts(e,"scores","nonMaxSuppression"),u=Qh(i,o,n,r,s,null),l={boxes:i,scores:o},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},h=ws.runKernel($n,l,c);return{selectedIndices:h[0],validOutputs:h[1]}}}),pp=Rs({resizeBilinear_:function(t,e,n=!1){const r=Ts(t,"images","resizeBilinear");j(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),j(2===e.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${e}.`));let s=r,a=!1;3===r.rank&&(a=!0,s=qa(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[i,o]=e,u={images:s},l={alignCorners:n,size:e},c=ws.runKernelFunc(((t,e)=>(e([s]),t.resizeBilinear(s,i,o,n))),u,null,Wn,l);return a?qa(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),dp=Rs({resizeNearestNeighbor_:function(t,e,n=!1){const r=Ts(t,"images","resizeNearestNeighbor");j(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),j(2===e.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`)),j("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype"));let s=r,a=!1;3===r.rank&&(a=!0,s=qa(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[i,o]=e,u={images:s},l={alignCorners:n,size:e},c=ws.runKernelFunc(((t,e)=>(e([s]),t.resizeNearestNeighbor(s,i,o,n))),u,null,Bn,l);return a?qa(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),fp=Rs({bandPart_:function(t,e,n){j(e%1==0,(()=>`bandPart(): numLower must be an integer, got ${e}.`)),j(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=Ts(t,"a","bandPart");j(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,i]=r.shape.slice(-2);if(!(e<=a))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);e<0&&(e=a),n<0&&(n=i);const o=qa(bc(0,a,1,"int32"),[-1,1]),u=bc(0,i,1,"int32"),l=No(o,u),c=Fl(vl(l,yo(+e,"int32")),fl(l,yo(-n,"int32"))),h=Pl([a,i],r.dtype);return qa(Kc(ih(qa(r,[-1,a,i])).map((t=>Yu(c,t,h)))),s)}}),mp=Rs({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,j(null!=t&&t.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=t[0].shape[0];for(let e=1;e<t.length;++e)j(t[e].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`))}else e=!0,t=Gc(t,t.shape[0],0).map((t=>qc(t,[0])));j(t.length<=t[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`));const n=[],r=t;for(let e=0;e<t.length;++e)n.push(ws.tidy((()=>{let t=r[e];if(e>0)for(let r=0;r<e;++r){const e=ao(Al(ao(n[r],t)),n[r]);t=No(t,e)}return so(t,Ch(t,"euclidean"))})));return e?Kc(n,0):n}});function gp(t,e=!1){return ws.tidy((()=>{j(2===t.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`));const n=t.shape[0],r=t.shape[1];let s=al(n),a=Ta(t);const i=Zc([[1]],[1,1]);let o=Ta(i);const u=n>=r?r:n;for(let t=0;t<u;++t){const e=a,u=o,l=s;[o,a,s]=ws.tidy((()=>{const e=xu(a,[t,t],[n-t,1]),u=Ch(e),l=xu(a,[t,t],[1,1]),c=Yu(dl(l,0),Zc([[-1]]),Zc([[1]])),h=No(l,ao(c,u)),p=so(e,h);o=1===p.shape[0]?Ta(i):yu([i,xu(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Sl(so(Ka(c,h),u)),f=xu(a,[t,0],[n-t,r]),m=ao(d,o),g=Ya(o);if(0===t)a=No(f,Ka(m,Ka(g,f)));else{const e=No(f,Ka(m,Ka(g,f)));a=yu([xu(a,[0,0],[t,r]),e],0)}const y=Ya(m),b=xu(s,[0,t],[n,s.shape[1]-t]);if(0===t)s=No(b,Ka(Ka(b,o),y));else{const e=No(b,Ka(Ka(b,o),y));s=yu([xu(s,[0,0],[n,t]),e],1)}return[o,a,s]})),Gi([e,u,l])}return!e&&n>r&&(s=xu(s,[0,0],[n,r]),a=xu(a,[0,0],[r,r])),[s,a]}))}const yp=Rs({qr_:function(t,e=!1){if(j(t.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${t.rank}`)),2===t.rank)return gp(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce(((t,e)=>t*e)),r=ih(qa(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],a=[];return r.forEach((t=>{const[n,r]=gp(t,e);s.push(n),a.push(r)})),[qa(Kc(s,0),t.shape),qa(Kc(a,0),t.shape)]}}});var bp;!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(bp||(bp={}));const xp=Rs({computeWeightedLoss_:function(t,e,n=bp.SUM_BY_NONZERO_WEIGHTS){const r=Ts(t,"losses","computeWeightedLoss");let s=null;null!=e&&(s=Ts(e,"weights","computeWeightedLoss"));const a=null==s?r:ao(r,s);if(n===bp.NONE)return a;if(n===bp.SUM)return Al(a);if(n===bp.MEAN){if(null==s)return Vl(a);{const t=r.size/s.size,e=so(Al(a),Al(s));return t>1?so(e,yo(t)):e}}if(n===bp.SUM_BY_NONZERO_WEIGHTS){if(null==s)return so(Al(a),yo(r.size));{const t=ao(s,Wl(r.shape)),e=Ca(Al(Yl(t,yo(0))),"float32");return so(Al(a),e)}}throw Error(`Unknown reduction: ${n}`)}}),wp=Rs({absoluteDifference_:function(t,e,n,r=bp.SUM_BY_NONZERO_WEIGHTS){const s=Ts(t,"labels","absoluteDifference"),a=Ts(e,"predictions","absoluteDifference");let i=null;null!=n&&(i=Ts(n,"weights","absoluteDifference")),q(s.shape,a.shape,"Error in absoluteDifference: ");const o=$o(No(s,a));return xp(o,i,r)}}),vp=Rs({cosineDistance_:function(t,e,n,r,s=bp.SUM_BY_NONZERO_WEIGHTS){const a=Ts(t,"labels","cosineDistance"),i=Ts(e,"predictions","cosineDistance");let o=null;null!=r&&(o=Ts(r,"weights","cosineDistance")),q(a.shape,i.shape,"Error in cosineDistance: ");const u=yo(1),l=No(u,Al(ao(a,i),n,!0));return xp(l,o,s)}}),kp=Rs({hingeLoss_:function(t,e,n,r=bp.SUM_BY_NONZERO_WEIGHTS){let s=Ts(t,"labels","hingeLoss");const a=Ts(e,"predictions","hingeLoss");let i=null;null!=n&&(i=Ts(n,"weights","hingeLoss")),q(s.shape,a.shape,"Error in hingeLoss: ");const o=yo(1);s=No(ao(yo(2),s),o);const u=wc(No(o,ao(s,a)));return xp(u,i,r)}}),Np=Rs({huberLoss_:function(t,e,n,r=1,s=bp.SUM_BY_NONZERO_WEIGHTS){const a=Ts(t,"labels","huberLoss"),i=Ts(e,"predictions","huberLoss");let o=null;null!=n&&(o=Ts(n,"weights","huberLoss")),q(a.shape,i.shape,"Error in huberLoss: ");const u=yo(r),l=$o(No(i,a)),c=Gl(l,u),h=No(l,c),p=no(ao(yo(.5),oo(c)),ao(u,h));return xp(p,o,s)}}),Ip=Rs({logLoss_:function(t,e,n,r=1e-7,s=bp.SUM_BY_NONZERO_WEIGHTS){const a=Ts(t,"labels","logLoss"),i=Ts(e,"predictions","logLoss");let o=null;null!=n&&(o=Ts(n,"weights","logLoss")),q(a.shape,i.shape,"Error in logLoss: ");const u=yo(1),l=yo(r),c=Sl(ao(a,Il(no(i,l)))),h=ao(No(u,a),Il(no(No(u,i),l))),p=No(c,h);return xp(p,o,s)}}),$p=Rs({meanSquaredError_:function(t,e,n,r=bp.SUM_BY_NONZERO_WEIGHTS){const s=Ts(t,"labels","meanSquaredError"),a=Ts(e,"predictions","meanSquaredError");let i=null;null!=n&&(i=Ts(n,"weights","meanSquaredError")),q(s.shape,a.shape,"Error in meanSquaredError: ");const o=jc(s,a);return xp(o,i,r)}}),Sp=Rs({sigmoidCrossEntropy_:function(t,e,n,r=0,s=bp.SUM_BY_NONZERO_WEIGHTS){let a=Ts(t,"multiClassLabels","sigmoidCrossEntropy");const i=Ts(e,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Ts(n,"weights","sigmoidCrossEntropy")),q(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const t=yo(r),e=yo(1),n=yo(.5);a=no(ao(a,No(e,t)),ao(n,t))}const u=function(t,e){const n=Ts(t,"labels","sigmoidCrossEntropyWithLogits"),r=Ts(e,"logits","sigmoidCrossEntropyWithLogits");q(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=wc(r),a=ao(r,n),i=$l(el(Sl($o(r))));return no(No(s,a),i)}(a,i);return xp(u,o,s)}}),Cp=Rs({softmaxCrossEntropy_:function(t,e,n,r=0,s=bp.SUM_BY_NONZERO_WEIGHTS){let a=Ts(t,"onehotLabels","softmaxCrossEntropy");const i=Ts(e,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Ts(n,"weights","softmaxCrossEntropy")),q(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const t=yo(r),e=yo(1),n=yo(a.shape[1]);a=no(ao(a,No(e,t)),so(t,n))}const u=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${n}`);return mo(((t,e,r)=>{const s=Dl(e,[n],!0),a=No(Ca(e,"float32"),s);r([t,a]);const i=Sl(ao(a,t));return{value:Al(i,[n]),gradFunc:(t,e)=>{const[r,s]=e,a=Po(t.shape,[n]);return[ao(qa(t,a),No(Ca(r,"float32"),el(s))),ao(qa(t,a),No(el(s),Ca(r,"float32")))]}}}))(t,e)}(a,i);return xp(u,o,s)}}),Tp={fft:Pc,ifft:Wc,rfft:Hc,irfft:Vc},Ep={hammingWindow:jh,hannWindow:qh,frame:Kh,stft:Xh},Ap={flipLeftRight:Jh,resizeNearestNeighbor:dp,resizeBilinear:pp,rotateWithOffset:Zh,cropAndResize:Yh,nonMaxSuppression:tp,nonMaxSuppressionAsync:async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Ts(t,"boxes","nonMaxSuppressionAsync"),i=Ts(e,"scores","nonMaxSuppressionAsync"),o=Qh(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),l=rp(u[0],u[1],n,r,s);return a!==t&&a.dispose(),i!==e&&i.dispose(),l},nonMaxSuppressionWithScore:cp,nonMaxSuppressionWithScoreAsync:async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=Ts(t,"boxes","nonMaxSuppressionAsync"),o=Ts(e,"scores","nonMaxSuppressionAsync"),u=Qh(i,o,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([i.data(),o.data()]),c=ap(l[0],l[1],n,r,s,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),c},nonMaxSuppressionPadded:hp,nonMaxSuppressionPaddedAsync:async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=Ts(t,"boxes","nonMaxSuppressionAsync"),o=Ts(e,"scores","nonMaxSuppressionAsync"),u=Qh(i,o,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,h=u.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),f=sp(p,d,l,c,h,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),f}},Rp={bandPart:fp,gramSchmidt:mp,qr:yp},Dp={absoluteDifference:wp,computeWeightedLoss:xp,cosineDistance:vp,hingeLoss:kp,huberLoss:Np,logLoss:Ip,meanSquaredError:$p,sigmoidCrossEntropy:Sp,softmaxCrossEntropy:Cp};class Fp{static sgd(t){return new Ro(t)}static momentum(t,e,n=!1){return new Do(t,e,n)}static rmsprop(t,e=.9,n=0,r=null,s=!1){return new Fo(t,e,n,r,s)}static adam(t=.001,e=.9,n=.999,r=null){return new Io(t,e,n,r)}static adadelta(t=.001,e=.95,n=null){return new xo(t,e,n)}static adamax(t=.002,e=.9,n=.999,r=null,s=0){return new Ao(t,e,n,r,s)}static adagrad(t,e=.1){return new vo(t,e)}}const _p={sgd:Fp.sgd,momentum:Fp.momentum,adadelta:Fp.adadelta,adagrad:Fp.adagrad,rmsprop:Fp.rmsprop,adamax:Fp.adamax,adam:Fp.adam},Op="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:t=>t();function Mp(){return new Promise((t=>Op((()=>t()))))}function Lp(t,e,n){return[n*("number"==typeof t?t:t[0]),e*("number"==typeof t?t:t[1])]}function zp(t,e,n,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(t[0]/n),s=s.concat(t.slice(1));else{s=s.concat(t[0]);const n=e.length;for(let r=0;r<n;++r)s=s.concat([t[r+1]/e[r],e[r]]);s=s.concat(t.slice(n+1))}return s}function Bp(t,e,n=!0){const r=[];if(n){r.push(e);for(let n=e+1;n<t;++n)n<=2*e?(r.push(n),r.push(n-(e+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<t;++r)r>=2*e+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function Pp(t,e,n,r=!0){const s=[];r?s.push(t[0]/n):s.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?r?s.push(e[n-1]*t[n]):s.push(t[n]/e[n-1]):s.push(t[n]);return s}function Wp(t,e){const n=[0];for(let r=0;r<e;++r)n.push(t[r][0]);return n}function Vp(t,e,n){const r=t.slice(0,1);for(let s=0;s<n;++s)r.push(t[s+1]-e[s][0]-e[s][1]);return r}const Up=1.7580993408473768,Gp=1.0507009873554805,Hp=.3275911,jp=.254829592,qp=-.284496736,Kp=1.421413741,Xp=-1.453152027,Yp=1.061405429;function Jp(...t){Ft().getBool("IS_TEST")||console.warn(...t)}function Zp(...t){Ft().getBool("IS_TEST")||console.log(...t)}function Qp(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function td(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}function ed(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function nd(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function rd(t,e){return{real:t[2*e],imag:t[2*e+1]}}function sd(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function ad(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let s=0;s<Math.ceil(t/2);s++){const a=(e?2:-2)*Math.PI*(s/t);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function id(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function od(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=Pl(t.shape),r=Ca(t,"float32"),s=n.complex(r,e);return e.dispose(),r.dispose(),s}if(!pt(t.dtype,e))return ws.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){const r=n.real(t),s=Ca(r,e);return r.dispose(),s}if("int32"===e)return n.int(t);if("bool"===e){const e=yo(0,t.dtype),r=n.notEqual(t,e);return e.dispose(),r}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function ud(t,e){return ws.makeTensorFromDataId(t.dataId,e,t.dtype)}function ld(t,e,n){const r=(e-t)/(n-1),s=St(n,"float32");s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+r;return yc(s,"float32")}function cd(t,e,n){const r=new Array(t.rank).fill(0),s=t.shape.slice();return e.map((e=>{const a=[...s];a[n]=e;const i=xu(t,r,a);return r[n]+=e,i}))}function hd(t,e){const n=new Array(t.rank);for(let r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];const r=Sa(n,t.dtype);for(let e=0;e<r.values.length;++e){const n=r.indexToLoc(e),s=new Array(t.rank);for(let e=0;e<s.length;e++)s[e]=n[e]%t.shape[e];const a=t.locToIndex(s);r.values[e]=t.values[a]}return r.toTensor()}function pd(t,e,n,r,s){const a=e[e.length-1],[i,o]=[t.length/a,a],u=ut(n,i*r),l=ut("int32",i*r);for(let e=0;e<i;e++){const n=e*o,s=t.subarray(n,n+o),a=[];for(let t=0;t<s.length;t++)a.push({value:s[t],index:t});a.sort(((t,e)=>e.value-t.value));const i=e*r,c=u.subarray(i,i+r),h=l.subarray(i,i+r);for(let t=0;t<r;t++)c[t]=a[t].value,h[t]=a[t].index}const c=e.slice();return c[c.length-1]=r,[_s(u,c,n),_s(l,c,"int32")]}const dd={kernelName:zt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ao(t,Xc(Ca(n,"float32"),-1))}}},fd={kernelName:Bt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=oo(Ca(n,"float32")),r=io(No(yo(1),e));return Sl(so(t,r))}}}},md={kernelName:Pt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=io(No(oo(Ca(n,"float32")),1));return so(t,e)}}}},gd={kernelName:Wt,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n.shape,r.shape);return{a:()=>{let e=t;const r=Co(n.shape,s);return r.length>0&&(e=Al(e,r)),qa(e,n.shape)},b:()=>{let e=t;const n=Co(r.shape,s);return n.length>0&&(e=Al(e,n)),qa(e,r.shape)}}}},yd={kernelName:Vt,saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach(((e,r)=>{n[r]=()=>t.clone()})),n}},bd={kernelName:Ht,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>uo(n)}}},xd={kernelName:jt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>uo(n)}}},wd={kernelName:qt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,io(No(yo(1),oo(Ca(n,"float32")))))}}},vd={kernelName:Kt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=io(no(yo(1),oo(Ca(n,"float32"))));return so(t,e)}}}},kd={kernelName:Jt,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n.shape,r.shape);return{a:()=>{const e=no(oo(n),oo(r));let a=ao(t,so(r,e));const i=Co(n.shape,s);return i.length>0&&(a=Al(a,i)),qa(a,n.shape)},b:()=>{const e=no(oo(n),oo(r));let a=Sl(ao(t,so(n,e)));const i=Co(r.shape,s);return i.length>0&&(a=Al(a,i)),qa(a,r.shape)}}}},Nd={kernelName:Xt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,no(oo(Ca(n,"float32")),1))}}},Id={kernelName:Yt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,No(yo(1),oo(Ca(n,"float32"))))}}},$d=Rs({avgPool3dBackprop_:function(t,e,n,r,s=[1,1,1],a,i){const o=Ts(t,"dy","avgPool3dBackprop"),u=Ts(e,"input","avgPool3dBackprop");let l=o,c=u,h=!1;4===u.rank&&(h=!0,l=qa(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=qa(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),j(5===l.rank,(()=>`Error in avgPool3dBackprop: dy must be rank 5 but got rank ${l.rank}.`)),j(5===c.rank,(()=>`Error in avgPool3dBackprop: input must be rank 5 but got rank ${c.rank}.`)),j(hu(r,s),(()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`)),null!=i&&j(Q(a),(()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const p={dy:l,input:c},d={filterSize:n,strides:r,dilations:s,pad:a,dimRoundingMode:i},f=ws.runKernelFunc((t=>{const e=nu(c.shape,n,r,s,a,i);return t.avgPool3dBackprop(l,c,e)}),p,null,ee,d);return h?qa(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),Sd={kernelName:te,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,dilations:i,pad:o,dimRoundingMode:u}=n,l=null==i?[1,1,1]:i;return{x:()=>$d(t,r,s,a,l,o,u)}}},Cd=Rs({avgPoolBackprop_:function(t,e,n,r,s){const a=Ts(t,"dy","avgPoolBackprop"),i=Ts(e,"input","avgPoolBackprop");j(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,u=a,l=!1;3===i.rank&&(l=!0,o=qa(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=qa(a,[1,a.shape[0],a.shape[1],a.shape[2]])),j(4===u.rank,(()=>`Error in avgPoolBackprop: dy must be rank 4 but got rank ${u.rank}.`)),j(4===o.rank,(()=>`Error in avgPoolBackprop: input must be rank 4 but got rank ${o.rank}.`));const c={dy:u,input:o},h={filterSize:n,strides:r,pad:s},p=ws.runKernelFunc((t=>{const e=eu(o.shape,n,r,1,s);return t.avgPoolBackprop(u,o,e)}),c,null,Qt,h);return l?qa(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Td={kernelName:Zt,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,pad:i}=n;return{x:()=>Cd(t,r,s,a,i)}}},Ed={kernelName:ne,inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[r,s]=e,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>Ka(t,s,!1,!1),b:()=>Ka(t,r,!0,!1)}:a&&!i?{a:()=>Ka(s,t,!1,!0),b:()=>Ka(r,t,!1,!1)}:{a:()=>Ka(s,t,!0,!0),b:()=>Ka(t,r,!0,!0)}:{a:()=>Ka(t,s,!1,!0),b:()=>Ka(r,t,!0,!1)}}},Ad={kernelName:re,gradFunc:(t,e,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>ac(t,r,s)}}},Rd={kernelName:se,gradFunc:(t,e,n)=>{const r=n,s=r.inputShape,a=r.shape,i=Array.from(a);for(let t=s.length-1;t>=0;t--)if(s[t]===a[t])i[t]=1;else if(1!==s[t])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const o=[];for(let t=0;t<i.length;t++)i[t]>1&&o.push(t);return{x:()=>Al(t,o,!0)}}},Dd={kernelName:ae,gradFunc:t=>({x:()=>t.clone()})},Fd={kernelName:ie,gradFunc:t=>({x:()=>uo(t)})},_d={kernelName:oe,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>Yu(Fl(fl(r,s),vl(r,a)),t,uo(t))}}},Od={kernelName:le,saveAllInputs:!0,gradFunc:(t,e,n)=>{const r=e.map((t=>t.shape)),{axis:s}=n,a=it(s,e[0].shape)[0],i=r.map((t=>t[a]));return Gc(t,i,a).map((t=>()=>t))}},Md={kernelName:ce,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{dilations:a,strides:i,pad:o,dataFormat:u}=n;return j(cu(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>Lu(r.shape,t,s,i,o,u),filter:()=>Mh(r,t,s.shape,i,o,u)}}},Ld={kernelName:pe,inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{strides:a,pad:i,dataFormat:o,dimRoundingMode:u}=n;return{dy:()=>Ou(t,s,a,i,o,1,u),filter:()=>Mh(t,r,s.shape,a,i,o,u)}}},zd=Rs({conv3DBackpropFilter_:function(t,e,n,r,s){let a=t;4===t.rank&&(a=qa(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let i=e;4===i.rank&&(i=qa(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),j(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),j(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),j(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),j(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),j(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},u={strides:r,pad:s,filterShape:n};return ws.runKernelFunc((t=>{const e=su(a.shape,n,r,1,s);return t.conv3dDerFilter(a,i,e)}),o,null,fe,u)}}),Bd={kernelName:de,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a}=n;j(cu(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[i,o]=e;return{x:()=>Pu(i.shape,t,o,s,a),filter:()=>zd(i,t,o.shape,s,a)}}},Pd={kernelName:ge,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ao(Sl(Fc(Ca(n,"float32"))),t)}}},Wd={kernelName:ye,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ao(_c(Ca(n,"float32")),t)}}},Vd={kernelName:be,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const e=Vo([s],r.rank);let n=Gu(t,s,a,!i);return null!=e&&(n=Ya(n,e)),n}}}},Ud={kernelName:ve,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;j(cu(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[u,l]=e;return j(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),j(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`)),j(u.shape[3]===l.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),j(hu(s,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`)),null!=i&&j(Q(a),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`)),{x:()=>Uh(u.shape,t,l,s,a,r,i),filter:()=>Vh(u,t,l.shape,s,a,r,i)}}},Gd={kernelName:$e,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,a={x:r,filter:s,dy:t},i={x:r,filter:s,dy:t};return{x:()=>ws.runKernel(Se,a,n),filter:()=>ws.runKernel(Ce,i,n)}}},Hd={kernelName:Te,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n.shape,r.shape);return{a:()=>{const e=so(t,Ca(r,"float32")),a=Co(n.shape,s);return a.length>0?qa(Al(e,a),n.shape):e},b:()=>{let e=ao(t,Ca(n,"float32"));const a=Co(r.shape,s);a.length>0&&(e=qa(Al(e,a),r.shape));const i=oo(r);return Sl(so(e,Ca(i,"float32")))}}}},jd={kernelName:Ee,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,r=e=>e.eluDer(t,n),s={dy:t,y:n};return{x:()=>ws.runKernelFunc(r,s,null,Ae)}}},qd={kernelName:Re,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=ao(el(Sl(oo(n))),2/Math.sqrt(Math.PI));return{x:()=>ao(t,r)}}},Kd={kernelName:Fe,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ao(t,n)}}},Xd={kernelName:_e,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ao(t,el(n))}}},Yd={kernelName:ze,gradFunc:t=>({x:()=>uo(t)})},Jd={kernelName:Be,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n.shape,r.shape);return{a:()=>{const e=so(t,Ca(r,"float32")),a=Co(n.shape,s);return a.length>0?qa(Al(e,a),n.shape):e},b:()=>{let e=ao(t,Ca(n,"float32"));const a=Co(r.shape,s);a.length>0&&(e=qa(Al(e,a),r.shape));const i=oo(r);return Sl(so(e,Ca(i,"float32")))}}}},Zd={kernelName:Pe,inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=e,u=null==o?yo(1):o,l=Co(a.shape,s.shape),c=[];if(1===a.rank){for(let t=0;t<s.shape.length-1;++t)c.push(s.shape[t]);c.push(1)}const h=No(s,a),p=ao(t,u),d=Tc(no(i,yo(r))),f=ao(ao(ao(d,d),d),yo(-.5));return{x:()=>1===a.rank?qa(ao(ao(t,sl(qa(d,[1,1,1,a.shape[0]]),c)),u),s.shape):qa(ao(ao(t,d),u),s.shape),mean:()=>{let t=ao(ao(d,yo(-1)),p);return 1===a.rank&&(t=Al(t,l)),qa(t,a.shape)},variance:()=>{let t=ao(ao(f,h),p);return 1===a.rank&&(t=Al(t,l)),qa(t,a.shape)},scale:()=>{const e=ao(h,d);let n=ao(t,e);return 1===a.rank&&(n=Al(n,l)),qa(n,a.shape)},offset:()=>{let e=t;return 1===a.rank&&(e=Al(e,l)),qa(e,a.shape)}}}},Qd={kernelName:We,inputsToSave:["x","indices"],gradFunc:(t,e,n)=>{const[r,s]=e,{axis:a}=n,i=it(a,r.shape)[0];return{x:()=>{const e=r.shape,n=s.size,o=e.slice(0,i),u=o.length,l=e.slice(a,e.length).slice(1),c=l.length,h=tf(0,u),p=tf(u+1,u+1+c),d=ef([o,[n],l]),f=qa(t,d),m=qa(s,[n]),g=ef([[u],h,p]),y=Ya(f,g);let b=ah(y,m,r.shape[i]);const x=Uo(g);return b=Ya(b,x),b},indices:()=>s}}};function tf(t,e){const n=[];for(let r=t;r<e;++r)n.push(r);return n}function ef(t){const e=[];for(let n=0;n<t.length;++n)for(let r=0;r<t[n].length;++r)e.push(t[n][r]);return e}const nf={kernelName:Ge,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>uo(n),b:()=>uo(r)}}},rf={kernelName:He,gradFunc:t=>({x:()=>Ca(t,"float32")})},sf={kernelName:Ke,gradFunc:t=>({x:()=>uo(t)})},af={kernelName:Xe,gradFunc:t=>({x:()=>uo(t)})},of={kernelName:Ye,gradFunc:t=>({x:()=>uo(t)})},uf={kernelName:en,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,no(n,1))}}},lf={kernelName:tn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,Ca(n,"float32"))}}},cf={kernelName:an,inputsToSave:[],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{axis:s}=n;return{logits:()=>{const e=el(r);return No(t,ao(Al(t,s,!0),e))}}}},hf=Rs({localResponseNormalizationBackprop_:function(t,e,n,r=5,s=1,a=1,i=.5){const o={x:t,y:e,dy:n},u={depthRadius:r,bias:s,alpha:a,beta:i};return ws.runKernelFunc((o=>o.LRNGrad(n,t,e,r,s,a,i)),o,null,un,u)}}),pf={kernelName:on,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{depthRadius:a,bias:i,alpha:o,beta:u}=n;return{x:()=>hf(r,s,t,a,i,o,u)}}};function df(t,e,n,r){return e.rank<n.rank&&(e=qa(e,Po(e.shape,r))),t.rank<n.rank&&(t=qa(t,Po(t.shape,r))),{x:()=>ao(t,Ca(Xu(n,e),t.dtype))}}const ff={kernelName:ln,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{reductionIndices:s}=r,a=e[0],i=df(t,e[1],a,it(s,a.shape));return{x:()=>i.x()}}},mf={kernelName:cn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>ao(t,Ca(fl(n,r),"float32")),b:()=>ao(t,Ca(wl(n,r),"float32"))}}},gf=Rs({maxPool3dBackprop_:function(t,e,n,r,s,a=[1,1,1],i,o){const u=Ts(t,"dy","maxPool3dBackprop"),l=Ts(e,"input","maxPool3dBackprop"),c=Ts(n,"output","maxPool3dBackprop");let h=u,p=l,d=c,f=!1;4===l.rank&&(f=!0,h=qa(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),p=qa(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=qa(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),j(5===h.rank,(()=>`Error in maxPool3dBackprop: dy must be rank 5 but got rank ${h.rank}.`)),j(5===p.rank,(()=>`Error in maxPool3dBackprop: input must be rank 5 but got rank ${p.rank}.`)),j(5===d.rank,(()=>`Error in maxPool3dBackprop: output must be rank 5 but got rank ${d.rank}.`)),j(hu(s,a),(()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`)),null!=o&&j(Q(i),(()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`));const m={dy:h,input:p,output:d},g={filterSize:r,strides:s,dilations:a,pad:i,dimRoundingMode:o},y=ws.runKernelFunc((t=>{const e=nu(p.shape,r,s,a,i,o);return t.maxPool3dBackprop(h,p,d,e)}),m,null,fn,g);return f?qa(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),yf={kernelName:dn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,dilations:o,pad:u,dimRoundingMode:l}=n,c=null==o?[1,1,1]:o;return{x:()=>gf(t,r,s,a,i,c,u,l)}}},bf=Rs({maxPoolBackprop_:function(t,e,n,r,s,a,i){const o=Ts(t,"dy","maxPoolBackprop"),u=Ts(e,"input","maxPoolBackprop"),l=Ts(n,"output","maxPoolBackprop");j(u.rank===o.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${o.rank})`)),j(4===o.rank,(()=>`Error in maxPoolBackprop: dy must be rank 4 but got rank ${o.rank}.`)),j(4===u.rank,(()=>`Error in maxPoolBackprop: input must be rank 4 but got rank ${u.rank}.`)),null!=i&&j(Q(a),(()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const c={dy:o,input:u,output:l},h={filterSize:r,strides:s,pad:a,dimRoundingMode:i};return ws.runKernelFunc((t=>{const e=eu(u.shape,r,s,1,a,i);return t.maxPoolBackprop(o,u,l,e)}),c,null,pn,h)}}),xf={kernelName:En,inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,a=s.map((t=>t[0]));return{x:()=>xu(t,a,r.shape)}}},wf={kernelName:sr,gradFunc:(t,e,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>ku(t,r,s)}}},vf={kernelName:ar,gradFunc:(t,e,n)=>{const{axis:r}=n;return{x:()=>yu(t,r)}}},kf=[dd,fd,md,gd,yd,bd,xd,wd,vd,kd,Nd,Id,Sd,Td,Ed,Ad,Rd,Dd,Fd,_d,Od,Ld,Md,Bd,Pd,Wd,Vd,Ud,Gd,Hd,jd,qd,Kd,Xd,Jd,Yd,Zd,Qd,nf,rf,sf,af,of,uf,lf,cf,pf,ff,ff,mf,yf,{kernelName:hn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,pad:o}=n;return{x:()=>bf(t,r,s,a,i,o)}}},{kernelName:yn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{axis:s}=r,[a,i]=e,o=df(t,i,a,it(s,a.shape));return{x:()=>o.x()}}},{kernelName:bn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>ao(t,Ca(vl(n,r),"float32")),b:()=>ao(t,Ca(dl(n,r),"float32"))}}},{kernelName:xn,inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,a=s.map((t=>t[0]));return{x:()=>xu(t,a,r.shape)}}},{kernelName:wn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n.shape,r.shape);return{a:()=>{const e=Co(n.shape,s);return e.length>0?qa(Al(t,e),n.shape):t},b:()=>{const e=ao(t,Sl(il(so(n,r)))),a=Co(r.shape,s);return a.length>0?qa(Al(e,a),r.shape):e}}}},{kernelName:vn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n.shape,r.shape);return{a:()=>{const e=ao(t,Ca(r,"float32")),a=Co(n.shape,s);return a.length>0?qa(Al(e,a),n.shape):e},b:()=>{const e=ao(t,Ca(n,"float32")),a=Co(r.shape,s);return a.length>0?qa(Al(e,a),r.shape):e}}}},{kernelName:kn,gradFunc:t=>({x:()=>Sl(t)})},{kernelName:Tn,inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>Pl(n.shape,"float32")}}},{kernelName:Cn,gradFunc:t=>({x:()=>uo(t)})},xf,xf,{kernelName:Rn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,r,s]=e,a=n,i=r,o=To(a.shape,i.shape);return{a:()=>{const e=Ca(i,"float32");let n=ao(t,ao(e,ko(a,No(e,yo(1)))));const r=Co(a.shape,o);return r.length>0&&(n=Al(n,r)),qa(n,a.shape)},b:()=>{const e=dl(a,0),n=Yu(e,Il(a),uo(a));let r=ao(t,ao(s,n));const u=Co(i.shape,o);return u.length>0&&(r=Al(r,u)),qa(r,i.shape)}}}},{kernelName:Dn,inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,r]=e,s=dl(n,0);return{x:()=>Yu(s,t,ao(t,r)),alpha:()=>{let e=Yu(s,uo(t),ao(t,n));const a=Co(r.shape,t.shape);return a.length>0&&(e=Al(e,a)),qa(e,r.shape)}}}},{kernelName:Mn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,Sl(oo(n)))}}},{kernelName:Un,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=ao(vl(n,6),Xc(n));return{x:()=>ao(t,Ca(r,"float32"))}}},{kernelName:Ln,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ao(t,Ca(Xc(n),"float32"))}}},{kernelName:zn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>qa(t,n.shape)}}},{kernelName:Wn,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s=e=>{const{alignCorners:s}=n;return e.resizeBilinearBackprop(t,r,s)},a={images:r};return{images:()=>ws.runKernelFunc(s,a,null,Vn,n)}}},{kernelName:Bn,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s=e=>{const{alignCorners:s}=n;return e.resizeNearestNeighborBackprop(t,r,s)},a={images:r};return{images:()=>ws.runKernelFunc(s,a,null,Pn,n)}}},{kernelName:Gn,gradFunc:(t,e,n)=>{const{dims:r}=n,s=it(r,t.shape);return{x:()=>kc(t,s)}}},{kernelName:Hn,gradFunc:t=>({x:()=>uo(t)})},{kernelName:jn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Sl(so(t,ao(ko(n,1.5),2)))}}},{kernelName:Kn,inputsToSave:["condition"],gradFunc:(t,e)=>{const[n]=e;return{condition:()=>Ca(uo(n),"float32"),t:()=>ao(t,Ca(n,t.dtype)),e:()=>ao(t,Ca(_l(n),t.dtype))}}},{kernelName:Xn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=dl(n,yo(0)),r=yo(Up),s=yo(Gp),a=ao(t,s),i=ao(ao(t,r),el(Ca(n,"float32")));return Yu(e,a,i)}}}},{kernelName:tr,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ao(t,ao(n,No(yo(1),n)))}}},{kernelName:Qn,gradFunc:t=>({x:()=>uo(t)})},{kernelName:Jn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ao(Vu(Ca(n,"float32")),t)}}},{kernelName:Zn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ao(Uu(Ca(n,"float32")),t)}}},{kernelName:Yn,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{begin:s,size:a}=n,i=r.shape,[o,u]=wi(r,s,a),l=[];for(let e=0;e<t.rank;e++)l.push([o[e],i[e]-o[e]-u[e]]);return{x:()=>tc(t,l)}}},{kernelName:ir,outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{dim:s}=n,a=ao(t,r);return{logits:()=>No(a,ao(Al(a,[s],!0),r))}}},{kernelName:er,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ao(t,bu(n))}}},wf,wf,vf,vf,{kernelName:nr,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,ao(io(Ca(n,"float32")),2))}}},{kernelName:or,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=yo(2);return{a:()=>ao(t,ao(s,No(n,r))),b:()=>ao(t,ao(s,No(r,n)))}}},{kernelName:ur,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ao(t,ao(Ca(n,"float32"),2))}}},{kernelName:vr,gradFunc:t=>({x:()=>uo(t)})},{kernelName:lr,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n.shape,r.shape);return{a:()=>{let e=t;const r=Co(n.shape,s);return r.length>0&&(e=Al(e,r)),qa(e,n.shape)},b:()=>{let e=t;const n=Co(r.shape,s);return n.length>0&&(e=Al(e,n)),qa(Sl(e),r.shape)}}}},{kernelName:rr,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,s=r.shape.slice(),{axis:a}=n;it(a,r.shape).forEach((t=>{s[t]=1}));const i=qa(t,s),o=ao(i,Wl(r.shape,"float32"));return{x:()=>o}}},{kernelName:pr,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,oo(Vu(n)))}}},{kernelName:dr,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ao(No(yo(1),oo(n)),t)}}},{kernelName:fr,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{reps:s}=n;return{x:()=>{let e=uo(r);if(1===r.rank)for(let n=0;n<s[0];++n)e=no(e,xu(t,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)e=no(e,xu(t,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)e=no(e,xu(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)e=no(e,xu(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},{kernelName:gr,gradFunc:(t,e,n)=>{const r=n,{perm:s}=r,a=Uo(s);return{x:()=>Ya(t,a)}}},{kernelName:br,gradFunc:(t,e,n)=>{const r=n,{axis:s}=r;return{value:()=>Kc(t,s)}}},{kernelName:xr,inputsToSave:["segmentIds"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>function(t,e){const n=Eo(e,uo(e)),r=pl(t,n);let s=fl(e,yo(0,"int32"));const a=r.rank-s.rank;for(let t=0;t<a;++t)s=nl(s,t+1);s=Fl(s,Wl(r.shape,"bool"));const i=uo(r);return Yu(s,r,i)}(t,n)}}},{kernelName:wr,gradFunc:t=>({x:()=>uo(t)})}];for(const t of kf)Fr(t);let Nf;function If(){return null==Nf&&(Nf=to().epsilon()),Nf}ns.prototype.abs=function(){return this.throwIfDisposed(),$o(this)},ns.prototype.acos=function(){return this.throwIfDisposed(),_o(this)},ns.prototype.acosh=function(){return this.throwIfDisposed(),Oo(this)},ns.prototype.addStrict=function(t){return this.throwIfDisposed(),yh(this,t)},ns.prototype.add=function(t){return this.throwIfDisposed(),no(this,t)},ns.prototype.all=function(t,e){return this.throwIfDisposed(),Ho(this,t,e)},ns.prototype.any=function(t,e){return this.throwIfDisposed(),jo(this,t,e)},ns.prototype.argMax=function(t){return this.throwIfDisposed(),qo(this,t)},ns.prototype.argMin=function(t){return this.throwIfDisposed(),Ko(this,t)},ns.prototype.asScalar=function(){return this.throwIfDisposed(),j(1===this.size,(()=>"The array must have only 1 element.")),qa(this,[])},ns.prototype.asType=function(t){return this.throwIfDisposed(),Ca(this,t)},ns.prototype.as1D=function(){return this.throwIfDisposed(),qa(this,[this.size])},ns.prototype.as2D=function(t,e){return this.throwIfDisposed(),qa(this,[t,e])},ns.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),qa(this,[t,e,n])},ns.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),qa(this,[t,e,n,r])},ns.prototype.as5D=function(t,e,n,r,s){return this.throwIfDisposed(),qa(this,[t,e,n,r,s])},ns.prototype.asin=function(){return this.throwIfDisposed(),Xo(this)},ns.prototype.asinh=function(){return this.throwIfDisposed(),Yo(this)},ns.prototype.atan=function(){return this.throwIfDisposed(),Jo(this)},ns.prototype.atan2=function(t){return this.throwIfDisposed(),Zo(this,t)},ns.prototype.atanh=function(){return this.throwIfDisposed(),Qo(this)},ns.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),du(this,t,e,n,r)},ns.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),ku(this,t,e)},ns.prototype.batchNorm=function(t,e,n,r,s){return this.throwIfDisposed(),Iu(this,t,e,n,r,s)},ns.prototype.broadcastTo=function(t){return this.throwIfDisposed(),Tu(this,t)},ns.prototype.cast=function(t){return this.throwIfDisposed(),Ca(this,t)},ns.prototype.ceil=function(){return this.throwIfDisposed(),Eu(this)},ns.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),Au(this,t,e)},ns.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof ns&&(t=[t]),yu([this,...t],e)},ns.prototype.conv1d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Mu(this,t,e,n,r,s,a)},ns.prototype.conv2dTranspose=function(t,e,n,r,s){return this.throwIfDisposed(),zu(this,t,e,n,r,s)},ns.prototype.conv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Ou(this,t,e,n,r,s,a)},ns.prototype.cos=function(){return this.throwIfDisposed(),Vu(this)},ns.prototype.cosh=function(){return this.throwIfDisposed(),Uu(this)},ns.prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),Gu(this,t,e,n)},ns.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),Hu(this,t,e)},ns.prototype.depthwiseConv2D=function(t,e,n,r,s,a){return zi("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),ju(this,t,e,n,r,s,a)},ns.prototype.depthwiseConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),ju(this,t,e,n,r,s,a)},ns.prototype.dilation2d=function(t,e,n,r,s){return this.throwIfDisposed(),Ku(this,t,e,n,r,s)},ns.prototype.divNoNan=function(t){return this.throwIfDisposed(),Ju(this,t)},ns.prototype.divStrict=function(t){return this.throwIfDisposed(),bh(this,t)},ns.prototype.div=function(t){return this.throwIfDisposed(),so(this,t)},ns.prototype.dot=function(t){return this.throwIfDisposed(),Zu(this,t)},ns.prototype.elu=function(){return this.throwIfDisposed(),Qu(this)},ns.prototype.equalStrict=function(t){return this.throwIfDisposed(),hh(this,t)},ns.prototype.equal=function(t){return this.throwIfDisposed(),Xu(this,t)},ns.prototype.erf=function(){return this.throwIfDisposed(),tl(this)},ns.prototype.exp=function(){return this.throwIfDisposed(),el(this)},ns.prototype.expandDims=function(t){return this.throwIfDisposed(),nl(this,t)},ns.prototype.expm1=function(){return this.throwIfDisposed(),rl(this)},ns.prototype.fft=function(){return this.throwIfDisposed(),Pc(this)},ns.prototype.flatten=function(){return this.throwIfDisposed(),qa(this,[this.size])},ns.prototype.floor=function(){return this.throwIfDisposed(),il(this)},ns.prototype.floorDiv=function(t){return this.throwIfDisposed(),ro(this,t)},ns.prototype.gather=function(t,e){return this.throwIfDisposed(),pl(this,t,e)},ns.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),ph(this,t)},ns.prototype.greaterEqual=function(t){return this.throwIfDisposed(),fl(this,t)},ns.prototype.greaterStrict=function(t){return this.throwIfDisposed(),dh(this,t)},ns.prototype.greater=function(t){return this.throwIfDisposed(),dl(this,t)},ns.prototype.ifft=function(){return this.throwIfDisposed(),Wc(this)},ns.prototype.irfft=function(){return this.throwIfDisposed(),Vc(this)},ns.prototype.isFinite=function(){return this.throwIfDisposed(),gl(this)},ns.prototype.isInf=function(){return this.throwIfDisposed(),yl(this)},ns.prototype.isNaN=function(){return this.throwIfDisposed(),bl(this)},ns.prototype.leakyRelu=function(t){return this.throwIfDisposed(),xl(this,t)},ns.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),fh(this,t)},ns.prototype.lessEqual=function(t){return this.throwIfDisposed(),vl(this,t)},ns.prototype.lessStrict=function(t){return this.throwIfDisposed(),mh(this,t)},ns.prototype.less=function(t){return this.throwIfDisposed(),wl(this,t)},ns.prototype.localResponseNormalization=function(t,e,n,r){return this.throwIfDisposed(),Nl(this,t,e,n,r)},ns.prototype.logSigmoid=function(){return this.throwIfDisposed(),Tl(this)},ns.prototype.logSoftmax=function(t){return this.throwIfDisposed(),Rl(this,t)},ns.prototype.logSumExp=function(t,e){return this.throwIfDisposed(),Dl(this,t,e)},ns.prototype.log=function(){return this.throwIfDisposed(),Il(this)},ns.prototype.log1p=function(){return this.throwIfDisposed(),$l(this)},ns.prototype.logicalAnd=function(t){return this.throwIfDisposed(),Fl(this,t)},ns.prototype.logicalNot=function(){return this.throwIfDisposed(),_l(this)},ns.prototype.logicalOr=function(t){return this.throwIfDisposed(),Ol(this,t)},ns.prototype.logicalXor=function(t){return this.throwIfDisposed(),Ml(this,t)},ns.prototype.matMul=function(t,e,n){return this.throwIfDisposed(),Ka(this,t,e,n)},ns.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),Ll(this,t,e,n,r)},ns.prototype.max=function(t,e){return this.throwIfDisposed(),El(this,t,e)},ns.prototype.maximumStrict=function(t){return this.throwIfDisposed(),xh(this,t)},ns.prototype.maximum=function(t){return this.throwIfDisposed(),Eo(this,t)},ns.prototype.mean=function(t,e){return this.throwIfDisposed(),Vl(this,t,e)},ns.prototype.min=function(t,e){return this.throwIfDisposed(),Ul(this,t,e)},ns.prototype.minimumStrict=function(t){return this.throwIfDisposed(),wh(this,t)},ns.prototype.minimum=function(t){return this.throwIfDisposed(),Gl(this,t)},ns.prototype.mirrorPad=function(t,e){return this.throwIfDisposed(),Hl(this,t,e)},ns.prototype.modStrict=function(t){return this.throwIfDisposed(),vh(this,t)},ns.prototype.mod=function(t){return this.throwIfDisposed(),jl(this,t)},ns.prototype.mulStrict=function(t){return this.throwIfDisposed(),kh(this,t)},ns.prototype.mul=function(t){return this.throwIfDisposed(),ao(this,t)},ns.prototype.neg=function(){return this.throwIfDisposed(),Sl(this)},ns.prototype.norm=function(t,e,n){return this.throwIfDisposed(),Ch(this,t,e,n)},ns.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),gh(this,t)},ns.prototype.notEqual=function(t){return this.throwIfDisposed(),Yl(this,t)},ns.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),Xa(this,t,e,n)},ns.prototype.onesLike=function(){return this.throwIfDisposed(),Zl(this)},ns.prototype.pad=function(t,e){return this.throwIfDisposed(),tc(this,t,e)},ns.prototype.pool=function(t,e,n,r,s){return this.throwIfDisposed(),ic(this,t,e,n,r,s)},ns.prototype.powStrict=function(t){return this.throwIfDisposed(),Nh(this,t)},ns.prototype.pow=function(t){return this.throwIfDisposed(),ko(this,t)},ns.prototype.prelu=function(t){return this.throwIfDisposed(),oc(this,t)},ns.prototype.prod=function(t,e){return this.throwIfDisposed(),uc(this,t,e)},ns.prototype.reciprocal=function(){return this.throwIfDisposed(),xc(this)},ns.prototype.relu=function(){return this.throwIfDisposed(),wc(this)},ns.prototype.relu6=function(){return this.throwIfDisposed(),vc(this)},ns.prototype.reshapeAs=function(t){return this.throwIfDisposed(),qa(this,t.shape)},ns.prototype.reshape=function(t){return this.throwIfDisposed(),qa(this,t)},ns.prototype.resizeBilinear=function(t,e){return this.throwIfDisposed(),pp(this,t,e)},ns.prototype.resizeNearestNeighbor=function(t,e){return this.throwIfDisposed(),dp(this,t,e)},ns.prototype.reverse=function(t){return this.throwIfDisposed(),kc(this,t)},ns.prototype.rfft=function(){return this.throwIfDisposed(),Hc(this)},ns.prototype.round=function(){return this.throwIfDisposed(),Cc(this)},ns.prototype.rsqrt=function(){return this.throwIfDisposed(),Tc(this)},ns.prototype.selu=function(){return this.throwIfDisposed(),Ec(this)},ns.prototype.separableConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Ac(this,t,e,n,r,s,a)},ns.prototype.sigmoid=function(){return this.throwIfDisposed(),bu(this)},ns.prototype.sign=function(){return this.throwIfDisposed(),Dc(this)},ns.prototype.sin=function(){return this.throwIfDisposed(),Fc(this)},ns.prototype.sinh=function(){return this.throwIfDisposed(),_c(this)},ns.prototype.slice=function(t,e){return this.throwIfDisposed(),xu(this,t,e)},ns.prototype.softmax=function(t){return this.throwIfDisposed(),Bc(this,t)},ns.prototype.softplus=function(){return this.throwIfDisposed(),Cl(this)},ns.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),ac(this,t,e)},ns.prototype.split=function(t,e){return this.throwIfDisposed(),Gc(this,t,e)},ns.prototype.sqrt=function(){return this.throwIfDisposed(),io(this)},ns.prototype.square=function(){return this.throwIfDisposed(),oo(this)},ns.prototype.squaredDifference=function(t){return this.throwIfDisposed(),jc(this,t)},ns.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),Ih(this,t)},ns.prototype.squeeze=function(t){return this.throwIfDisposed(),qc(this,t)},ns.prototype.stack=function(t,e){this.throwIfDisposed();const n=t instanceof ns?[this,t]:[this,...t];return Kc(n,e)},ns.prototype.step=function(t){return this.throwIfDisposed(),Xc(this,t)},ns.prototype.stridedSlice=function(t,e,n,r,s,a,i,o){return this.throwIfDisposed(),Yc(this,t,e,n,r,s,a,i,o)},ns.prototype.subStrict=function(t){return this.throwIfDisposed(),$h(this,t)},ns.prototype.sub=function(t){return this.throwIfDisposed(),No(this,t)},ns.prototype.sum=function(t,e){return this.throwIfDisposed(),Al(this,t,e)},ns.prototype.tan=function(){return this.throwIfDisposed(),Jc(this)},ns.prototype.tanh=function(){return this.throwIfDisposed(),wu(this)},ns.prototype.tile=function(t){return this.throwIfDisposed(),sl(this,t)},ns.prototype.toBool=function(){return this.throwIfDisposed(),Ca(this,"bool")},ns.prototype.toFloat=function(){return this.throwIfDisposed(),Ca(this,"float32")},ns.prototype.toInt=function(){return this.throwIfDisposed(),Ca(this,"int32")},ns.prototype.topk=function(t,e){return this.throwIfDisposed(),nh(this,t,e)},ns.prototype.transpose=function(t){return this.throwIfDisposed(),Ya(this,t)},ns.prototype.unique=function(t){return this.throwIfDisposed(),sh(this,t)},ns.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),ah(this,t,e)},ns.prototype.unstack=function(t){return this.throwIfDisposed(),ih(this,t)},ns.prototype.where=function(t,e){return this.throwIfDisposed(),Yu(t,this,e)},ns.prototype.zerosLike=function(){return this.throwIfDisposed(),uo(this)};class $f extends Error{constructor(t){super(t),Object.setPrototypeOf(this,$f.prototype)}}class Sf extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Sf.prototype)}}class Cf extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Cf.prototype)}}class Tf extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Tf.prototype)}}class Ef extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Ef.prototype)}}function Af(t,e){if(Array.isArray(t)){let n=[];for(let r=0;r<e;r++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function Rf(t,e){if(!t)throw new Ef(e)}function Df(t,e){let n=0;for(const r of t)r===e&&n++;return n}function Ff(t){return 1===t.length?t[0]:t}function _f(t){return Array.isArray(t)?t:[t]}function Of(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Mf(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,((t,e)=>e.toUpperCase()))}Error;let Lf={};function zf(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function Bf(t){if(null!=t&&"object"==typeof t)if(Array.isArray(t))t.forEach((t=>Bf(t)));else{const e=Object.keys(t);for(const n of e){const e=t[n];null!=e&&"object"==typeof e&&(Array.isArray(e)||"ndarray"!==e.type||"number"!=typeof e.value?Bf(e):t[n]=e.value)}}}function Pf(t,e={},n={},r="object",s=!1){if("string"==typeof t){const s=t;let a;if(s in n)a=n[s];else if(s in Lf)a=Lf[s];else if(a=e[s],null==a)throw new Cf(`Unknown ${r}: ${t}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=t;if(null==a.className||null==a.config)throw new Cf(`${r}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,u;if(i in n?[o,u]=n[i]:i in Lf?[o,u]=Lf.className:i in e&&([o,u]=e[i]),null==o)throw new Cf(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const t={};for(const e of Object.keys(Lf))t[e]=Lf[e];for(const e of Object.keys(n))t[e]=n[e];a.config.customObjects=t;const e=Object.assign({},Lf);for(const t of Object.keys(n))Lf[t]=n[t];Bf(a.config);const r=u(o,a.config,n,s);return Lf=Object.assign({},e),r}{const t=Object.assign({},Lf);for(const t of Object.keys(n))Lf[t]=n[t];const e=new o(a.config);return Lf=Object.assign({},t),e}}}function Wf(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function Vf(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function Uf(t){if(null==t)throw new Cf(`Invalid value in obj: ${JSON.stringify(t)}`);for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function Gf(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new Cf(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function Hf(t,e,n=0,r=1/0){return Rf(n>=0),Rf(r>=n),Array.isArray(t)&&t.length>=n&&t.length<=r&&t.every((t=>typeof t===e))}function jf(t,e){Array.isArray(t)?(j(t.length>0,(()=>`${e} is unexpectedly an empty array.`)),t.forEach(((t,n)=>jf(t,`element ${n+1} of ${e}`)))):j(Number.isInteger(t)&&t>0,(()=>`Expected ${e} to be a positive integer, but got ${qf(t)}.`))}function qf(t){return null===t?"null":Array.isArray(t)?"["+t.map((t=>qf(t))).join(",")+"]":"string"==typeof t?`"${t}"`:`${t}`}function Kf(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function Xf(t,e){return Ui((()=>io(Al(ao(t,t),e,!0))))}class Yf extends vi{getConfig(){return{}}}class Jf extends Yf{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Ui((()=>{const e=Xf(t,this.axis),n=Au(e,0,this.maxValue);return ao(t,so(n,no(If(),e)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Jf.className="MaxNorm",Ni(Jf);class Zf extends Yf{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Ui((()=>so(t,no(If(),Xf(t,this.axis)))))}getConfig(){return{axis:this.axis}}}Zf.className="UnitNorm",Ni(Zf);class Qf extends Yf{apply(t){return wc(t)}}Qf.className="NonNeg",Ni(Qf);class tm extends Yf{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Ui((()=>{const e=Xf(t,this.axis),n=no(ao(this.rate,Au(e,this.minValue,this.maxValue)),ao(1-this.rate,e));return ao(t,so(n,no(If(),e)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}tm.className="MinMaxNorm",Ni(tm);const em={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function nm(t){return zf(t)}function rm(t,e={}){return Pf(t,ki.getMap().classNameMap,e,"constraint")}function sm(t){return null==t?null:"string"==typeof t?rm({className:t in em?em[t]:t,config:{}}):t instanceof Yf?t:rm(t)}const am=["channelsFirst","channelsLast"],im=["valid","same","causal"],om=["max","avg"],um=["sum","mul","concat","ave"],lm=new Map;function cm(t){Gf(am,"DataFormat",t)}function hm(t){Gf(im,"PaddingMode",t)}function pm(t){Gf(om,"PoolMode",t)}const dm=[];function fm(t,e){dm.push(t);try{const t=e();return dm.pop(),t}catch(t){throw dm.pop(),t}}function mm(t){if(!bm(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===dm.length?"":dm.join("/")+"/")+t}function gm(t){if(!bm(t))throw new Error("Not a valid tensor name: '"+t+"'");lm.has(t)||lm.set(t,0);const e=lm.get(t);if(lm.set(t,lm.get(t)+1),e>0){const n=`${t}_${e}`;return lm.set(n,1),n}return t}const ym=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function bm(t){return!!t.match(ym)}function xm(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let r=1;for(let s=e;s<n;++s)r*=t[s];return r}function wm(t){return yc(t=Array.isArray(t)?new Float32Array(t):t)}function vm(t){return Ul(wm(t)).dataSync()[0]}function km(t){return El(wm(t)).dataSync()[0]}function Nm(t,e){if(e<t)throw new Cf(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let r=t;r<e;++r)n.push(r);return n}function Im(t,e){return t.asType(e)}function $m(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function Sm(t,e,n){return Ui((()=>{switch(t.rank){case 1:return Oc(t,e,n);case 2:return Mc(t,[e,0],[n,t.shape[1]]);case 3:return Lc(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return zc(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return xu(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return xu(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new Cf(`sliceAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function Cm(t,e,n){return Ui((()=>{switch(t.rank){case 1:return Oc(t,e,n);case 2:return Mc(t,[0,e],[t.shape[0],n]);case 3:return Lc(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return zc(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new Cf(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function Tm(t,e,n,r){return Ui((()=>{switch(t.rank){case 1:return Oc(t,e,n);case 2:switch(r){case 1:return Sm(t,e,n);case 2:return Cm(t,e,n);default:throw new Cf(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return Sm(t,e,n);case 2:return Lc(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return Cm(t,e,n);default:throw new Cf(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return Sm(t,e,n);case 2:return zc(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return zc(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return Cm(t,e,n);default:throw new Cf(`The axis is not within the rank of the tensor ${r}`)}default:throw new Cf(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function Em(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),yu(t,e)}function Am(t,e){switch(t.rank){case 1:return Ru([t,e]);case 2:return Du([t,e],0);case 3:return Fu([t,e],0);case 4:return _u([t,e],0);default:throw new Cf(`concatAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`)}}function Rm(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new Cf(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return sl(t,e)}function Dm(t,e=0,n=1,r,s){return mc(t,e,n,r,s)}function Fm(t,e,n,r){if(t.rank<2||e.rank<2)throw new Tf(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3&&t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new Tf(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = ${e.shape}`);if(2===t.rank&&2===e.rank)return Hh({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?Mm(t.rank,r,"channelsLast"):null,activation:n});{const s=t.shape.slice(),a=s.pop();t=t.reshape([-1,a]);const i=e.shape.slice(),o=i.pop(),u=i.pop(),l=[...i,o],c=Array.from({length:e.rank},((t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n));e=e.transpose(c).reshape([u,-1]);const h=[...s,...l];return Hh({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?Mm(t.rank,r,"channelsLast"):null,activation:n}).reshape(h)}}function _m(t,e,n){return Ui((()=>(e=Array.isArray(e)?yc(e,"int32"):e.toInt(),pl(t,e,n))))}function Om(t){return ao(t,t)}function Mm(t,e,n){const r=e.shape;if(1!==e.rank&&e.rank!==t)throw new Cf(`Unexpected bias dimensions: ${e.rank}; expected it to be 1 or ${t}`);if(5===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1,1]):e.reshape([1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,1,r[0]]):e.reshape([1].concat(r))}else if(4===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1]):e.reshape([1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,r[0]]):e.reshape([1].concat(r))}else if(3===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1]):e.reshape([1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,r[0]]):e.reshape([1].concat(r))}else if(t<3)return e;throw new Cf(`Unsupported input rank by biasAdd: ${e.rank}`)}function Lm(t,e,n){return Ui((()=>(null==n&&(n="channelsLast"),cm(n),t.add(Mm(t.rank,e,n)))))}function zm(t,e,n,r){return Ui((()=>Dh(t,e,n,r)))}function Bm(t,e,n=!1){return n?t():e()}const Pm=["fanIn","fanOut","fanAvg"],Wm=["normal","uniform","truncatedNormal"];class Vm extends vi{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Um extends Vm{apply(t,e){return Pl(t,e)}}Um.className="Zeros",Ni(Um);class Gm extends Vm{apply(t,e){return Wl(t,e)}}Gm.className="Ones",Ni(Gm);class Hm extends Vm{constructor(t){if(super(),"object"!=typeof t)throw new Cf(`Expected argument of type ConstantConfig but got ${t}`);if(void 0===t.value)throw new Cf(`config must have value set but got ${t}`);this.value=t.value}apply(t,e){return Ui((()=>ao(yo(this.value),Wl(t,e))))}getConfig(){return{value:this.value}}}Hm.className="Constant",Ni(Hm);class jm extends Vm{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return gc(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}jm.className="RandomUniform",Ni(jm);class qm extends Vm{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Tf(`randomNormal does not support dType ${e}.`);return Dm(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}qm.className="RandomNormal",Ni(qm);class Km extends Vm{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Tf(`truncatedNormal does not support dType ${e}.`);return rh(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Km.className="TruncatedNormal",Ni(Km);class Xm extends Vm{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return Ui((()=>{if(2!==t.length||t[0]!==t[1])throw new Cf("Identity matrix initializer can only be used for 2D square matrices.");return ao(this.gain,al(t[0]))}))}getConfig(){return{gain:this.gain}}}Xm.className="Identity",Ni(Xm);class Ym extends Vm{constructor(t){if(super(),t.scale<0)throw new Cf(`scale must be a positive float. Got: ${t.scale}`);var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,e=this.mode,Gf(Pm,"FanMode",e),this.distribution=null==t.distribution?"normal":t.distribution,function(t){Gf(Wm,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e="channelsLast"){let n,r;if(cm(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=xm(t,2);n=t[1]*e,r=t[0]*e}else if("channelsLast"===e){const e=xm(t,0,t.length-2);n=t[t.length-2]*e,r=t[t.length-1]*e}}else{const e=xm(t);n=Math.sqrt(e),r=Math.sqrt(e)}return[n,r]}(t),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Tf(`${this.getClassName()} does not support dType ${e}.`);return rh(t,0,n,e,this.seed)}{const n=Math.sqrt(3*a);return gc(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Ym.className="VarianceScaling",Ni(Ym);class Jm extends Ym{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Ym.className}}Jm.className="GlorotUniform",Ni(Jm);class Zm extends Ym{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Ym.className}}Zm.className="GlorotNormal",Ni(Zm);class Qm extends Ym{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Ym.className}}Qm.className="HeNormal",Ni(Qm);class tg extends Ym{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Ym.className}}tg.className="HeUniform",Ni(tg);class eg extends Ym{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Ym.className}}eg.className="LeCunNormal",Ni(eg);class ng extends Ym{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Ym.className}}ng.className="LeCunNormal",Ni(ng);class rg extends Vm{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new Tf("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return Ui((()=>{if(t.length<2)throw new Tf("Shape must be at least 2D.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=Dm(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let n=Rp.gramSchmidt(e);return t[0]>t[1]&&(n=n.transpose()),ao(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}rg.className="Orthogonal",Ni(rg);const sg={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function ag(t,e={}){return Pf(t,ki.getMap().classNameMap,e,"initializer")}function ig(t){return zf(t)}function og(t){if("string"==typeof t){const e=t in sg?sg[t]:t;if("GlorotNormal"===e)return new Zm;if("GlorotUniform"===e)return new Jm;if("HeNormal"===e)return new Qm;if("HeUniform"===e)return new tg;if("LeCunNormal"===e)return new eg;if("LeCunUniform"===e)return new ng;{const t={};return t.className=e,t.config={},ag(t)}}return t instanceof Vm?t:ag(t)}let ug=0;function lg(){return ug++}const cg={};function hg(t=""){return t in cg||(cg[t]=0),cg[t]+=1,t+cg[t].toString()}function pg(t){return Array.isArray(t)&&Array.isArray(t[0])}function dg(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function fg(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new Cf(`Expected Tensor length to be 1; got ${t.length}`);e=t[0]}else e=t;return e}function mg(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new Cf(`Expected exactly 1 Shape; got ${t.length}`)}return t}function gg(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce(((t,e)=>t*e));return e}class yg{constructor(t,e="float32",n="Variable",r=!0,s=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=lg(),n=null==n?"Variable":n,this.originalName=mm(n),this.name=gm(this.originalName),this.trainable_=r,this.constraint=s,this.val=oh(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function bg(t){return t.map((t=>t.read()))}function xg(t){t.forEach((t=>{t[0].write(t[1])}))}class wg{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class vg{constructor(t,e,n,r,s,a,i){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=lg(),null!=a&&(this.originalName=mm(a),this.name=gm(this.originalName)),this.rank=e.length}}let kg=0;class Ng{constructor(t,e){this.callArgs=e,this.id=kg++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const e of t.inboundLayers)null!=e&&e.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Ig=0;class $g extends vi{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Ig++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=Of(t)+"_"+hg(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new Sf(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new Cf(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return Ff(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return Ff(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new $f(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new $f(`Layer ${this.name} is not connected, no input to return.`);return Ff(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new $f(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new $f(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Ff(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((t=>t()))}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach((e=>e.trainable=t)),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((t=>t.trainable)):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((t=>!t.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=_f(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=_f(this.inputSpec);if(t.length!==e.length)throw new Cf(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let n=0;n<t.length;n++){const r=t[n],s=e[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new Cf(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new Cf(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new Cf(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new Cf(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const t=r.shape;for(const e in s.axes){const r=Number(e),a=s.axes[e],i=r>=0?t[r]:t[t.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new Cf(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const e=s.shape[t],a=r.shape[t];if(null!=e&&null!=a&&e!==a)throw new Cf(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=_f(t);let r=!0;for(const t of n)if(!(t instanceof vg)){r=!1;break}let s=!0;for(const t of n)if(t instanceof vg){s=!1;break}if(r===s)throw new Cf("Arguments to apply() must be all SymbolicTensors or all Tensors");return fm(this.name,(()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of _f(t))e.push(n.shape);this.build(Ff(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let r=this.call(t,e);const s=_f(r),a=[];for(let t of s)-1!==n.indexOf(t)&&(t=t.clone()),a.push(t);if(r=Ff(a),null!=this.activityRegularizer)throw new Tf("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(t){t=_f(t);const e=[];for(const n of t)e.push(n.shape);return Ff(e)}(t),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new vg(a,n,this,_f(t),e,this.name,r))):new vg(a,r,this,_f(t),e,this.name),this.addInboundNode(t,s,null,null,n,r,e),this._refCount++,null!=this.activityRegularizer)throw new Tf("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=t[r]&&t[r]!==n&&(e=!0)})),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new $f(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new $f(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Sf(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return gg(this.weights)}build(t){this.built=!0}getWeights(t=!1){return bg(t?this.trainableWeights:this.weights)}setWeights(t){Ui((()=>{const e=this.weights;if(e.length!==t.length)throw new Cf(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],r=bg(e);for(let s=0;s<r.length;++s){const a=r[s],i=e[s],o=t[s];if(!Z(a.shape,o.shape))throw new Cf(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}xg(n)}))}addWeight(t,e,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(t))throw new Cf(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=og("zeros"));const o=r.apply(e,n),u=new yg(o,n,t,a,i);return o.dispose(),null!=s&&this.addLoss((()=>s.apply(u.read()))),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=_f(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach((t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return e}addInboundNode(t,e,n,r,s,a,i=null){const o=_f(t);e=_f(e),n=_f(n),r=_f(r),s=dg(s),a=dg(a);const u=[],l=[],c=[];for(const t of o)u.push(t.sourceLayer),l.push(t.nodeIndex),c.push(t.tensorIndex);new Ng({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:o,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let t=0;t<e.length;t++)e[t].sourceLayer=this,e[t].nodeIndex=this.inboundNodes.length-1,e[t].tensorIndex=t}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach((t=>t.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function Sg(t,e,n){if((null==e||null!=n&&n>0)&&(e=t.sourceLayer,n=t.nodeIndex),0===e.inboundNodes.length)return[t];{const t=e.inboundNodes[n];if(0===t.inboundLayers.length)return t.inputTensors;{const e=[];for(let n=0;n<t.inboundLayers.length;n++){const r=Sg(t.inputTensors[n],t.inboundLayers[n],t.nodeIndices[n]);for(const t of r)-1===e.indexOf(t)&&e.push(t)}return e}}}class Cg extends $g{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:hg("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new Cf("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new Cf("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new Cf("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const r=new vg(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new Ng({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new Cf(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}async function Tg(t){if(null==t)return;const e=[],n=[],r=[];for(const s in t){const a=t[s];if("number"!=typeof a){const t=a;e.push(t.data()),n.push(s),r.push(t)}}if(e.length>0){const s=await Promise.all(e);for(let e=0;e<s.length;++e)t[n[e]]=s[e][0];Gi(r)}}function Eg(t){if(null!=t)for(const e in t){const n=t[e];"number"!=typeof n&&n.dispose()}}var Ag;Cg.className="InputLayer",Ni(Cg),function(t){t[t.SILENT=0]="SILENT",t[t.VERBOSE=1]="VERBOSE"}(Ag||(Ag={}));class Rg{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class Dg{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class Fg extends Rg{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const t in e){const r=e[t];if("number"==typeof r)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+r*n;else{let e;t in this.totals?e=this.totals[t]:this.totals[t]=0;const s=Ui((()=>no(this.totals[t],ao(r,n))));this.totals[t]=s,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const t of this.params.metrics)null!=this.totals[t]&&("number"==typeof this.totals[t]?e[t]=this.totals[t]/this.seen:Ui((()=>{const n=ao(so(1,this.seen),this.totals[t]);e[t]=n,this.totals[t].dispose(),Hi(e[t])})))}}class _g extends Rg{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const t in e)null==this.history[t]&&(this.history[t]=[]),this.history[t].push(e[t])}async syncData(){const t=[],e=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];t.push(i.data()),e.push(r),n.push(a)}}const r=await Promise.all(t);for(let t=0;t<r.length;++t)this.history[e[t]][n[t]].dispose(),this.history[e[t]][n[t]]=r[t][0]}}class Og extends Rg{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");bt(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,r=Kr();return(...s)=>{const a=Kr();return a-r<e||(r=a,n=t(...s)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const r=[];null!=this.yield&&(await Tg(n),r.push(this.yield(t,e,n))),r.push(Mp()),await Promise.all(r)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await Tg(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await Tg(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(Mp()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await Tg(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await Tg(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(Mp()):bt(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await Tg(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await Tg(t),await this.trainEnd(t))}}function Mg(t,e){return null==t&&(t={}),t instanceof Rg?[t]:Array.isArray(t)&&t[0]instanceof Rg?t:_f(t).map((t=>new Og(t,e)))}class Lg{constructor(){}static registerCallbackConstructor(t,e){j(t>=0&&Number.isInteger(t),(()=>`Verbosity level is expected to be an integer >= 0, but got ${t}`)),Lg.checkForDuplicate(e),null==Lg.constructors[t]&&(Lg.constructors[t]=[]),Lg.constructors[t].push(e)}static checkForDuplicate(t){for(const e in Lg.constructors)Lg.constructors[+e].forEach((e=>{if(e===t)throw new Cf("Duplicate callback constructor.")}))}static clear(){Lg.constructors={}}static createCallbacks(t){const e=[];for(const n in Lg.constructors){const r=+n;t>=r&&e.push(...Lg.constructors[r])}return e.map((t=>new t))}}function zg(t,e,n,r,s,a,i,o,u){const l=new _g,c=[new Fg,...Lg.createCallbacks(e)];null!=t&&c.push(...t),c.push(l);const h=new Dg(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:e,doValidation:o,metrics:u}),{callbackList:h,history:l}}function Bg(t,e={},n=!1){return Pf(t,ki.getMap().classNameMap,e,"layer",n)}function Pg(t,e){return Ui((()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const n=Al(Om(t),e,!0),r=wo(n.shape,If()),s=io(Eo(n,r));return so(t,s)}))}function Wg(t,e){return Ui((()=>Vl(Om(No(e,t)),-1)))}function Vg(t,e){return Ui((()=>Vl($o(No(e,t)),-1)))}function Ug(t,e){return Ui((()=>{const n=No(t,e),r=Au($o(t),If(),Number.MAX_VALUE),s=$o(so(n,r));return ao(100,Vl(s,-1))}))}function Gg(t,e,n=!1){return Ui((()=>{if(n)e=Bc(e);else{const t=Al(e,e.shape.length-1,!0);e=so(e,t)}return e=Au(e,If(),1-If()),Sl(Al(ao(t.toFloat(),Il(e)),e.shape.length-1))}))}function Hg(t,e,n=!1){return Ui((()=>{const r=il(function(t){const e=[xm(t.shape)];return t.reshape(e)}(t)).toInt(),s=(e=Au(e,If(),1-If())).shape;return Gg(Xa(r,s[s.length-1]).reshape(s),e,n)}))}function jg(t,e){return Ui((()=>{let n;return n=Au(e,If(),1-If()),n=Il(so(n,No(1,n))),Vl(function(t,e){if(!Z(t.shape,e.shape))throw new Cf(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return Ui((()=>{const n=e.relu(),r=e.abs().neg();return n.sub(e.mul(t)).add(r.exp().log1p())}))}(t,n),-1)}))}function qg(t,e){return Ui((()=>{const n=Pg(t,-1),r=Pg(e,-1),s=ao(n,r);return Sl(Al(s,-1))}))}Lg.constructors={};const Kg={meanSquaredError:Wg,meanAbsoluteError:Vg,meanAbsolutePercentageError:Ug,meanSquaredLogarithmicError:function(t,e){return Ui((()=>{const n=Au(e,If(),Number.MAX_VALUE),r=Il(no(1,n)),s=Au(t,If(),Number.MAX_VALUE),a=Il(no(1,s));return Vl(Om(No(r,a)),-1)}))},squaredHinge:function(t,e){return Ui((()=>{const n=Eo(0,No(1,ao(t,e)));return Vl(Om(n),-1)}))},hinge:function(t,e){return Ui((()=>{const n=Eo(0,No(1,ao(t,e)));return Vl(n,-1)}))},categoricalHinge:function(t,e){return Ui((()=>{const n=Al(ao(t,e),-1),r=El(ao(No(1,t),e),-1);return Eo(0,no(1,No(r,n)))}))},logcosh:function(t,e){return Ui((()=>{const n=Math.log(2),r=No(e,t),s=No(no(r,Cl(ao(-2,r))),n);return Vl(s,-1)}))},categoricalCrossentropy:Gg,sparseCategoricalCrossentropy:Hg,binaryCrossentropy:jg,kullbackLeiblerDivergence:function(t,e){return Ui((()=>{const n=Au(t,If(),1),r=Au(e,If(),1);return Al(ao(t,Il(so(n,r))),-1)}))},poisson:function(t,e){return Ui((()=>{const n=Il(no(If(),e));return Vl(No(e,ao(t,n)),-1)}))},cosineProximity:qg};function Xg(t){if("string"==typeof t){if(t in Kg)return Kg[t];let e=`Unknown loss ${t}`;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Cf(e)}return t}function Yg(t,e){return Ui((()=>{const n=ao(.5,Zl(e)),r=Im(dl(e,n),t.dtype);return Vl(Xu(t,r),-1)}))}function Jg(t,e){return Ui((()=>Im(Xu(qo(t,-1),qo(e,-1)),"float32")))}function Zg(t,e){return jg(t,e)}function Qg(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),Xu(t,e).asType("float32")}const ty=Gg,ey=Hg,ny={binaryAccuracy:Yg,categoricalAccuracy:Jg,precision:function(t,e){return Ui((()=>{const n=function(t,e){return Ui((()=>Fl(t.equal(1),e.equal(1)).sum().cast("float32")))}(t,e),r=function(t,e){return Ui((()=>Fl(t.equal(0),e.equal(1)).sum().cast("float32")))}(t,e),s=n.add(r);return Yu(dl(s,0),n.div(s),0).cast("float32")}))},categoricalCrossentropy:ty,sparseCategoricalCrossentropy:ey,mse:Wg,MSE:Wg,mae:Vg,MAE:Vg,mape:Ug,MAPE:Ug,cosine:qg};function ry(t){if("string"==typeof t&&t in ny)return ny[t];if("string"!=typeof t&&null!=t)return t;throw new Cf(`Unknown metric ${t}`)}function sy(t){if(Rf(null!==t,`Unknown LossOrMetricFn ${t}`),"string"==typeof t)return t;{let e;for(const n of Object.keys(Kg))if(Kg[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(ny))if(ny[n]===t){e=n;break}return void 0!==e?e:t.name}}function ay(t,e,n=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!iy(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>1048576&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function iy(t){if(null===t)return!0;if("object"==typeof t){if(Object.getPrototypeOf(t)===Object.prototype){const e=Object.keys(t);for(const n of e){if("string"!=typeof n)return!1;if(!iy(t[n]))return!1}return!0}if(Array.isArray(t)){for(const e of t)if(!iy(e))return!1;return!0}return!1}{const e=typeof t;return"string"===e||"number"===e||"boolean"===e}}function oy(t,e,n=console.log){let r="";for(let n=0;n<t.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=t[n],r=r.slice(0,e[n]),r+=" ".repeat(e[n]-r.length);n(r)}function uy(t,e,n){let r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}oy([`${t.name} (${t.getClassName()})`,r,t.countParams().toString()],e,n)}function ly(t,e,n,r){let s;try{s=JSON.stringify(t.outputShape)}catch(t){s="multiple"}const a=[];for(const e of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(e)))for(let t=0;t<e.inboundLayers.length;++t){const n=e.inboundLayers[t].name,r=e.nodeIndices[t],s=e.tensorIndices[t];a.push(`${n}[${r}][${s}]`)}const i=t.name,o=t.getClassName(),u=0===a.length?"":a[0];oy([`${i} (${o})`,s,t.countParams().toString(),u],e,r);for(let t=1;t<a.length;++t)oy(["","","",a[t]],e,r)}function cy(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function hy(t,e){if(null===t)return null;if("string"==typeof t)return Mf(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];cy(e,s,r)?n.push(r):n.push(hy(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n];if("name"===n&&"string"==typeof r)e[n]=r;else{const t=Mf(n);e[t]=hy(r,t)}}return e}}function py(t,e){if(null==t)return null;if("string"==typeof t)return Of(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];cy(e,s,r)?n.push(r):n.push(py(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n];e[Of(n)]="name"!==n&&"className"!==n||"string"!=typeof r?py(r,n):r}return e}}class dy{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof dy)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new Cf(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return Ca(e,t.dtype)}catch(n){throw new Cf(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof vg){if(null==this.id2Value[t.id])throw new Cf(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new Cf(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof vg){if(null==this.id2Value[t.id])throw new Cf(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new Cf(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Gi(this.id2Mask)}}const fy={},my={};function gy(t,e,n,r){const s=null!=n&&n.training,a=Array.isArray(t),i=a?t:[t],o=i.map((t=>t.name)),u=[],l=e.names();for(const t of o)-1!==l.indexOf(t)?u.push(e.getValue(t)):u.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=o.join(",")+"|"+e.names().join(",");let h,p;if(null==fy[c]){const t=function(t,e){j(null!=t&&t.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===t.length){const s=by(t[0],e);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of t){const{sorted:t,recipientMap:i}=by(a,e);for(const e of t)s.has(e.name)||(n.push(e),s.add(e.name));for(const t in i)null==r[t]&&(r[t]=new Set),i[t].forEach((e=>r[t].add(e)))}}return{sorted:n,recipientCounts:yy(r)}}(i,e);h=t.sorted,p=t.recipientCounts,fy[c]=h,my[c]=p}h=fy[c],p={},s||Object.assign(p,my[c]);const d=new dy(e);for(let t=0;t<h.length;++t){if(null!=r){const t=Wi().numTensors;t>r.maxNumTensors&&(r.maxNumTensors=t),t<r.minNumTensors&&(r.minNumTensors=t)}const a=h[t],i=a.sourceLayer;if(i instanceof Cg)continue;const l=[],c=[],f=[];let m=!1;for(const t of a.inputs){const n=d.getValue(t),r=d.getMask(t);l.push(n),c.push(r),null!=r&&(m=!0),s||(p[t.name]--,0!==p[t.name]||e.hasKey(t)||-1!==o.indexOf(t.name)||n.isDisposed||!0===t.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=_f(i.apply(l,n));let y=null;i.supportsMasking&&(y=i.computeMask(l,c));const b=xy(a),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){d.hasKey(x[t])||d.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=o.indexOf(x[t].name);-1!==e&&(u[e]=g[t])}s||Gi(f)}return d.disposeMasks(),a?u:u[0]}function yy(t){const e={};for(const n in t)e[n]=t[n].size;return e}function by(t,e){const n=new Set,r=[],s={};for(const t of e.names())n.add(t);const a=[],i=[];for(a.push(t);a.length>0;){const t=a[a.length-1];if(n.has(t.name)){a.pop();continue}const e=i[i.length-1]===a.length-1;if(0===t.inputs.length||e)a.pop(),r.push(t),n.add(t.name),e&&i.pop();else{i.push(a.length-1);for(const e of t.inputs)null==s[e.name]&&(s[e.name]=new Set),s[e.name].add(t.name),n.has(e.name)||a.push(e)}}return{sorted:r,recipientMap:s}}function xy(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const r of t.sourceLayer.inboundNodes[e].outputTensors)if(r.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class wy extends $g{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=hg(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],Vf(this.inputs).length!==this.inputs.length)throw new Cf(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((t=>t.name))}`);Vf(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((t=>t.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const t of this.outputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const t of this.inputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;Rf(0===n,"input layer has >1 nodes"),Rf(0===r,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e];if(!(n instanceof Cg))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const t of this.outputLayers)this.outputNames.push(t.name);this.internalInputShapes=this.inputs.map((t=>t.shape)),this.internalOutputShapes=this.outputs.map((t=>t.shape));const e={},n={},r={},s={},a={},i=[],o=(t,e,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=t.sourceLayer,s=t.nodeIndex,u=t.tensorIndex);const l=r.inboundNodes[s];if(-1!==n.indexOf(l))throw new Sf(`The tensor ${t.name} at layer "${r.name}" is part of a cycle.`);if(-1!==e.indexOf(l))return;this.containerNodes.add(wy.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let t=0;t<c;t++){const r=l.inputTensors[t],s=l.inboundLayers[t],a=l.nodeIndices[t],i=l.tensorIndices[t];o(r,e,n,s,a,i)}for(e.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);i.push(l)},u=[],l=[];for(const t of this.outputs)o(t,u,l);const c=i.slice().reverse();for(const t of c){n[t.id]=t,t.id in e||(e[t.id]=0);let a=e[t.id];const i=null==r[t.outboundLayer.id]?0:r[t.outboundLayer.id];a=Math.max(a,i),r[t.outboundLayer.id]=a,s[t.outboundLayer.id]=t.outboundLayer,e[t.id]=a;for(let r=0;r<t.inboundLayers.length;r++){const s=t.inboundLayers[r],i=t.nodeIndices[r],o=s.inboundNodes[i],u=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(a+1,u),n[o.id]=o}}const h={};for(const t in e){const r=e[t];r in h||(h[r]=[]),h[r].push(n[t])}const p={};for(const t in r){const e=r[t];e in p||(p[e]=[]),p[e].push(s[t])}let d=Object.keys(p).map((t=>parseInt(t,10))).sort(Wf);this.layers=[];for(const t of d){const e=p[t];e.sort(((t,e)=>{const n=a[t.id],r=a[e.id];return n<r?-1:n>r?1:0}));for(const t of e)t instanceof wy&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=p,d=Object.keys(h).map((t=>parseInt(t,10))).sort(Wf);const f=this.inputs.slice(),m=[];for(const t of d)for(const e of h[t]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new Sf(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${t.name}". The following previous layers were accessed without issue: ${m}`);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map((t=>t.name));for(const t of g){const e=g.filter((e=>e===t)).length;if(1!==e)throw new Sf(`The name "${t}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Ng({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((t=>null)),outputMasks:this.outputs.map((t=>null)),inputShapes:this.inputs.map((t=>t.shape)),outputShapes:this.outputs.map((t=>t.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach((e=>{e._trainableWeights.forEach((e=>e.trainable=t))})),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new Cf("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let r=0;for(const t of this.layers)for(const e of t.weights){if(null!=n[e.originalName])throw new Cf(`Duplicate weight name: ${e.originalName}`);n[e.originalName]=e,r++}const s=[];for(const r in t){let a=r;if(null==n[r]){const t=r.split("/");a=t.slice(0,-2).concat([t[t.length-1]]).join("/")}if(null!=n[a])s.push([n[a],t[r]]);else if(e)throw new Cf(`Provided weight data has no target variable: ${r}`);delete n[a]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new Cf(`${t.length} of ${r} weights are not set: ${t}`)}xg(s)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 2.7.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const n=py(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return Ui((()=>{t=_f(t);const n=new dy;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return gy(this.outputs,n,e)}))}computeMask(t,e){return Ui((()=>{let n;return t=_f(t),n=null==e?Af(null,t.length):_f(e),this.runInternalGraph(t,n)[1]}))}computeOutputShape(t){const e=dg(t);if(e.length!==this.inputLayers.length)throw new Cf(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let t=0;t<e.length;t++){const r=this.inputLayers[t],s=e[t];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map((t=>parseInt(t,10))).sort(Wf);if(r.length>1)for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map((t=>t.id)).indexOf(e.id))continue;const r=[];for(let e=0;e<t.inboundLayers.length;e++){const s=t.inboundLayers[e],a=t.nodeIndices[e],i=t.tensorIndices[e],o=n[`${s.name}_${a}_${i}`];r.push(o)}const s=dg(e.computeOutputShape(Ff(r))),a=e.inboundNodes.indexOf(t);for(let t=0;t<s.length;t++)n[`${e.name}_${a}_${t}`]=s[t]}}const s=[],a=[];for(let t=0;t<this.outputLayers.length;t++){const e=this.outputLayers[t],n=this.outputLayersNodeIndices[t],r=this.outputLayersTensorIndices[t],s=`${e.name}_${n}_${r}`;a.push(s)}for(let t=0;t<a.length;t++){const e=a[t];Rf(e in n),s.push(n[e])}return Ff(s)}runInternalGraph(t,e){null==e&&(e=Af(null,t.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=t[r],i=e[r];n[s.id]=[a,i]}const r=Object.keys(this.nodesByDepth).map((t=>parseInt(t,10))).sort(Wf);for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer,r=t.inputTensors,s=t.outputTensors,a=new Array;for(const t of r)t.id in n&&a.push(n[t.id]);if(a.length===r.length){let r,i,o,u,l={};if(null!=t.callArgs&&(l=t.callArgs),1===a.length){const[t,n]=a[0];null==l.mask&&(l.mask=n),o=_f(e.call(t,l)),u=_f(e.computeMask(t,n)),r=[t],i=[n]}else r=a.map((t=>t[0])),i=a.map((t=>t[1])),null==l.mask&&(l.mask=i),o=_f(e.call(r,l)),u=_f(e.computeMask(r,i));if(e.activityRegularizer)throw new Tf("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<s.length;++t){const e=s[t],r=o[t],a=u[t];n[e.id]=[r,a]}}}}const s=[],a=[],i=[];for(const t of this.outputs){Rf(t.id in n,`Could not compute output ${t.name} : ${t.id}`);const[e,r]=n[t.id];i.push(e.shape),s.push(e),a.push(r)}return[s,a,i]}buildNodeConversionMap(t){const e={};let n;for(const t of this.layers){n=t instanceof wy?1:0;for(let r=0;r<t.inboundNodes.length;r++){const s=wy.nodeKey(t,r);this.containerNodes.has(s)&&(e[s]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new Cf(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new Cf("Provide either a layer name or layer index");for(const e of this.layers)if(e.name===t)return e;throw new Cf(`No such layer: ${t}`)}calculateLosses(){return Ui((()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const r=wy.nodeKey(e,n);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t}))}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const t of this.layers){const r=t.getClassName(),s=t.getConfig(),a=[];for(let n=0;n<t.inboundNodes.length;n++){const r=t.inboundNodes[n],s=wy.nodeKey(t,n);let i={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(e){console.warn(`Layer ${t.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(r.inboundLayers.length>0){const t=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],o=r.tensorIndices[n];let u=e[wy.nodeKey(s,a)];null==u&&(u=0),t.push([s.name,u,o,i])}a.push(t)}}}const i={};i.name=t.name,i.className=r,i.config=s,i.inboundNodes=a,n.push(i)}t.layers=n;const r=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t],s=this.inputLayersNodeIndices[t],a=wy.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[t];r.push([n.name,i,o])}t.inputLayers=r;const s=[];for(let t=0;t<this.outputLayers.length;t++){const n=this.outputLayers[t],r=this.outputLayersNodeIndices[t],a=wy.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[t];s.push([n.name,i,o])}return t.outputLayers=s,t}static fromConfig(t,e,n={},r=!1){const s={},a={};function i(t,e){t.name in a?a[t.name].push(e):a[t.name]=[e]}function o(t,e){const n=[];let r;for(const a of e){const o=a[0],u=a[1],l=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(t,e);const c=s[o];if(c.inboundNodes.length<=u)return void i(t,e);const h=c.inboundNodes[u];n.push(h.outputTensors[l])}n.length>0&&t.apply(Ff(n),r)}function u(t){const n=t.name,a=Bg(t,null!=e.customObjects?e.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a,t.inboundNodes.forEach((t=>{if(!(t instanceof Array))throw new Cf(`Corrupted configuration, expected array for nodeData: ${t}`);i(a,t)}))}const l=e.name,c=e.layers;for(const t of c)u(t);for(;!Uf(a);)for(const t of c){const e=s[t.name];if(e.name in a){const t=a[e.name];delete a[e.name];for(const n of t)o(e,n)}}const h=[],p=[],d=e.inputLayers;for(const t of d){const e=t[0],n=t[1],r=t[2];Rf(e in s);const a=s[e].inboundNodes[n].outputTensors;h.push(a[r])}const f=e.outputLayers;for(const t of f){const e=t[0],n=t[1],r=t[2];Rf(e in s);const a=s[e].inboundNodes[n].outputTensors;p.push(a[r])}return new t({inputs:h,outputs:p,name:l})}get stateful(){if(this._stateful)throw new Cf("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){Ui((()=>{this.layers.forEach((t=>{t.stateful&&t.resetStates()}))}))}}function vy(t,e){return function(t,e,n){const r=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map((t=>null));if(1===r)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==r)throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach((e=>{e in t?n.push(t[e]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`)}(t,e,"classWeight")}async function ky(t,e,n,r){if(null!=e||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=Ui((()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1){const e=1;return t.argMax(e)}if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await e.data());Gi(e);const s=[];return r.forEach((t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);s.push(n[t])})),yc(s,"float32")}return null}function Ny(t,e){return ao(t,e)}function Iy(t,e){let n,r;const s=e;n=s.xs,r=s.ys,j(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${e}`));const a=$y("input",t.inputNames,n),i=$y("output",t.outputNames,r),o=a[0].shape[0];j(a.length===t.inputs.length,(()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(t.inputNames)})`)),j(i.length===t.outputs.length,(()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(t.outputNames)})`));for(let e=0;e<a.length;e++)j(a[e].shape[0]===o,(()=>`Batch size mismatch: input ${t.inputNames[e]} has ${a[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`));for(let e=0;e<i.length;e++)j(i[e].shape[0]===o,(()=>`Batch size mismatch: output ${t.outputNames[e]} has ${i[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`));return{xs:a,ys:i}}function $y(t,e,n){if(n instanceof ns)return[n];if(Array.isArray(n))return j(n.length===e.length,(()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`)),n;{const r=[];for(const s of e){if(null==n[s])throw new Cf(`The feature data generated by the dataset lacks the required ${t} key '${s}'.`);r.push(n[s])}return r}}function Sy(t){return"function"==typeof t.iterator}function Cy(t){j(t>0&&Number.isInteger(t),(()=>`batchSize is required to be a positive integer, but got ${t}`))}function Ty(t,e,n){return null==t?[null]:Array.isArray(t)?t.map((t=>Sm(t,e,n-e))):Sm(t,e,n-e)}function Ey(t,e){return Ui((()=>null==t?null:Array.isArray(t)?t.map((t=>Ey(t,e))):_m(t,"int32"===e.dtype?e:e.toInt())))}function Ay(t,e){const n=[];let r=0,s=null;for(;r<t;)s=r+e,s>=t&&(s=t),n.push([r,s]),r=s;return n}function Ry(t){const e=[];t instanceof ns&&(t=[t]);for(let n=0;n<t.length;++n){const r=t[n];if(1===r.rank)e.push($m(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(r)}}return e}function Dy(t,e){if(null==t)return;const n=[];if(e instanceof ns)n.push(e.id);else if(Array.isArray(e))e.forEach((t=>n.push(t.id)));else if(null!=e)for(const t in e){const r=e[t];n.push(r.id)}const r=[];if(t instanceof ns)-1===n.indexOf(t.id)&&r.push(t);else if(Array.isArray(t))t.forEach((t=>{-1===n.indexOf(t.id)&&r.push(t)}));else if(null!=t)for(const e in t){const s=t[e];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((t=>{t.isDisposed||t.dispose()}))}function Fy(t){return Array.isArray(t)}function _y(t){return!function(t){return t instanceof ns}(t)&&!Fy(t)}function Oy(t,e,n,r=!0,s=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(Fy(t)&&t.length>0)e=!0;else if(_y(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new Cf(`Error when checking model ${s} expected no data, but got ${t}`)}return[]}if(null==t)return e.map((t=>null));let a;if(_y(t)){t=t,a=[];for(const n of e){if(null==t[n])throw new Cf(`No data provided for "${n}". Need data for each key in: ${e}`);a.push(t[n])}}else if(Fy(t)){if((t=t).length!==e.length)throw new Cf(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${t}`);a=t}else{if(t=t,e.length>1)throw new Cf(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${t.shape}`);a=[t]}if(a=Ry(a),null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new Cf(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape ${i.shape}`);for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[t][a];if(null!=u&&u>=0&&o!==u)throw new Cf(`Error when checking ${s}: expected ${e[t]} to have shape [${n[t]}], but got array with shape [${i.shape}].`)}}return a}function My(t,e,n,r=!0,s=""){let a;if(Array.isArray(t)){if(t.length!==e.length)throw new Cf(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);a=t}else{if(e.length>1)throw new Cf(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(t.shape)}.`);a=[t]}if(null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new Cf(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[t][a];if(null!=u&&u!==o)throw new Cf(`Error when checking ${s}: expected ${e[t]} to have shape ${JSON.stringify(n[t])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Ly extends wy{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new Cf("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(t,e,n,r=console.log){const s=function(t){let e=!0;const n=[],r=[];for(const e in t.nodesByDepth)n.push(t.nodesByDepth[e]);for(const t of n){if(t.length>1||1===t.length&&t[0].inboundLayers.length>1){e=!1;break}r.push(...t)}if(e)for(const n of t.layers){let t=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),a=["Layer (type)","Output shape","Param #"];let i;if(s?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((t=>Math.floor(e*t)))),!s){a.push("Receives inputs"),i=[];for(const e in t.nodesByDepth)i.push(...t.nodesByDepth[e])}r("_".repeat(e)),oy(a,n,r),r("=".repeat(e));const o=t.layers;for(let t=0;t<o.length;++t)s?uy(o[t],n,r):ly(o[t],n,i,r),r((t===o.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const u=function(t){let e;return e=null!=t.collectedTrainableWeights?gg(t.collectedTrainableWeights):gg(t.trainableWeights),e}(t),l=gg(t.nonTrainableWeights);r(`Total params: ${u+l}`),r(`Trainable params: ${u}`),r(`Non-trainable params: ${l}`),r("_".repeat(e))}(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>_p.adagrad(.01),Adadelta:()=>_p.adadelta(1,.95,If()),Adam:()=>_p.adam(.001,.9,.999,If()),Adamax:()=>_p.adamax(.002,.9,.999,If(),0),RMSProp:()=>_p.rmsprop(.001,.9,0,If()),SGD:()=>_p.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new Cf(`Unknown Optimizer ${t}`)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof bo))throw new Cf("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new Cf(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const n=t.loss;e=n.map((t=>Xg(t)))}else{const n=Xg(t.loss);this.outputs.forEach((t=>{e.push(n)}))}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new Cf(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(Xg(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let t=0;t<this.outputs.length;++t){const e=this.internalOutputShapes[t],n=this.outputNames[t];this.feedOutputNames.push(n),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[t])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],fm("loss",(()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}}));const r=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map((t=>[]));let n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${t}`);n=t}if(Array.isArray(n))return e.map((t=>n));{const t=[];for(const r of e){let e=n.hasOwnProperty(r)?n[r]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),s=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};fm("metric",(()=>{for(let t=0;t<this.outputs.length;++t)-1===n.indexOf(t)&&(e=>{let n,r,a;for(const i of e){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const e=this.internalOutputShapes[t];let s;1===e[e.length-1]||this.lossFunctions[t]===jg?-1!==["accuracy","acc"].indexOf(i)?r=Yg:-1!==["crossentropy","ce"].indexOf(i)&&(r=Zg):this.lossFunctions[t]===Hg?-1!==["accuracy","acc"].indexOf(i)?r=Qg:-1!==["crossentropy","ce"].indexOf(i)&&(r=ey):-1!==["accuracy","acc"].indexOf(i)?r=Jg:-1!==["crossentropy","ce"].indexOf(i)&&(r=ty),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const t=ry(i);a=t,n=""+sy(i)}let e;fm(n,(()=>{e=a})),s(t,n,e)}})(r[t])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,n={}){const r=null==n.batchSize?32:n.batchSize;Cy(r);const s=this.standardizeUserDataXY(t,e,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const i=this.testFunction;return Ff(this.testLoop(i,a,r,n.verbose,n.steps))}finally{Dy(s[0],t),Dy(s[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const r=null!=(n=n||{}).batches,s=t.testFunction;let a=[];if(n.verbose>0)throw new Tf("Verbose mode is not implemented yet.");j(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof e.next?e:await e.iterator();let o=0,u=0;for(;!r||u<n.batches;){const e=await i.next();if(a=Ui((()=>{if(e.value){const{xs:n,ys:r}=Iy(t,e.value),i=n.concat(r),l=Ui((()=>s(i)));if(Gi(i),0===u)for(let t=0;t<l.length;++t)a.push(yo(0));const c=i[0].shape[0];for(let t=0;t<l.length;++t){const e=l[t],n=a[t];a[t]=Ui((()=>no(a[t],ao(c,e)))),u>0&&Gi(n)}Gi(l),o+=c,++u}return a})),e.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<a.length;++t){const e=a[t];a[t]=so(a[t],o),Gi(e)}return Ff(a)}(this,t,e)}checkNumSamples(t,e,n,r="steps"){let s;if(null!=n){if(s=null,null!=e)throw new Cf(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${e}`)}else{if(null==t)throw new Cf(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return s}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new Cf("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),r=n?e:[e],s=this.retrieveSymbolicTensors(r),a=new dy;if(t instanceof ns&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new Cf(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)a.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new Cf(`No value is provided for the model's input ${e.name}`);a.add(e,n)}const i=gy(s,a);return n?i:i[0]}retrieveSymbolicTensors(t){const e=Af(null,t.length);let n=t.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map((t=>t.name));for(let r=0;r<t.length;++r){const i=a.indexOf(t[r]);if(-1!==i&&(e[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach(((e,r)=>{null==e&&n.push(t[r])})),new Cf(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return e}predictLoop(t,e=32,n=!1){return Ui((()=>{const r=this.checkNumSamples(t);if(n)throw new Tf("Verbose predictLoop() is not implemented yet.");const s=Ay(r,e),a=this.outputs.map((t=>[]));for(let e=0;e<s.length;++e)Ui((()=>{const n=s[e][0],r=s[e][1],a=Ty(t,n,r),i=[];if(Array.isArray(a))for(let t=0;t<a.length;++t)i.push({key:this.inputs[t],value:a[t]});else i.push({key:this.inputs[0],value:a});const o=new dy(i);return gy(this.outputs,o)})).forEach(((t,e)=>a[e].push(t)));return Ff(a.map((t=>yu(t,0))))}))}predict(t,e={}){const n=Ry(t);My(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==e.batchSize?32:e.batchSize;return Cy(r),this.predictLoop(n,r)}finally{Dy(n,t)}}predictOnBatch(t){My(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,r){if(null==this.optimizer_)throw new Sf("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let t=0;t<this.feedOutputShapes.length;++t){const e=this.feedOutputShapes[t];this.feedLossFns[t]===Hg?s.push(e.slice(0,e.length-1).concat([1])):s.push(e)}if(function(t,e,n){const r=Vf(t.map((t=>t.shape[0])));r.sort();const s=Vf(e.map((t=>t.shape[0])));if(s.sort(),r.length>1)throw new Cf(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((t=>t.shape)))}`);if(s.length>1)throw new Cf(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((t=>t.shape)))}`);if(r.length>0&&s.length>0&&!Z(r,s))throw new Cf(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(t=Oy(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=Oy(e,this.feedOutputNames,s,!1,"target")),function(t,e,n){const r=[Wg,jg,Gg];for(let s=0;s<t.length;++s){const a=t[s],i=e[s],o=n[s];if(null!=i){if(i===Gg&&1===a.shape[a.shape.length-1])throw new Cf(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const t=a.shape.slice(1),e=o.slice(1);for(let n=0;n<t.length;++n){const r=t[n],s=e[n];if(null!=s&&r!==s)throw new Cf(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&t[0].shape[0]%r!=0)throw new Cf(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(t,e,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const t=vy(r,this.outputNames);u=[];for(let e=0;e<t.length;++e)u.push(await ky(o[e],null,t[e]))}return[i,o,u]}testLoop(t,e,n,r=0,s){return Ui((()=>{const a=this.checkNumSamples(e,n,s,"steps"),i=[];if(r>0)throw new Tf("Verbose mode is not implemented yet.");if(null!=s)throw new Tf("steps mode in testLoop() is not implemented yet");{const r=Ay(a,n),s=yc(Nm(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],u=Sm(s,a,o-a),l=Ey(e,u),c=t(l);if(0===n)for(let t=0;t<c.length;++t)i.push(yo(0));for(let t=0;t<c.length;++t){const e=c[t];i[t]=no(i[t],ao(o-a,e))}}for(let t=0;t<i.length;++t)i[t]=so(i[t],a)}return i}))}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const r=t[n];let s=r;Df(t,r)>1&&(s+=`_${Df(t.slice(0,n),r)}`),e.push(s)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((t=>t.read()));return[this.optimizer_.minimize((()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const i=new dy(t),o=gy(this.outputs,i,{training:!0});let u;for(let t=0;t<this.lossFunctions.length;++t){let n=(0,this.lossFunctions[t])(r[t],o[t]);null!=s[t]&&(n=Ny(n,s[t]));const a=Vl(n);e.push(a),u=0===t?n:no(u,n)}for(let t=0;t<this.metricsTensors.length;++t){let n;if(this.outputs.length>1&&t<this.outputs.length)n=e[t];else{const e=this.metricsTensors[t][0],s=this.metricsTensors[t][1];n=Vl(e(r[s],o[s]))}Hi(n),a.push(n)}return u=Vl(u),this.calculateLosses().forEach((t=>{u=no(u,t)})),u}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=t=>Ui((()=>{const e=[];let n;const r=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let t=0;t<this.inputs.length;++t)a.push({key:this.inputs[t],value:r[t]});const i=new dy(a),o=gy(this.outputs,i);for(let t=0;t<this.lossFunctions.length;++t){const r=this.lossFunctions[t],a=Vl(r(s[t],o[t]));n=0===t?a:no(n,a),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],r=this.metricsTensors[t][1],a=Vl(n(s[r],o[r]));e.push(a)}return e}))}async fit(t,e,n={}){return async function(t,e,n,r={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,i,o,u,l,c;t.isTraining=!0;try{const h=null==r.batchSize?32:r.batchSize;Cy(h);const p=!1,d=await t.standardizeUserData(e,n,r.sampleWeight,r.classWeight,p,h);s=d[0],a=d[1],c=d[2];let f,m=!1;if(null!=r.validationData&&r.validationData.length>0){if(m=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Tf("validationData including sample weights is not supported yet."):new Cf(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);i=r.validationData[0],o=r.validationData[1];const e=!0,n=await t.standardizeUserData(i,o,null,null,e,h);u=n[0],l=n[1],f=u.concat(l)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){m=!0;const t=Math.floor(s[0].shape[0]*(1-r.validationSplit)),e=s[0].shape[0];u=Ty(s,t,e),s=Ty(s,0,t),l=Ty(a,t,e),a=Ty(a,0,t),f=u.concat(l)}else null!=r.validationSteps&&(m=!0);const g=s.concat(a).concat(c);t.checkTrainableWeightsConsistency();const y=t.makeTrainFunction(),b=t.getDedupedMetricsNames();let x,w;m?(t.makeTestFunction(),x=t.testFunction,w=b.slice().concat(b.map((t=>"val_"+t)))):(x=null,f=[],w=b.slice());const v=Mg(r.callbacks,r.yieldEvery);return await async function(t,e,n,r,s,a,i,o,u,l,c,h,p,d,f){null==s&&(s=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;null!=u&&null!=l&&(m=!0);const g=t.checkNumSamples(n,s,d,"steps_per_epoch");let y;null!=g&&(y=Nm(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=zg(o,i,a,p,g,d,s,m,h);b.setModel(t),t.history=x,await b.onTrainBegin(),t.stopTraining_=!1;for(let i=p;i<a;++i){await b.onEpochBegin(i);const a={};{if("batch"===c)throw new Tf("batch shuffling is not implemneted yet");c&&P(y);const i=yc(y),o=Ay(g,s);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),Ui((()=>{const p=o[c][0],d=o[c][1],f=Sm(i,p,d-p);h.batch=c,h.size=d-p;const g=Ey(n,f),y=e(g);for(let t=0;t<r.length;++t){const e=r[t],n=y[t];h[e]=n,Hi(n)}if(c===o.length-1&&m){const e=t.testLoop(u,l,s);for(let t=0;t<r.length;++t){const n=r[t],s=e[t];Hi(s),a["val_"+n]=s}}})),await b.onBatchEnd(c,h),Eg(h),t.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,a),t.stopTraining_)break}return await b.onTrainEnd(),await t.history.syncData(),t.history}(t,y,g,b,h,r.epochs,r.verbose,v,x,f,r.shuffle,w,r.initialEpoch,null)}finally{t.isTraining=!1,Dy(s,e),Dy(a,n),Dy(u,i),Dy(l,o),null!=c&&Gi(c)}}(this,t,e,n)}async fitDataset(t,e){return async function(t,e,n){const r=null!=n.batchesPerEpoch;if(j(null!=t.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),j(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),j(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),j(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),j(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const s=null!=n.validationData;let a,i;if(s)if(Sy(n.validationData))j(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const t=function(t){if(3===t.length)throw new Tf("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);a=t.xs,i=t.ys}const o=t.makeTrainFunction(),u=t.getDedupedMetricsNames();let l;l=s?u.slice().concat(u.map((t=>"val_"+t))):u.slice();const c=Mg(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=zg(c,h,n.epochs,null,null,function(t,e){let n=null;return null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size),n}(e,n),null,s,l);p.setModel(t),t.history=d,await p.onTrainBegin(),t.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await e.iterator();for(;f<n.epochs;){const l={};await p.onEpochBegin(f);let c=0,h=0;for(r||(m=await e.iterator());!r||c<n.batchesPerEpoch;){const e=await m.next();if(r&&e.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:r,ys:s}=Iy(t,e.value),a={};a.batch=h,a.size=r[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const e=vy(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)i.push(await ky(s[t],null,e[t]))}const l=r.concat(s).concat(i),d=o(l);Gi(l);for(let t=0;t<u.length;++t){const e=u[t],n=d[t];a[e]=n,Hi(n)}await p.onBatchEnd(h,a),Eg(a),h++,c++}if(r?c>=n.batchesPerEpoch:e.done){if(s){let e;e=Sy(n.validationData)?_f(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):_f(t.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)l[`val_${t.metricsNames[n]}`]=e[n]}break}if(t.stopTraining_)break}if(await p.onEpochEnd(f,l),f++,t.stopTraining_)break}return await p.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const t of a){const e=await t.data();i.push(e[0])}return Gi(a),Ff(i)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let t=0;t<r.length;++t)n&&!r[t].trainable||e.push({name:r[t].originalName,tensor:s[t]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=Wi().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-Wi().numTensors}return t}getLossIdentifiers(){let t;if("string"==typeof this.loss)t=Of(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!=typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map((t=>Of(t)))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const r of e){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");t[r]=Of(n[r])}}return t}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Of(sy(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((t=>Of(sy(t))));{const t={};for(const e in this.metrics)t[e]=Of(sy(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=Bg(hy(t.optimizer_config));let n,r;if("string"==typeof t.loss)n=Mf(t.loss);else if(Array.isArray(t.loss))n=t.loss.map((t=>Mf(t)));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=Mf(t.loss[e])}if(Array.isArray(t.metrics))r=t.metrics.map((t=>Mf(t)));else if(null!=t.metrics){r={};for(const e in t.metrics)r[e]=Mf(t.metrics[e])}this.compile({loss:n,metrics:r,optimizer:e})}async save(t,e){if("string"==typeof t){const e=Ks(t);if(0===e.length)throw new Cf(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Cf(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Cf("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Ms(this.getNamedWeights(e)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.7.0",convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:s}=await Ms(await this.optimizer.getWeights(),t);n.specs.push(...s),n.data=Ws([n.data,e])}if(null!=this.userDefinedMetadata){const t=!0;ay(this.userDefinedMetadata,this.name,t),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,t.save(r)}setUserDefinedMetadata(t){ay(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}Ly.className="Model",Ni(Ly);class zy extends Ly{}zy.className="Functional",Ni(zy);class By extends Ly{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:hg("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some((t=>t<0)))throw new Cf(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`)}add(t){const e=t instanceof By||t instanceof Ly;let n;if(e){if(n=t,1!==n.outputs.length)throw new Cf("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Cf("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new Cf("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=function(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new Cf("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;return null==n&&(n="float32"),new Cg({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new Cf(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new Cf("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=Sg(this.outputs[0])}this.inboundNodes=[],new Ng({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Af(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((t=>t.shape)),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(mg(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Ly({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new Sf("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new Sf("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new Sf("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new Sf("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},r=!1){let s,a={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new Cf("Legacy serialization format not supported yet.");s=e}else j(null!=e.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),s=e.layers,delete e.layers,a=e;const i=new t(a);if(!(i instanceof By))throw new Tf(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const t of s){const e=Bg(t,void 0,r);r&&e.setFastWeightInitDuringBuild(!0),i.add(e)}return i}set stopTraining(t){if(null==this.model)throw new Cf("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new Cf("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}By.className="Sequential",Ni(By);class Py extends vi{getConfig(){return{}}}class Wy extends Py{apply(t,e=1){return function(t,e=1){if(1!==e)throw new Tf(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return Qu(t)}(t,e)}}Wy.className="elu",Ni(Wy);class Vy extends Py{apply(t){return Ec(t)}}Vy.className="selu",Ni(Vy);class Uy extends Py{apply(t){return wc(t)}}Uy.className="relu",Ni(Uy);class Gy extends Py{apply(t){return Ui((()=>Gl(6,wc(t))))}}Gy.className="relu6",Ni(Gy);class Hy extends Py{apply(t){return t}}Hy.className="linear",Ni(Hy);class jy extends Py{apply(t){return bu(t)}}jy.className="sigmoid",Ni(jy);class qy extends Py{apply(t){return function(t){return Ui((()=>{const e=no(.5,ao(.2,t));return Au(e,0,1)}))}(t)}}qy.className="hardSigmoid",Ni(qy);class Ky extends Py{apply(t){return Cl(t)}}Ky.className="softplus",Ni(Ky);class Xy extends Py{apply(t){return function(t){return Ui((()=>so(t,$o(t).add(1))))}(t)}}Xy.className="softsign",Ni(Xy);class Yy extends Py{apply(t){return wu(t)}}Yy.className="tanh",Ni(Yy);class Jy extends Py{apply(t,e=-1){return Bc(t,e)}}Jy.className="softmax",Ni(Jy);class Zy extends Py{apply(t,e=-1){return Rl(t,e)}}Zy.className="logSoftmax",Ni(Zy);class Qy extends Py{apply(t,e=1){return Ui((()=>bu(t.mul(e)).mul(t)))}}function tb(t){return t.getClassName()}function eb(t,e={}){return Pf(t,ki.getMap().classNameMap,e,"activation")}function nb(t){if(null==t){return eb({className:"linear",config:{}})}if("string"==typeof t){const e={};return e.className=t,e.config={},eb(e)}return t instanceof Py?t:eb(t)}Qy.className="swish",Ni(Qy);class rb extends vi{}class sb extends rb{constructor(t){super(),function(t){if(null!=t&&"object"!=typeof t)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${t}`)}(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return Ui((()=>{let e=Pl([1]);return this.hasL1&&(e=no(e,Al(ao(this.l1,$o(t))))),this.hasL2&&(e=no(e,Al(ao(this.l2,Om(t))))),e.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}sb.className="L1L2",Ni(sb);const ab={l1l2:"L1L2"};function ib(t){return zf(t)}function ob(t,e={}){return Pf(t,ki.getMap().classNameMap,e,"regularizer")}function ub(t){return null==t?null:"string"==typeof t?ob({className:t in ab?ab[t]:t,config:{}}):t instanceof rb?t:ob(t)}class lb extends $g{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=fg(t);let n=wc(t);return null!=this.maxValue&&(n=Au(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}lb.className="ReLU",Ni(lb);class cb extends $g{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=fg(t);return xl(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}cb.className="LeakyReLU",Ni(cb);class hb extends $g{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=og(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=ub(t.alphaRegularizer),this.alphaConstraint=sm(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!=typeof t.sharedAxes)throw new Cf(`Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=mg(t)).slice(1);if(null!=this.sharedAxes)for(const t of this.sharedAxes)e[t-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let e=1;e<t.length;++e)n[e]=t[e];this.inputSpec=[new wg({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=fg(t),oc(t,this.alpha.read())}getConfig(){const t={alphaInitializer:ig(this.alphaInitializer),alphaRegularizer:ib(this.alphaRegularizer),alphaConstraint:nm(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}hb.className="PReLU",Ni(hb);class pb extends $g{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new Tf(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=fg(t);return Qu(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}pb.className="ELU",Ni(pb);class db extends $g{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=fg(t);return n.mul(Im(n.greater(this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}db.className="ThresholdedReLU",Ni(db);class fb extends $g{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new Jy).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=fg(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function mb(t,e,n){if("number"==typeof t)return Af(t,e);if(t.length!==e)throw new Cf(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let s=0;s<e;++s){const a=t[s];if((r=a)!==parseInt(r.toString(),10))throw new Cf(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number ${a}`)}return t;var r}function gb(t,e,n,r,s=1){if(null==t)return t;let a;return a="same"===n?t:t-(e+(e-1)*(s-1))+1,Math.floor((a+r-1)/r)}function yb(t,e,n,r){if(null==t)return null;if("valid"===r)t=t*e+km([n-e,0]);else{if("same"!==r)throw new Cf(`Unsupport padding mode: ${r}.`);t*=e}return t}function bb(t,e){return Ui((()=>(cm(e),"channelsFirst"===e?Ya(t,[0,2,3,1]):t)))}function xb(t,e){return Ui((()=>(cm(e),"channelsFirst"===e?Ya(t,[0,2,3,4,1]):t)))}function wb(t,e,n,r=[1,1],s="valid",a,i,o=null){return Ui((()=>{if(null==a&&(a="channelsLast"),cm(a),3!==t.rank&&4!==t.rank)throw new Cf(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new Cf(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let u=bb(t,a);if("causal"===s)throw new Tf("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=Wh({x:u,filter:e,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(u=Ya(u,[0,3,1,2])),u}))}fb.className="Softmax",Ni(fb);class vb extends $g{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",vb.verifyArgs(e),this.rank=t,jf(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Tf(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=mb(e.kernelSize,t,"kernelSize"),this.strides=mb(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,hm(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,cm(this.dataFormat),this.activation=nb(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=og(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=sm(e.biasConstraint),this.biasRegularizer=ub(e.biasRegularizer),this.activityRegularizer=ub(e.activityRegularizer),this.dilationRate=mb(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Cf(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Cf(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Cf(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(t){if(Rf("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!Hf(t.kernelSize,"number",1,3))throw new Cf(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:tb(this.activation),useBias:this.useBias,biasInitializer:ig(this.biasInitializer),biasRegularizer:ib(this.biasRegularizer),activityRegularizer:ib(this.activityRegularizer),biasConstraint:nm(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class kb extends vb{constructor(t,e){super(t,e),this.kernel=null,kb.verifyArgs(e),this.filters=e.filters,jf(this.filters,"filters"),this.kernelInitializer=og(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=sm(e.kernelConstraint),this.kernelRegularizer=ub(e.kernelRegularizer)}build(t){t=mg(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new Cf(`The channel dimension of the input should be defined. Found ${t[e]}`);const n=t[e],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return Ui((()=>{let e;t=fg(t);const n=null==this.bias?null:this.bias.read(),r=Kf(this.activation.getClassName());if(null!=r&&2===this.rank)e=wb(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)e=function(t,e,n,r=1,s="valid",a,i=1){return Ui((()=>{if(null==a&&(a="channelsLast"),cm(a),3!==t.shape.length)throw new Cf(`The input of a conv1dWithBias operation should be 3, but is ${t.shape.length} instead.`);if(3!==e.shape.length)throw new Cf(`The kernel for a conv1dWithBias operation should be 3, but is ${e.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Cf(`The bias for a conv1dWithBias operation should be 1, but is ${e.shape.length} instead`);if("channelsFirst"===a&&(t=Ya(t,[0,2,1])),"causal"===s)throw new Tf("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Mu(t,e,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=Lm(o,n)),o}))}(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=wb(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Tf("convolutions greater than 3D are not implemented yet.");e=function(t,e,n,r=[1,1,1],s="valid",a,i){return Ui((()=>{if(null==a&&(a="channelsLast"),cm(a),4!==t.rank&&5!==t.rank)throw new Cf(`conv3dWithBias expects input to be of rank 4 or 5, but received ${t.rank}.`);if(4!==e.rank&&5!==e.rank)throw new Cf(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${t.rank}.`);let o=xb(t,a);if("causal"===s)throw new Tf("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Bu(o,e,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=Lm(o,n)),"channelsFirst"===a&&(o=Ya(o,[0,4,1,2,3])),o}))}(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e}))}computeOutputShape(t){t=mg(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let t=0;t<n.length;++t){const r=gb(n[t],this.kernelSize[t],this.padding,this.strides[t],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[t]);e.push(r)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:ig(this.kernelInitializer),kernelRegularizer:ib(this.kernelRegularizer),kernelConstraint:nm(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new Cf(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}}class Nb extends kb{constructor(t){super(2,t),Nb.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!Hf(t.kernelSize,"number",1,2))throw new Cf(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}Nb.className="Conv2D",Ni(Nb);class Ib extends kb{constructor(t){super(3,t),Ib.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new Cf(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}Ib.className="Conv3D",Ni(Ib);class $b extends Nb{constructor(t){if(super(t),this.inputSpec=[new wg({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Cf(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(4!==(t=mg(t)).length)throw new Cf("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new Cf("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new wg({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return Ui((()=>{let e=fg(t);if(4!==e.shape.length)throw new Cf(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${e.shape.length}`);const n=e.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const i=n[s],o=n[a],u=this.kernelSize[0],l=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[r,yb(i,c,u,this.padding),yb(o,h,l,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=Ya(e,[0,2,3,1]));let d=zu(e,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Ya(d,[0,3,1,2])),null!=this.bias&&(d=Lm(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(t){const e=(t=mg(t)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],u=this.strides[1];return e[n]=this.filters,e[r]=yb(e[r],o,a,this.padding),e[s]=yb(e[s],u,i,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}$b.className="Conv2DTranspose",Ni($b);class Sb extends kb{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new Cf("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new Cf("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new Cf(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(e.padding)}`);this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=og(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=ub(e.depthwiseRegularizer),this.depthwiseConstraint=sm(e.depthwiseConstraint),this.pointwiseInitializer=og(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=ub(e.pointwiseRegularizer),this.pointwiseConstraint=sm(e.pointwiseConstraint)}build(t){if((t=mg(t)).length<this.rank+2)throw new Cf(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(t)}`);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new Cf(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(t[e])}`);const n=t[e],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let t=0;t<this.rank;++t)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new wg({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return Ui((()=>{let e;if(t=fg(t),1===this.rank)throw new Tf("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=Ya(t,[0,2,3,1])),e=Ac(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=Lm(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=Ya(e,[0,3,1,2])),e}))}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=ig(this.depthwiseInitializer),t.pointwiseInitializer=ig(this.pointwiseInitializer),t.depthwiseRegularizer=ib(this.depthwiseRegularizer),t.pointwiseRegularizer=ib(this.pointwiseRegularizer),t.depthwiseConstraint=nm(this.depthwiseConstraint),t.pointwiseConstraint=nm(this.pointwiseConstraint),t}}Sb.className="SeparableConv";class Cb extends Sb{constructor(t){super(2,t)}}Cb.className="SeparableConv2D",Ni(Cb);class Tb extends kb{constructor(t){super(1,t),Tb.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!Hf(t.kernelSize,"number",1,1))throw new Cf(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}Tb.className="Conv1D",Ni(Tb);class Eb extends $g{constructor(t){super(t),"number"==typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return Ui((()=>{if(t=fg(t),"channelsLast"===this.dataFormat){const e=Tm(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Tm(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=Tm(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Tm(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}Eb.className="Cropping2D",Ni(Eb);class Ab extends $g{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return Ui((()=>{let e=fg(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=Ya(e,[0,2,3,1]);const t=this.size[0]*n[2],r=this.size[1]*n[3],s=e.resizeNearestNeighbor([t,r]);return Ya(s,[0,3,1,2])}{const t=this.size[0]*n[1],r=this.size[1]*n[2];return e.resizeNearestNeighbor([t,r])}}))}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}Ab.className="UpSampling2D",Ni(Ab);class Rb extends vb{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=og(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=sm(t.depthwiseConstraint),this.depthwiseRegularizer=ub(t.depthwiseRegularizer)}build(t){if((t=mg(t)).length<4)throw new Cf(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new Cf(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Ui((()=>{let e=function(t,e,n=[1,1],r="valid",s,a){return Ui((()=>{null==s&&(s="channelsLast"),cm(s);let i=bb(t,s);if(4!==t.rank)throw new Cf(`Input for depthwiseConv2d is required to be 4-D, but is instead ${t.rank}-D`);if(4!==e.rank)throw new Cf(`depthwiseKernel is required to be 4-D, but is instead ${e.rank}-D`);return i=ju(i,e,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=Ya(i,[0,3,1,2])),i}))}(t=fg(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=Lm(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e}))}computeOutputShape(t){t=mg(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=gb(e,this.kernelSize[0],this.padding,this.strides[0]),a=gb(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],r,s,a]:[t[0],s,a,r]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=ig(this.depthwiseInitializer),t.depthwiseRegularizer=ib(this.depthwiseRegularizer),t.depthwiseConstraint=nm(this.depthwiseRegularizer),t}}function Db(t,e,n,r){if(Array.isArray(t)){if(null!=e||null!=n)throw new Cf("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=t.slice(t.length-r,t.length),t=t.slice(0,t.length-r)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function s(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=s(e),constants:n=s(n)}}function Fb(t,e,n,r=!1,s,a,i=!1,o=!1){return Ui((()=>{const u=e.shape.length;if(u<3)throw new Cf(`Input should be at least 3D, but is ${u}D.`);const l=[1,0].concat(Nm(2,u));if(e=Ya(e,l),null!=a)throw new Tf("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===u-1&&(s=nl(s,-1)),s=Ya(s,l)),r&&(e=kc(e,0),null!=s&&(s=kc(s,0)));const c=[];let h,p=n;const d=e.shape[0],f=ih(e);let m,g;null!=s&&(m=ih(s));for(let e=0;e<d;++e){const n=f[e],r=Ui((()=>t(n,p)));if(null==s)h=r[0],p=r[1];else{const t=Ui((()=>{const t=m[e],n=Zl(t).sub(t);return{output:r[0].mul(t).add(p[0].mul(n)),newStates:p.map(((e,s)=>r[1][s].mul(t).add(e.mul(n))))}}));h=t.output,p=t.newStates}o&&c.push(h)}return o&&(g=Kc(c,1)),[h,g,p]}))}Rb.className="DepthwiseConv2D",Ni(Rb);class _b extends $g{constructor(t){let e;if(super(t),null==t.cell)throw new Cf("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new Vb({cells:t.cell}):t.cell,null==e.stateSize)throw new Cf("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new wg({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Nm(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((t=>null)):this.states_}setStates(t){this.states_=t}computeOutputShape(t){pg(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let r;if(r=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const r of e)n.push([t[0],r]);return[r].concat(n)}return r}computeMask(t,e){return Ui((()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map((t=>null));return[t].concat(e)}return t}))}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new Tf("Constants support is not implemented in RNN yet.");pg(t)&&(t=t[0]),t=t;const e=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new wg({shape:[e,null,...n]});const r=[t[0]].concat(t.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!Z(this.stateSpec.map((t=>t.shape[t.shape.length-1])),s))throw new Cf(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=s.map((t=>new wg({shape:[null,t]})));this.stateful&&this.resetStates()}resetStates(t,e=!1){Ui((()=>{if(!this.stateful)throw new $f("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Cf("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>Pl([n,t]))):this.states_=[Pl([n,this.cell.stateSize])];else if(null==t)Gi(this.states_),null!=this.keptStates&&(Gi(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>Pl([n,t]))):this.states_[0]=Pl([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new Cf(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);!0===e?this.keptStates.push(this.states_.slice()):Gi(this.states_);for(let e=0;e<this.states_.length;++e){const r=t[e],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,a=[n,s];if(!Z(r.shape,a))throw new Cf(`State ${e} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[e]=r}}this.states_=this.states_.map((t=>Hi(t.clone())))}))}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=Db(t,n,r,this.numConstants);t=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){e.initialState=n,a=a.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new wg({shape:t.shape}));i=i.concat(this.stateSpec)}if(null!=r&&(e.constants=r,a=a.concat(r),this.numConstants=r.length),a[0]instanceof vg){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return Ui((()=>{const n=null==e?null:e.mask,r=null==e?null:e.training;let s=null==e?null:e.initialState;t=fg(t),null==s&&(s=this.stateful?this.states_:this.getInitialState(t));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new Cf(`RNN Layer has ${a} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=Fb(((t,e)=>{const n=this.cell.call([t].concat(e),i);return[n[0],n.slice(1)]}),t,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=o[0],l=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?l:u;return this.returnState?[h].concat(c):h}))}getInitialState(t){return Ui((()=>{let e=Pl(t.shape);return e=Al(e,[1,2]),e=$m(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((t=>t>1?Rm(e,[1,t]):e)):this.cell.stateSize>1?[Rm(e,[1,this.cell.stateSize])]:[e]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t=super.getConfig(),e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(e.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===_b.className&&(e.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,t,e)}static fromConfig(t,e,n={}){const r=Bg(e.cell,n);return new t(Object.assign(e,{cell:r}))}}_b.className="RNN",Ni(_b);class Ob extends $g{}class Mb extends Ob{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,jf(this.units,"units"),this.activation=nb(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=og(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=og(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=og(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=ub(t.kernelRegularizer),this.recurrentRegularizer=ub(t.recurrentRegularizer),this.biasRegularizer=ub(t.biasRegularizer),this.kernelConstraint=sm(t.kernelConstraint),this.recurrentConstraint=sm(t.recurrentConstraint),this.biasConstraint=sm(t.biasConstraint),this.dropout=vm([1,km([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=vm([1,km([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=mg(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Ui((()=>{if(2!==(t=t).length)throw new Cf(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const r=null!=e.training&&e.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ub({ones:()=>Zl(t),rate:this.dropout,training:r})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ub({ones:()=>Zl(n),rate:this.recurrentDropout,training:r}));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=Fm(null!=a?ao(t,a):t,this.kernel.read()),null!=this.bias&&(s=Lm(s,this.bias.read())),null!=i&&(n=ao(n,i));let o=no(s,Fm(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:tb(this.activation),useBias:this.useBias,kernelInitializer:ig(this.kernelInitializer),recurrentInitializer:ig(this.recurrentInitializer),biasInitializer:ig(this.biasInitializer),kernelRegularizer:ib(this.kernelRegularizer),recurrentRegularizer:ib(this.recurrentRegularizer),biasRegularizer:ib(this.biasRegularizer),activityRegularizer:ib(this.activityRegularizer),kernelConstraint:nm(this.kernelConstraint),recurrentConstraint:nm(this.recurrentConstraint),biasConstraint:nm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},t,e)}}Mb.className="SimpleRNNCell",Ni(Mb);class Lb extends _b{constructor(t){t.cell=new Mb(t),super(t)}call(t,e){return Ui((()=>{null!=this.cell.dropoutMask&&(Gi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Gi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}static fromConfig(t,e){return new t(e)}}Lb.className="SimpleRNN",Ni(Lb);class zb extends Ob{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new Cf("GRUCell does not support reset_after parameter set to true.");this.units=t.units,jf(this.units,"units"),this.activation=nb(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=nb(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=og(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=og(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=og(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=ub(t.kernelRegularizer),this.recurrentRegularizer=ub(t.recurrentRegularizer),this.biasRegularizer=ub(t.biasRegularizer),this.kernelConstraint=sm(t.kernelConstraint),this.recurrentConstraint=sm(t.recurrentConstraint),this.biasConstraint=sm(t.biasConstraint),this.dropout=vm([1,km([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=vm([1,km([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=mg(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Ui((()=>{if(2!==(t=t).length)throw new Cf(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);const n=null!=e.training&&e.training;let r=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ub({ones:()=>Zl(t),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ub({ones:()=>Zl(r),rate:this.recurrentDropout,training:n,count:3}));const s=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,u;0<this.dropout&&this.dropout<1&&(t=ao(t,s[0]));let l=Fm(t,this.kernel.read());this.useBias&&(l=Lm(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=ao(r,a[0]));const c=this.recurrentKernel.read(),[h,p]=Gc(c,[2*this.units,this.units],c.rank-1),d=Fm(r,h),[f,m,g]=Gc(l,3,l.rank-1),[y,b]=Gc(d,2,d.rank-1);i=this.recurrentActivation.apply(no(f,y)),o=this.recurrentActivation.apply(no(m,b));const x=Fm(ao(o,r),p);u=this.activation.apply(no(g,x));const w=no(ao(i,r),ao(no(1,Sl(i)),u));return[w,w]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:tb(this.activation),recurrentActivation:tb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ig(this.kernelInitializer),recurrentInitializer:ig(this.recurrentInitializer),biasInitializer:ig(this.biasInitializer),kernelRegularizer:ib(this.kernelRegularizer),recurrentRegularizer:ib(this.recurrentRegularizer),biasRegularizer:ib(this.biasRegularizer),activityRegularizer:ib(this.activityRegularizer),kernelConstraint:nm(this.kernelConstraint),recurrentConstraint:nm(this.recurrentConstraint),biasConstraint:nm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},t,e)}}zb.className="GRUCell",Ni(zb);class Bb extends _b{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new zb(t),super(t)}call(t,e){return Ui((()=>{null!=this.cell.dropoutMask&&(Gi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Gi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Bb.className="GRU",Ni(Bb);class Pb extends Ob{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,jf(this.units,"units"),this.activation=nb(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=nb(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=og(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=og(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=og(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=ub(t.kernelRegularizer),this.recurrentRegularizer=ub(t.recurrentRegularizer),this.biasRegularizer=ub(t.biasRegularizer),this.kernelConstraint=sm(t.kernelConstraint),this.recurrentConstraint=sm(t.recurrentConstraint),this.biasConstraint=sm(t.biasConstraint),this.dropout=vm([1,km([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=vm([1,km([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=mg(t))[t.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;r=new((e=class extends Vm{apply(e,r){const s=t.apply([n]),a=(new Gm).apply([n]),i=t.apply([2*n]);return Am(Am(s,a),i)}}).className="CustomInit",e)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return Ui((()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new Cf(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let r=t[1];const s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ub({ones:()=>Zl(t),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ub({ones:()=>Zl(r),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,u,l,c;0<this.dropout&&this.dropout<1&&(t=ao(t,a[0]));let h=Fm(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=ao(r,i[0])),h=no(h,Fm(r,this.recurrentKernel.read())),this.useBias&&(h=Lm(h,this.bias.read()));const[p,d,f,m]=Gc(h,4,h.rank-1);o=this.recurrentActivation.apply(p),u=this.recurrentActivation.apply(d),l=no(ao(u,s),ao(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=ao(c,this.activation.apply(l));return[g,g,l]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:tb(this.activation),recurrentActivation:tb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ig(this.kernelInitializer),recurrentInitializer:ig(this.recurrentInitializer),biasInitializer:ig(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:ib(this.kernelRegularizer),recurrentRegularizer:ib(this.recurrentRegularizer),biasRegularizer:ib(this.biasRegularizer),activityRegularizer:ib(this.activityRegularizer),kernelConstraint:nm(this.kernelConstraint),recurrentConstraint:nm(this.recurrentConstraint),biasConstraint:nm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},t,e)}}Pb.className="LSTMCell",Ni(Pb);class Wb extends _b{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Pb(t),super(t)}call(t,e){return Ui((()=>{null!=this.cell.dropoutMask&&(Gi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Gi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Wb.className="LSTM",Ni(Wb);class Vb extends Ob{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return Ui((()=>{let n=(t=t).slice(1);const r=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?r.push(n.splice(0,t.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[t[0]].concat(n):[a[0]].concat(n),a=o.call(a,e),s.push(a.slice(1))}n=[];for(const t of s.slice().reverse())n.push(...t);return[a[0]].concat(n)}))}build(t){let e;pg(t)&&(t=t[0]),t=t,this.cells.forEach(((n,r)=>{fm(`RNNCell_${r}`,(()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]}))})),this.built=!0}getConfig(){const t=super.getConfig(),e={cells:this.cells.map((t=>({className:t.getClassName(),config:t.getConfig()})))};return Object.assign({},t,e)}static fromConfig(t,e,n={}){const r=[];for(const t of e.cells)r.push(Bg(t,n));return new t({cells:r})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return bg(t)}setWeights(t){const e=[];for(const n of this.cells){const r=n.weights.length,s=t.splice(r);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],s[t]])}xg(e)}}function Ub(t){const{ones:e,rate:n,training:r=!1,count:s=1}=t,a=()=>zm(e(),n),i=()=>Bm(a,e,r);return!s||s<=1?Hi(i().clone()):Array(s).fill(void 0).map(i).map((t=>Hi(t.clone())))}Vb.className="StackedRNNCells",Ni(Vb);var Gb,Hb;class jb extends _b{constructor(t){if(t.unroll)throw new Tf("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new Tf("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new wg({ndim:5})]}call(t,e){return Ui((()=>{if(null!=this.cell.dropoutMask&&(Gi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Gi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new Cf("ConvRNN2D cell does not support constants");const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return Ui((()=>{const{stateSize:e}=this.cell,n=t.shape,r=this.computeSingleOutputShape(n),s=Pl([r[0],...r.slice(2)]);return Array.isArray(e)?Array(e.length).fill(s):[s]}))}resetStates(t,e=!1){Ui((()=>{if(!this.stateful)throw new $f("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new Cf("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Pl(s))):this.states_=[Pl(s)];else if(null==t)Gi(this.states_),null!=this.keptStates&&(Gi(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Pl(s))):this.states_[0]=Pl(s);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new Cf(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e?this.keptStates.push(this.states_.slice()):Gi(this.states_);for(let e=0;e<this.states_.length;++e){const n=t[e],r=s;if(!Z(n.shape,r))throw new Cf(`State ${e} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[e]=n}}this.states_=this.states_.map((t=>Hi(t.clone())))}))}computeSingleOutputShape(t){const{dataFormat:e,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===e,u=t[o?3:2],l=t[o?4:3],c=gb(u,r[0],s,a[0],i[0]),h=gb(l,r[1],s,a[1],i[1]);return[...t.slice(0,2),...o?[n,c,h]:[c,h,n]]}}jb.className="ConvRNN2D";class qb extends Pb{constructor(t){const{filters:e,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:i}=t;super(Object.assign({},t,{units:e})),this.filters=e,jf(this.filters,"filters"),this.kernelSize=mb(n,2,"kernelSize"),this.kernelSize.forEach((t=>jf(t,"kernelSize"))),this.strides=mb(r||1,2,"strides"),this.strides.forEach((t=>jf(t,"strides"))),this.padding=s||"valid",hm(this.padding),this.dataFormat=a||"channelsLast",cm(this.dataFormat),this.dilationRate=mb(i||1,2,"dilationRate"),this.dilationRate.forEach((t=>jf(t,"dilationRate")))}build(t){var e;t=mg(t);const n="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[n])throw new Cf(`The channel dimension of the input should be defined. Found ${t[n]}`);const r=t[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let t;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;t=new((e=class extends Vm{apply(t,e){return Em([n.apply([r]),Wl([r]),n.apply([2*r])])}}).className="CustomInit",e)}else t=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,t,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return Ui((()=>{if(3!==t.length)throw new Cf(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);const n=e.training||!1,r=t[0],s=t[1],a=t[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ub({ones:()=>Zl(r),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(t,e,n)=>e&&e[n]?ao(e[n],t):t;let u=o(r,i,0),l=o(r,i,1),c=o(r,i,2),h=o(r,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ub({ones:()=>Zl(s),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(s,p,0),f=o(s,p,1),m=o(s,p,2),g=o(s,p,3);const[y,b,x,w]=Gc(this.kernel.read(),4,3),[v,k,N,I]=this.useBias?Gc(this.bias.read(),4):[null,null,null,null];u=this.inputConv(u,y,v,this.padding),l=this.inputConv(l,b,k,this.padding),c=this.inputConv(c,x,N,this.padding),h=this.inputConv(h,w,I,this.padding);const[$,S,C,T]=Gc(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,$),f=this.recurrentConv(f,S),m=this.recurrentConv(m,C),g=this.recurrentConv(g,T);const E=this.recurrentActivation.apply(no(u,d)),A=this.recurrentActivation.apply(no(l,f)),R=no(ao(A,a),ao(E,this.activation.apply(no(c,m)))),D=ao(this.recurrentActivation.apply(no(h,g)),this.activation.apply(R));return[D,D,R]}))}getConfig(){const t=super.getConfig(),{units:e}=t,n=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(t);s<r.length;s++)e.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(t,r[s])&&(n[r[s]]=t[r[s]])}return n}(t,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,r)}inputConv(t,e,n,r){const s=Ou(t,e,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Lm(s,n,this.dataFormat):s}recurrentConv(t,e){return Ou(t,e,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}qb.className="ConvLSTM2DCell",Ni(qb);class Kb extends jb{constructor(t){const e=new qb(t);super(Object.assign({},t,{cell:e}))}static fromConfig(t,e){return new t(e)}}Kb.className="ConvLSTM2D",Ni(Kb);class Xb extends $g{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let t=0;t<this.noiseShape.length;++t)n.push(null==this.noiseShape[t]?e[t]:this.noiseShape[t]);return n}call(t,e){return Ui((()=>{this.invokeCallHook(t,e);const n=fg(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,r=this.getNoiseShape(n);return Bm((()=>zm(n,this.rate,r,this.seed)),(()=>n),t)}return t}))}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}Xb.className="Dropout",Ni(Xb);class Yb extends Xb{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}Yb.className="SpatialDropout1D",Ni(Yb);class Jb extends $g{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,jf(this.units,"units"),this.activation=nb(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=og(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=og(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=sm(t.kernelConstraint),this.biasConstraint=sm(t.biasConstraint),this.kernelRegularizer=ub(t.kernelRegularizer),this.biasRegularizer=ub(t.biasRegularizer),this.activityRegularizer=ub(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=mg(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=mg(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return Ui((()=>{this.invokeCallHook(t,e);const n=fg(t),r=Kf(this.activation.getClassName());let s;return null!=r?s=Fm(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=Fm(n,this.kernel.read()),null!=this.bias&&(s=Lm(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const t={units:this.units,activation:tb(this.activation),useBias:this.useBias,kernelInitializer:ig(this.kernelInitializer),biasInitializer:ig(this.biasInitializer),kernelRegularizer:ib(this.kernelRegularizer),biasRegularizer:ib(this.biasRegularizer),activityRegularizer:ib(this.activityRegularizer),kernelConstraint:nm(this.kernelConstraint),biasConstraint:nm(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Jb.className="Dense",Ni(Jb);class Zb extends $g{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=mg(t);for(const e of t.slice(1))if(null==e)throw new Cf(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],xm(t,1)]}call(t,e){return Ui((()=>{this.invokeCallHook(t,e);let n=fg(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=n.transpose(t)}return function(t){if(t.rank<=1)throw new Cf(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],xm(t.shape,1)];return t.reshape(e)}(n)}))}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}Zb.className="Flatten",Ni(Zb);class Qb extends $g{constructor(t){super(t),this.supportsMasking=!0,this.activation=nb(t.activation)}call(t,e){return Ui((()=>{this.invokeCallHook(t,e);const n=fg(t);return this.activation.apply(n)}))}getConfig(){const t={activation:tb(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}Qb.className="Activation",Ni(Qb);class tx extends $g{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return Ui((()=>{return t=fg(t),e=t,n=this.n,Ui((()=>{if(2!==e.shape.length)throw new Cf(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);return Rm($m(e,1),[1,n,1])}));var e,n}))}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}tx.className="RepeatVector",Ni(tx);class ex extends $g{constructor(t){super(t),this.targetShape=t.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",r=e.slice();let s=1,a=null;for(let t=0;t<r.length;++t){const e=r[t];if(this.isUnknown(e)){if(null!==a)throw new Cf("Can only specifiy one unknown dimension.");a=t}else s*=e}const i=xm(t);if(null!==a){if(0===s||i%s!=0)throw new Cf(n);r[a]=i/s}else if(i!==s)throw new Cf(n);return r}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return Ui((()=>{this.invokeCallHook(t,e);const n=fg(t),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)}))}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}ex.className="Reshape",Ni(ex);class nx extends $g{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`);const e=Nm(1,t.dims.length+1);if(!Z(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new wg({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=mg(t)).slice();return this.dims.forEach(((n,r)=>{e[r+1]=t[n]})),e}call(t,e){return Ya(fg(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}nx.className="Permute",Ni(nx);class rx extends $g{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=fg(t);return jo(Yl(n,this.maskValue),-1)}call(t,e){return Ui((()=>{this.invokeCallHook(t,e);const n=fg(t),r=jo(Yl(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))}))}}rx.className="Masking",Ni(rx);class sx extends $g{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(_f(t.inputLength))}this.inputDim=t.inputDim,jf(this.inputDim,"inputDim"),this.outputDim=t.outputDim,jf(this.outputDim,"outputDim"),this.embeddingsInitializer=og(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=ub(t.embeddingsRegularizer),this.activityRegularizer=ub(t.activityRegularizer),this.embeddingsConstraint=sm(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return Ui((()=>this.maskZero?(t=fg(t),Yl(t,uo(t))):null))}computeOutputShape(t){if(t=mg(t),null==this.inputLength)return[...t,this.outputDim];const e=_f(this.inputLength);if(e.length!==t.length-1)throw new Cf(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);{let n=0;for(let r=0;r<e.length;++r){const s=e[r],a=t[r+1];if(null!=s&&null!=a&&s!==a)throw new Cf(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);null==s&&(e[n]=a),n++}}return[t[0],...e,this.outputDim]}call(t,e){return Ui((()=>{this.invokeCallHook(t,e);let n=fg(t);return"int32"!==n.dtype&&(n=Im(n,"int32")),_m(this.embeddings.read(),n.as1D()).reshape(mg(this.computeOutputShape(n.shape)))}))}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:ig(this.embeddingsInitializer),embeddingsRegularizer:ib(this.embeddingsRegularizer),activityRegularizer:ib(this.activityRegularizer),embeddingsConstraint:nm(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}sx.className="Embedding",Ni(sx);class ax extends $g{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new Tf}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const s=t[t.length-e.length+r],a=e[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new Cf("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(s)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[mg(t)]),(t=t).length<2)throw new Cf(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=Vf(e),e.length>1)throw new Cf(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let e=1;e<t.length;++e){const r=null==t[e]?null:t[e].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=t.map((t=>t.length));-1===t.indexOf(null)&&1===Vf(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return Ui((()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map((t=>t.rank));if(-1===n.indexOf(null)){const r=km(n);for(let n of t){const t=n.rank;for(let e=0;e<r-t;++e)n=$m(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const r of t){const t=r.rank;if(null==t){const t=r.shape,s=t[0],a=t.slice(1).concat([s]);let i=r.reshape([s].concat(xm(t.slice(1))));i=Ya(i,[1,0]),i=i.reshape(a),e.push(i),n=!0}else if(t>1){const s=Nm(1,t).concat([0]);e.push(Ya(r,s)),n=!0}else e.push(r)}let r=this.mergeFunction(e);const s=r.rank;if(n)if(null==s){const t=r.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));r=Ya(r.reshape([-1,e]),[1,0]).reshape(n)}else if(s>1){const t=[s-1].concat(Nm(0,s-1));r=Ya(r,t)}return r}}return this.mergeFunction(t)}))}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const r=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,r)}let n=[];for(const e of t)null!=e&&null!==e[0]&&n.push(e[0]);return n=Vf(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return Ui((()=>{if(null==e)return null;if(!Array.isArray(e))throw new Cf("`mask` should be an Array");if(!Array.isArray(t))throw new Cf("`inputs` should be an Array");if(e.length!==t.length)throw new Cf(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every((t=>null==t)))return null;let n=(e=e.map((t=>null==t?t:nl(t,0))))[0];for(let t=1;t<e.length-1;++t)n=Fl(n,e[t]);return n}))}}class ix extends ax{constructor(t){super(t)}mergeFunction(t){return Ui((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=no(e,t[n]);return e}))}}ix.className="Add",Ni(ix);class ox extends ax{constructor(t){super(t)}mergeFunction(t){return Ui((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=ao(e,t[n]);return e}))}}ox.className="Multiply",Ni(ox);class ux extends ax{constructor(t){super(t)}mergeFunction(t){return Ui((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=no(e,t[n]);return ao(1/t.length,e)}))}}ux.className="Average",Ni(ux);class lx extends ax{constructor(t){super(t)}mergeFunction(t){return Ui((()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Eo(e,t[n]);return e}))}}lx.className="Maximum",Ni(lx);class cx extends ax{constructor(t){super(t)}mergeFunction(t){return Ui((()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Gl(e,t[n]);return e}))}}cx.className="Minimum",Ni(cx);class hx extends ax{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new Cf("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(const n of t)if(null!=n){e=!1;break}if(e)return;const n=[];for(let e=0;e<t.length;++e){const r=t[e].slice();r.splice(this.axis,1);let s=!1;for(const t of n)if(Z(t,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new Cf("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return Ui((()=>Em(t,this.axis)))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new Cf("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const t of e.slice(1)){if(null==n[r]||null==t[r]){n[r]=null;break}n[r]+=t[r]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new Cf("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new Cf("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new Cf(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return Ui((()=>{let n=!0;if(e.forEach((t=>{null==t||(n=!1)})),n)return null;const r=[];for(let n=0;n<t.length;++n)null==e[n]?r.push(Zl(t[n]).asType("bool")):e[n].rank<t[n].rank?r.push(nl(e[n],-1)):r.push(e[n]);const s=yu(r,this.axis);return Ho(s,-1,!1)}))}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function px(t,e){for(;t<0;)t+=e;return t}hx.className="Concatenate",Ni(hx);class dx extends ax{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){j(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new Tf("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);if(e[r[0]]!==n[r[1]])throw new Cf(`Dimension incompatibility: ${e[r[0]]} !== ${n[r[1]]}`)}mergeFunction(t){if(2!==t.length)throw new Cf(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],r=t[1];return e=Array.isArray(this.axes)?this.axes.map(((e,n)=>px(e,t[n].shape.length))):[px(this.axes,n.shape.length),px(this.axes,r.shape.length)],this.normalize&&(n=Pg(n,e[0]),r=Pg(r,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new Tf("batchDot is not implemented for tensors of 4D or higher rank yet");if(j(t.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${t.shape.length}`)),j(t.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${e.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new Tf("batchDot is not implemented for complex64-type Tensors yet.");const r=t.shape.length,s=e.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return Ui((()=>{let n,i;if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)i=a[0]===a[1]?t.mul(e).sum(a[0]):t.transpose([1,0]).mul(e).sum(a[1]);else{const n=a[0]!==t.shape.length-1,r=a[1]===e.shape.length-1;i=t.matMul(e,n,r)}if(n>0){let t;t=r>s?r+s-3:r-1;const e=[];for(let r=t;r<t+n;++r)e.push(r);i=i.squeeze(e)}return 1===i.shape.length&&(i=i.expandDims(1)),i}))}(n,r,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[px(this.axes,t.length),px(this.axes,e.length)],n}computeOutputShape(t){j(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new Tf("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);e.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=e.concat(n);return 1===s.length&&s.push(1),s}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}dx.className="Dot",Ni(dx);class fx extends $g{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return Ui((()=>{this.invokeCallHook(t,e);const n=fg(t);return Bm((()=>Dm(n.shape,0,this.stddev).add(n)),(()=>n),e.training||!1)}))}}fx.className="GaussianNoise",Ni(fx);class mx extends $g{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Ui((()=>{this.invokeCallHook(t,e);const n=fg(t);return this.rate>0&&this.rate<1?Bm((()=>{const t=Math.sqrt(this.rate/(1-this.rate));return n.mul(Dm(n.shape,1,t))}),(()=>n),e.training||!1):n}))}}mx.className="GaussianDropout",Ni(mx);class gx extends $g{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||fg(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Ui((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return Bm((()=>{const e=fg(t),r=-1.7580993408473766;let s=fl(gc(n),this.rate);s=Im(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate;return e.mul(s).add(s.add(-1).mul(r)).mul(a).add(i)}),(()=>fg(t)),e.training||!1)}return t}))}}function yx(t,e,n,r,s,a=.001){let i;if(2===t.rank)i=$u(t,e,n,r,s,a);else if(3===t.rank)i=Su(t,e,n,r,s,a);else{if(4!==t.rank)throw new Tf(`batchNormalization is not implemented for array of rank ${t.rank} yet`);i=Cu(t,e,n,r,s,a)}return i}gx.className="AlphaDropout",Ni(gx);class bx extends $g{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=og(t.betaInitializer||"zeros"),this.gammaInitializer=og(t.gammaInitializer||"ones"),this.movingMeanInitializer=og(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=og(t.movingVarianceInitializer||"ones"),this.betaConstraint=sm(t.betaConstraint),this.gammaConstraint=sm(t.gammaConstraint),this.betaRegularizer=ub(t.betaRegularizer),this.gammaRegularizer=ub(t.gammaRegularizer)}build(t){t=mg(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new Cf(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(t)}.`);this.inputSpec=[new wg({ndim:t.length,axes:{[e]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return Ui((()=>{const n=null!=e.training&&e.training,r=fg(t),s=r.shape,a=s.length,i=Nm(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const u=Af(1,a);u[o]=s[o];const l=i.slice();l.sort();const c=!Z(l,Nm(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const t=this.movingMean.read().reshape(u),e=this.movingVariance.read().reshape(u),n=this.center?this.beta.read().reshape(u):null,s=this.scale?this.gamma.read().reshape(u):null;return yx(r,t,e,n,s,this.epsilon)}return yx(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=function(t,e,n,r,s=.001){return Z(r.slice().sort(),Nm(0,t.rank-1))?function(t,e,n,r,s=.001){return Ui((()=>{const a=ql(t,r),i=a.mean,o=a.variance;return[yx(t,i,o,n,e,s),i,o]}))}(t,e,n,r,s):function(t,e,n,r,s=.001){return Ui((()=>{const a=ql(t,r),i=a.mean,o=a.variance,u=[];for(const e of Nm(0,t.rank))-1!==r.indexOf(e)?u.push(1):u.push(t.shape[e]);const l=i.reshape(u),c=o.reshape(u),h=null==e?null:e.reshape(u),p=null==n?null:n.reshape(u);return[yx(t,l,c,p,h,s),i,o]}))}(t,e,n,r,s)}(r,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(t,e,n)=>{Ui((()=>{const r=1-n,s=t.read(),a=s.sub(e).mul(r);t.write(s.sub(a))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ig(this.betaInitializer),gammaInitializer:ig(this.gammaInitializer),movingMeanInitializer:ig(this.movingMeanInitializer),movingVarianceInitializer:ig(this.movingVarianceInitializer),betaRegularizer:ib(this.betaRegularizer),gammaRegularizer:ib(this.gammaRegularizer),betaConstraint:nm(this.betaConstraint),gammaConstraint:nm(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}bx.className="BatchNormalization",Ni(bx);class xx extends $g{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const t of this.axis)if(!Number.isInteger(t))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=og(t.betaInitializer||"zeros"),this.gammaInitializer=og(t.gammaInitializer||"ones"),this.betaRegularizer=ub(t.betaRegularizer),this.gammaRegularizer=ub(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=mg(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let t=0;t<this.axis.length;++t)this.axis[t]<0&&(this.axis[t]+=e);for(const t of this.axis)if(t<0||t>=e)throw new Error(`Invalid axis: ${t}`);if(this.axis.length!==Vf(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((e=>t[e]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(t,e){const n=fg(t),r=n.shape,s=r.length;return Ui((()=>{let{mean:t,variance:e}=ql(n,this.axis,!0);const a=Af(1,s);for(const t of this.axis)a[t]=r[t];const i=t=>null!=t&&t.shape.length!==s&&this.axis!==[s-1]?t.reshape(a):t;let o=i(this.gamma.read()),u=i(this.beta.read());const l=[],c=[];for(let t=0;t<s;++t)-1!==this.axis.indexOf(t)?(l.push(r[t]),c.push(1)):(l.push(1),c.push(r[t]));return t=t.tile(l),e=e.tile(l),o=o.tile(c),u=u.tile(c),yx(n,t,e,u,o,this.epsilon)}))}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ig(this.betaInitializer),gammaInitializer:ig(this.gammaInitializer),betaRegularizer:ib(this.betaRegularizer),gammaRegularizer:ib(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}xx.className="LayerNormalization",Ni(xx);class wx extends $g{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new Cf(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if("number"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new Cf(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new Cf(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new wg({ndim:4})]}computeOutputShape(t){let e,n;return t=mg(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return Ui((()=>{return e=fg(t),n=this.padding,r=this.dataFormat,Ui((()=>{if(4!==e.rank)throw new Cf(`temporalPadding expects input tensor to be 4-D, but received a ${e.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Cf("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new Cf(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let t;return t="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],tc(e,t)}));var e,n,r}))}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function vx(t,e,n,r,s,a){return Ui((()=>{let i;cm(s),pm(a),hm(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=bb(t,s);const o="same"===r?"same":"valid";return i="max"===a?Ll(t,e,n,o):du(t,e,n,o),"channelsFirst"===s&&(i=Ya(i,[0,3,1,2])),i}))}function kx(t,e,n,r,s,a){return Ui((()=>{let i;cm(s),pm(a),hm(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=xb(t,s);const o="same"===r?"same":"valid";return i="max"===a?zl(t,e,n,o):fu(t,e,n,o),"channelsFirst"===s&&(i=Ya(i,[0,4,1,2,3])),i}))}wx.className="ZeroPadding2D",Ni(wx);class Nx extends $g{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new Cf(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);this.poolSize=t.poolSize}if(jf(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new Cf(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);this.strides=t.strides}jf(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,hm(this.padding),this.inputSpec=[new wg({ndim:3})]}computeOutputShape(t){const e=gb((t=mg(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return Ui((()=>{this.invokeCallHook(t,e),t=$m(fg(t),2);const n=this.poolingFunction(fg(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return qc(n,[2])}))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class Ix extends Nx{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return cm(s),hm(r),vx(t,e,n,r,s,"max")}}Ix.className="MaxPooling1D",Ni(Ix);class $x extends Nx{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return cm(s),hm(r),vx(t,e,n,r,s,"avg")}}$x.className="AveragePooling1D",Ni($x);class Sx extends $g{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new Cf(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];jf(this.poolSize,"poolSize"),jf(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,cm(this.dataFormat),hm(this.padding),this.inputSpec=[new wg({ndim:4})]}computeOutputShape(t){t=mg(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=gb(e,this.poolSize[0],this.padding,this.strides[0]),n=gb(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return Ui((()=>(this.invokeCallHook(t,e),this.poolingFunction(fg(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Cx extends Sx{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return cm(s),hm(r),vx(t,e,n,r,s,"max")}}Cx.className="MaxPooling2D",Ni(Cx);class Tx extends Sx{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return cm(s),hm(r),vx(t,e,n,r,s,"avg")}}Tx.className="AveragePooling2D",Ni(Tx);class Ex extends $g{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new Cf(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];jf(this.poolSize,"poolSize"),jf(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,cm(this.dataFormat),hm(this.padding),this.inputSpec=[new wg({ndim:5})]}computeOutputShape(t){t=mg(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=gb(e,this.poolSize[0],this.padding,this.strides[0]),n=gb(n,this.poolSize[1],this.padding,this.strides[1]),r=gb(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,r]:[t[0],e,n,r,t[4]]}call(t,e){return Ui((()=>(this.invokeCallHook(t,e),this.poolingFunction(fg(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Ax extends Ex{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return cm(s),hm(r),kx(t,e,n,r,s,"max")}}Ax.className="MaxPooling3D",Ni(Ax);class Rx extends Ex{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return cm(s),hm(r),kx(t,e,n,r,s,"avg")}}Rx.className="AveragePooling3D",Ni(Rx);class Dx extends $g{constructor(t){super(t),this.inputSpec=[new wg({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new Tf}}class Fx extends Dx{constructor(t){super(t||{})}call(t,e){return Ui((()=>{const e=fg(t);return Vl(e,1)}))}}Fx.className="GlobalAveragePooling1D",Ni(Fx);class _x extends Dx{constructor(t){super(t||{})}call(t,e){return Ui((()=>{const e=fg(t);return El(e,1)}))}}_x.className="GlobalMaxPooling1D",Ni(_x);class Ox extends $g{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,cm(this.dataFormat),this.inputSpec=[new wg({ndim:4})]}computeOutputShape(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new Tf}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Mx extends Ox{call(t,e){return Ui((()=>{const e=fg(t);return"channelsLast"===this.dataFormat?Vl(e,[1,2]):Vl(e,[2,3])}))}}Mx.className="GlobalAveragePooling2D",Ni(Mx);class Lx extends Ox{call(t,e){return Ui((()=>{const e=fg(t);return"channelsLast"===this.dataFormat?El(e,[1,2]):El(e,[2,3])}))}}Lx.className="GlobalMaxPooling2D",Ni(Lx);class zx extends $g{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const r=Bg(e.layer,n);delete e.layer;const s={layer:r};return Object.assign(s,e),new t(s)}}class Bx extends zx{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=mg(t)).length<3)throw new Cf(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(t)}`);this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=mg(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),r=t[1];return[n[0],r].concat(n.slice(1))}call(t,e){return Ui((()=>Fb(((t,n)=>[fg(this.layer.call(t,e)),[]]),t=fg(t),[],!1,null,null,!1,!0)[1]))}}Bx.className="TimeDistributed",Ni(Bx);class Px extends zx{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=Bg(n),e.goBackwards=!0!==e.goBackwards;const r={};var s;if(r.className=t.layer.getClassName(),r.config=e,this.backwardLayer=Bg(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,s=this.mergeMode,Gf(um,"BidirectionalMergeMode",s),t.weights)throw new Tf("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,r,s=this.forwardLayer.computeOutputShape(t);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),e=s[0]):e=s[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):Ff(n)}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=Db(t,n,r,this.numConstants);if(t=s.inputs,n=s.initialState,r=s.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==r)return super.apply(t,e);const a=[],i=[];if(null!=n){const t=n.length;if(t%2>0)throw new Cf("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,a.push(...n);const r=n.map((t=>new wg({shape:t.shape})));this.forwardLayer.stateSpec=r.slice(0,t/2),this.backwardLayer.stateSpec=r.slice(t/2),i.push(...r)}if(null!=r)throw new Tf("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof vg;for(const t of a)if(t instanceof vg!==o)throw new Cf("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return Ui((()=>{const n=e.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(t,Object.assign(e,{initialState:a})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=kc(s,1)),"concat"===this.mergeMode?i=Em([r,s]):"sum"===this.mergeMode?i=no(r,s):"ave"===this.mergeMode?i=ao(.5,no(r,s)):"mul"===this.mergeMode?i=ao(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){fm(this.forwardLayer.name,(()=>{this.forwardLayer.build(t)})),fm(this.backwardLayer.name,(()=>{this.backwardLayer.build(t)})),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map((t=>null));return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=Bg(e.layer);if(delete e.layer,null!=e.numConstants)throw new Tf("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=e;return r.layer=n,new t(r)}}Px.className="Bidirectional",Ni(Px),function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(Gb||(Gb={})),function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(Hb||(Hb={}));const Wx={};function Vx(t){return Wx[t]}function Ux(t,e,n,r,s){const a=e.inputParams[t];if(a&&void 0!==a.inputIndexStart){const t=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?t+1:a.inputIndexEnd;if("tensor"===a.type)return Gx(e.inputNames[a.inputIndexStart],n,r,s);if("tensors"===a.type)return e.inputNames.slice(t,i).map((t=>Gx(t,n,r,s)));const o=Gx(e.inputNames.slice(t)[0],n,r,s),u=o.dataSync();return"number"===a.type?u[0]:It(o.shape,u)}const i=e.attrParams[t];return i&&i.value}function Gx(t,e,n,r){const[s,a]=qx(t);if(null!=r){const t=r.getHashTableHandleByName(s);if(null!=t)return t}const i=n.currentContextIds.find((t=>!!e[jx(s,t)]));return void 0!==i?e[jx(s,i)][a]:void 0}function Hx(t,e){const[n,r]=qx(t);return[jx(n,e&&e.currentContextId),r]}function jx(t,e){return e?`${t}-${e}`:t}function qx(t){const e=t.split(":");return 1===e.length?[t,0]:[e[0],Number(e[e.length-1])]}function Kx(t,e,n){let r=Ux("pad",t,e,n);if("explicit"===r){r=Ux("explicitPaddings",t,e,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let t=0;t<4;t++)s[t][0]=r[2*t],s[t][1]=r[2*t+1];return s}return r}function Xx(t){return t.kept?t:Ta(t)}const Yx=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Jx=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Zx=[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],Qx=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],tw=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],ew=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],nw=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],rw=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],sw=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}],aw=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],iw=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],ow=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],uw=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],lw=[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],cw=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],hw=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],pw=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];class dw{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[x,w,v,k,N,I,$,E,T,S,A,R,D,F,_,O,C].map((t=>t.json)));this.opMappers=t.reduce(((t,e)=>(t[e.tfOpName]=e,t)),{})}transformGraph(t,e={}){const n=t.node,r=[],s=[],a=[],i=n.reduce(((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")?r.push(t[e.name]):"Const"===e.op?s.push(t[e.name]):null!=e.input&&0!==e.input.length||a.push(t[e.name]),t)),{});let o=[];const u=[];let l={},c={};null!=e&&(l=this.mapSignatureEntries(e.inputs),c=this.mapSignatureEntries(e.outputs));const h=Object.keys(i);h.forEach((t=>{const e=i[t];e.inputNames.forEach((t=>{const[n]=Hx(t);e.inputs.push(i[n]),i[n].children.push(e)}))})),0===Object.keys(c).length?h.forEach((t=>{const e=i[t];0===e.children.length&&u.push(e)})):Object.keys(c).forEach((t=>{const[e]=Hx(t),n=i[e];null!=n&&(n.signatureKey=c[t],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((t=>{const[e]=Hx(t),n=i[e];n&&(n.signatureKey=l[t],o.push(n))})):o=r;let p={};null!=t.library&&null!=t.library.function&&(p=t.library.function.reduce(((t,e)=>(t[e.signature.name]=this.mapFunction(e),t)),{}));const d={nodes:i,inputs:o,outputs:u,weights:s,placeholders:r,signature:e,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(t){return Object.keys(t||{}).reduce(((e,n)=>(e[t[n].name]=n,e)),{})}mapNode(t){const e=Vx(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map((t=>t.startsWith("^")?t.substr(1):t)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(n.inputParams=e.inputs.reduce(((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t)),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce(((e,n)=>{const r=n.type;let s;switch(n.type){case"string":s=mw(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=mw(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=$w(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=$w(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=yw(t.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=yw(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=Iw(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Iw(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=gw(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=gw(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=Cw(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Cw(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=Nw(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Nw(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=Sw(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Sw(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=ww(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ww(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=vw(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=vw(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=xw(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=xw(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${t.op}`)}return e[n.name]={value:s,type:r},e}),{})),n}mapFunction(t){const e=t.nodeDef,n=[];let r={};null!=e&&(r=e.reduce(((t,e)=>(t[e.name]=this.mapNode(e),"Const"===e.op&&n.push(t[e.name]),t)),{}));const s=[],a=[];t.signature.inputArg.forEach((t=>{const[e]=Hx(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:bw(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,s.push(n),r[e]=n})),Object.keys(r).forEach((t=>{const e=r[t];e.inputNames.forEach((t=>{const[n]=Hx(t);e.inputs.push(r[n]),r[n].children.push(e)}))}));const i=t.ret;t.signature.outputArg.forEach((t=>{const[e,n]=Hx(i[t.name]),s=r[e];null!=s&&(s.defaultOutput=n,a.push(s))}));const o=this.mapArgsToSignature(t);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce(((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t)),{}),outputs:t.signature.outputArg.reduce(((e,n)=>(e[n.name]=this.mapArgToTensorInfo(n,t.ret),e)),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function fw(t,e){const n=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){const e=Ft().global;if(void 0!==e.atob)return e.atob(t);if("undefined"!=typeof Buffer)return new Buffer(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return e?n:n.toLowerCase()}function mw(t,e,n,r=!1){const s=t[e];return null!=s?fw(s.s,r):n}function gw(t,e,n){const r=t[e];return r?r.b:n}function yw(t,e,n){const r=t[e]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function bw(t){switch("string"==typeof t&&(t=Gb[t]),t){case Gb.DT_FLOAT:return"float32";case Gb.DT_INT32:case Gb.DT_INT64:case Gb.DT_INT8:case Gb.DT_UINT8:return"int32";case Gb.DT_BOOL:return"bool";case Gb.DT_DOUBLE:return"float32";case Gb.DT_STRING:return"string";default:return null}}function xw(t,e,n){const r=t[e];return r&&r.func?r.func.name:n}function ww(t,e,n){const r=t[e];return r&&r.type?bw(r.type):n}function vw(t,e,n){const r=t[e];return r&&r.list&&r.list.type?r.list.type.map((t=>bw(t))):n}function kw(t){if(!t.unknownRank)return null!=t.dim?t.dim.map((t=>"number"==typeof t.size?t.size:parseInt(t.size,10))):[]}function Nw(t,e,n){const r=t[e];return r&&r.shape?kw(r.shape):n}function Iw(t,e,n){const r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((t=>"number"==typeof t?t:parseInt(t,10))):n}function $w(t,e,n,r=!1){const s=t[e];return s&&s.list&&s.list.s?s.list.s.map((t=>fw(t,r))):n}function Sw(t,e,n){const r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map((t=>kw(t))):n}function Cw(t,e,n){const r=t[e];return r&&r.list&&r.list.b?r.list.b:n}class Tw{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map((t=>this.getInput(t))),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce(((t,e)=>(t[e]=this.getAttr(e),t)),{}))}getInput(t){return Gx(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return Gx(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return yw(this.node.rawAttrs,t,e);if(null!=n.s)return mw(this.node.rawAttrs,t,e);if(null!=n.b)return gw(this.node.rawAttrs,t,e);if(null!=n.shape)return Nw(this.node.rawAttrs,t,e);if(null!=n.type)return ww(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Iw(this.node.rawAttrs,t,e);if(null!=n.list.s)return $w(this.node.rawAttrs,t,e);if(null!=n.list.shape)return Sw(this.node.rawAttrs,t,e);if(null!=n.list.b)return Cw(this.node.rawAttrs,t,e);if(null!=n.list.type)return vw(this.node.rawAttrs,t,e)}return e}}function Ew(t,e,n=""){j(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(-1!==t[n]&&-1!==e[n]&&t[n]!==e[n])return!1;return!0}(t,e),(()=>n+` Shapes ${t} and ${e} must match`))}class Aw{constructor(t,e,n,r,s,a,i){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=yo(0),Hi(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.tensor.id)||e.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map((t=>this.read(t)))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),Ew(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,Hi(e),n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach(((t,n)=>this.write(t,e[n])))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return _s([],[0].concat(this.elementShape));const n=this.readMany(t);return Ew(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Kc(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return _s([],[0].concat(this.elementShape));const e=[];for(let t=0;t<this.size();t++)e.push(t);const n=this.readMany(e);return Ew(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),yu(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,ih(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const r=t.map((t=>(n+=t,n)));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:e.size/n,a=[];Ui((()=>{e=qa(e,[1,n,s]);for(let n=0;n<t.length;++n){const i=[0,0===n?0:r[n-1],0],o=[1,t[n],s];a[n]=qa(xu(e,i,o),this.elementShape)}return a}));const i=[];for(let e=0;e<t.length;e++)i[e]=e;this.writeMany(i,a)}}class Rw{constructor(t,e,n,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach((t=>{if(n!==t.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${t.dtype}`);Ew(e,t.shape,"TensorList shape mismatch: "),Hi(t)})),this.idTensor=yo(0),this.maxNumElements=r,Hi(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Rw([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.id)||e.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,n=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return Ew(t,this.elementShape,"TensorList shape mismatch: "),Ui((()=>{const e=this.tensors.map((e=>qa(e,t)));return Kc(e,0)}))}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return Ew(n.shape,t,"TensorList shape mismatch: "),qa(n,t)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(Ew(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Hi(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=t}getItem(t,e,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);return Ew(this.tensors[t].shape,e,"TensorList shape mismatch: "),this.tensors[t]}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);Ew(this.elementShape,e.shape,"TensorList shape mismatch: "),Hi(e),this.tensors[t]=e}gather(t,e,n){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);return Ew(this.elementShape,n,"TensorList shape mismatch: "),0===(t=t.slice(0,this.size())).length?_s([],[0].concat(this.elementShape)):Ui((()=>{const e=t.map((t=>qa(this.tensors[t],n)));return Kc(e,0)}))}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);return Ew(this.elementShape,e,"TensorList shape mismatch: "),0===this.size()?_s([],[0].concat(this.elementShape)):Ui((()=>{const t=this.tensors.map((t=>qa(t,e)));return yu(t,0)}))}}function Dw(t,e,n){const[r,s]=Ux("fusedOps",t,e,n),a="biasadd"===r,i="prelu"===s,o="fusedbatchnorm"===r,u=Ux("numArgs",t,e,n);if(a){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const l=Ux("strides",t,e,n),c=Kx(t,e,n),h=Ux("dataFormat",t,e,n).toUpperCase(),p=Ux("dilations",t,e,n),[d,f]=Ux("args",t,e,n);return{stride:l,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:s}}function Fw(t,e,n){return{boxes:Ux("boxes",t,e,n),scores:Ux("scores",t,e,n),maxOutputSize:Ux("maxOutputSize",t,e,n),iouThreshold:Ux("iouThreshold",t,e,n),scoreThreshold:Ux("scoreThreshold",t,e,n),softNmsSigma:Ux("softNmsSigma",t,e,n)}}class _w{constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=yo(0),this.tensorMap=new Map,Hi(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),Ui((()=>{const t=ih(e),r=n.length,s=t.length;j(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let e=0;e<r;e++){const r=n[e],s=t[e];Hi(s),this.tensorMap.set(r,s)}return this.handle}))}async find(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return Ui((()=>{const t=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,e);t.push(a)}return Kc(t)}))}findWithDefault(t,e){const n=this.tensorMap.get(t);return null!=n?n:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}function Ow(t,e,n,r){const s=((t,e,n)=>{switch(t.category){case"arithmetic":return Ui((()=>((t,e,n)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[no(Ux("a",t,e,n),Ux("b",t,e,n))];case"AddN":return[Mo(Ux("tensors",t,e,n))];case"FloorMod":case"Mod":return[jl(Ux("a",t,e,n),Ux("b",t,e,n))];case"Mul":return[ao(Ux("a",t,e,n),Ux("b",t,e,n))];case"RealDiv":case"Div":return[so(Ux("a",t,e,n),Ux("b",t,e,n))];case"DivNoNan":return[Ju(Ux("a",t,e,n),Ux("b",t,e,n))];case"FloorDiv":return[ro(Ux("a",t,e,n),Ux("b",t,e,n))];case"Sub":return[No(Ux("a",t,e,n),Ux("b",t,e,n))];case"Minimum":return[Gl(Ux("a",t,e,n),Ux("b",t,e,n))];case"Maximum":return[Eo(Ux("a",t,e,n),Ux("b",t,e,n))];case"Pow":return[ko(Ux("a",t,e,n),Ux("b",t,e,n))];case"SquaredDifference":return[jc(Ux("a",t,e,n),Ux("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"basic_math":return Ui((()=>((t,e,n)=>{switch(t.op){case"Abs":case"ComplexAbs":return[$o(Ux("x",t,e,n))];case"Acos":return[_o(Ux("x",t,e,n))];case"Acosh":return[Oo(Ux("x",t,e,n))];case"Asin":return[Xo(Ux("x",t,e,n))];case"Asinh":return[Yo(Ux("x",t,e,n))];case"Atan":return[Jo(Ux("x",t,e,n))];case"Atan2":return[Zo(Ux("x",t,e,n),Ux("y",t,e,n))];case"Atanh":return[Qo(Ux("x",t,e,n))];case"Ceil":return[Eu(Ux("x",t,e,n))];case"Complex":return[Ds(Ux("real",t,e,n),Ux("imag",t,e,n))];case"Cos":return[Vu(Ux("x",t,e,n))];case"Cosh":return[Uu(Ux("x",t,e,n))];case"Elu":return[Qu(Ux("x",t,e,n))];case"Erf":return[tl(Ux("x",t,e,n))];case"Exp":return[el(Ux("x",t,e,n))];case"Expm1":return[rl(Ux("x",t,e,n))];case"Floor":return[il(Ux("x",t,e,n))];case"Log":return[Il(Ux("x",t,e,n))];case"Log1p":return[$l(Ux("x",t,e,n))];case"Imag":return[ml(Ux("x",t,e,n))];case"Neg":return[Sl(Ux("x",t,e,n))];case"Reciprocal":return[xc(Ux("x",t,e,n))];case"Real":return[Jl(Ux("x",t,e,n))];case"Relu":return[wc(Ux("x",t,e,n))];case"Round":return[Cc(Ux("x",t,e,n))];case"Selu":return[Ec(Ux("x",t,e,n))];case"Sigmoid":return[bu(Ux("x",t,e,n))];case"Sin":return[Fc(Ux("x",t,e,n))];case"Sign":return[Dc(Ux("x",t,e,n))];case"Sinh":return[_c(Ux("x",t,e,n))];case"Softplus":return[Cl(Ux("x",t,e,n))];case"Sqrt":return[io(Ux("x",t,e,n))];case"Square":return[oo(Ux("x",t,e,n))];case"Tanh":return[wu(Ux("x",t,e,n))];case"Tan":return[Jc(Ux("x",t,e,n))];case"Relu6":case"ClipByValue":return[Au(Ux("x",t,e,n),Ux("clipValueMin",t,e,n),Ux("clipValueMax",t,e,n))];case"Rsqrt":return[Tc(Gx(t.inputNames[0],e,n))];case"Prod":return[uc(Ux("x",t,e,n),Ux("axes",t,e,n))];case"LeakyRelu":return[xl(Ux("x",t,e,n),Ux("alpha",t,e,n))];case"Prelu":return[oc(Ux("x",t,e,n),Ux("alpha",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"control":return(async(t,e,n)=>{switch(t.op){case"If":case"StatelessIf":{const r=Ux("thenBranch",t,e,n),s=Ux("elseBranch",t,e,n),a=Ux("cond",t,e,n),i=Ux("args",t,e,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Ux("body",t,e,n),s=Ux("cond",t,e,n),a=Ux("args",t,e,n),i=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((t=>t.id));let u=await i[0].data();i.forEach((t=>{t.kept||-1!==o.indexOf(t.id)||t.dispose()}));let l=a;for(;u[0];){const t=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const e=l.map((t=>t.id));t.forEach((t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach((t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}))}return l}case"LoopCond":return[Xx(Ux("pred",t,e,n))];case"Switch":{const r=Ux("pred",t,e,n);let s=Ux("data",t,e,n);return s.kept||(s=Xx(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=t.inputNames.find((t=>void 0!==Gx(t,e,n)));return r?[Xx(Gx(r,e,n))]:void 0}case"Enter":{const r=Ux("frameName",t,e,n),s=Ux("tensor",t,e,n);return n.enterFrame(r),[Xx(s)]}case"Exit":{const r=Ux("tensor",t,e,n);return n.exitFrame(),[Xx(r)]}case"NextIteration":{const r=Ux("tensor",t,e,n);return n.nextIteration(),[Xx(r)]}case"TensorArrayV3":{const r=Ux("size",t,e,n),s=Ux("dtype",t,e,n),a=Ux("elementShape",t,e,n),i=Ux("dynamicSize",t,e,n),o=Ux("clearAfterRead",t,e,n),u=Ux("identicalElementShapes",t,e,n),l=Ux("name",t,e,n),c=new Aw(l,s,r,a,u,i,o);return n.addTensorArray(c),[c.idTensor,yo(1)]}case"TensorArrayWriteV3":{const r=Ux("tensorArrayId",t,e,n),s=Ux("index",t,e,n),a=Ux("tensor",t,e,n),i=n.getTensorArray(r.id);return i.write(s,a),[i.idTensor]}case"TensorArrayReadV3":{const r=Ux("tensorArrayId",t,e,n),s=Ux("index",t,e,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=Ux("tensorArrayId",t,e,n),s=Ux("indices",t,e,n),a=Ux("dtype",t,e,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=Ux("tensorArrayId",t,e,n),s=Ux("indices",t,e,n),a=Ux("tensor",t,e,n),i=n.getTensorArray(r.id);return i.scatter(s,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=Ux("tensorArrayId",t,e,n),s=n.getTensorArray(r.id),a=Ux("dtype",t,e,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=Ux("tensorArrayId",t,e,n),s=Ux("tensor",t,e,n),a=Ux("lengths",t,e,n),i=n.getTensorArray(r.id);return i.split(a,s),[i.idTensor]}case"TensorArraySizeV3":{const r=Ux("tensorArrayId",t,e,n);return[yo(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=Ux("tensorArrayId",t,e,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=Ux("tensorListId",t,e,n),s=Ux("index",t,e,n),a=Ux("tensor",t,e,n),i=n.getTensorList(r.id);return i.setItem(s,a),[i.idTensor]}case"TensorListGetItem":{const r=Ux("tensorListId",t,e,n),s=Ux("index",t,e,n),a=Ux("elementShape",t,e,n),i=Ux("elementDType",t,e,n);return[n.getTensorList(r.id).getItem(s,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=Ux("indices",t,e,n),s=function(t,e,n,r){if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const s=Math.max(...e);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new Rw([],n,t.dtype,r),i=ih(t,0);return e.forEach(((t,e)=>{a.setItem(t,i[e])})),a}(Ux("tensor",t,e,n),r,Ux("elementShape",t,e,n),Ux("numElements",t,e,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":{const i=(r=Ux("elementShape",t,e,n),s=Ux("elementDType",t,e,n),a=Ux("numElements",t,e,n),new Rw([],r,s,a));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=Ux("tensorListId",t,e,n),s=Ux("indices",t,e,n),a=Ux("elementShape",t,e,n),i=Ux("elementDType",t,e,n);return[n.getTensorList(r.id).gather(s,i,a)]}case"TensorListStack":{const r=Ux("tensorListId",t,e,n),s=Ux("elementShape",t,e,n),a=Ux("elementDType",t,e,n),i=Ux("numElements",t,e,n);return[n.getTensorList(r.id).stack(s,a,i)]}case"TensorListFromTensor":{const r=function(t,e,n){const r=t.dtype;if(t.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${t.shape}`);if(t.dtype!==n)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${n}`);Ew(t.shape.slice(1),e,"TensorList shape mismatch: ");const s=ih(t);return new Rw(s,e,r)}(Ux("tensor",t,e,n),Ux("elementShape",t,e,n),Ux("elementDType",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=Ux("tensorListId",t,e,n),s=n.getTensorList(r.id),a=Ux("dtype",t,e,n),i=Ux("elementShape",t,e,n);return[s.concat(a,i)]}case"TensorListPushBack":{const r=Ux("tensorListId",t,e,n),s=Ux("tensor",t,e,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=Ux("tensorListId",t,e,n),s=Ux("elementShape",t,e,n),a=Ux("elementDType",t,e,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=Ux("tensor",t,e,n),s=Ux("elementShape",t,e,n),a=function(t,e,n){let r=0;const s=e.map((t=>(r+=t,r)));if(r!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${t.shape}`);const a=0===r?0:t.size/r,i=Ui((()=>{const i=[];t=qa(t,[1,r,a]);for(let r=0;r<e.length;++r){const o=[0,0===r?0:s[r-1],0],u=[1,e[r],a];i[r]=qa(xu(t,o,u),n)}return t.dispose(),i})),o=new Rw([],n,t.dtype,e.length);for(let t=0;t<i.length;t++)o.setItem(t,i[t]);return o}(r,Ux("lengths",t,e,n),s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}var r,s,a})(t,e,n);case"convolution":return Ui((()=>((t,e,n)=>{switch(t.op){case"Conv1D":{const r=Ux("stride",t,e,n),s=Ux("pad",t,e,n),a=Ux("dataFormat",t,e,n).toUpperCase(),i=Ux("dilation",t,e,n);return[Mu(Ux("x",t,e,n),Ux("filter",t,e,n),r,s,a,i)]}case"Conv2D":{const r=Ux("strides",t,e,n),s=Kx(t,e,n),a=Ux("dataFormat",t,e,n).toUpperCase(),i=Ux("dilations",t,e,n);return[Ou(Ux("x",t,e,n),Ux("filter",t,e,n),[r[1],r[2]],s,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:u,activationFunc:l}=Dw(t,e,n);return[Wh({x:Ux("x",t,e,n),filter:Ux("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:l,preluActivationWeights:u})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:u,activationFunc:l}=Dw(t,e,n);return[Gh({x:Ux("x",t,e,n),filter:Ux("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:l,preluActivationWeights:u})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=Ux("outputShape",t,e,n),s=Ux("strides",t,e,n),a=Kx(t,e,n);return[zu(Ux("x",t,e,n),Ux("filter",t,e,n),r,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=Ux("strides",t,e,n),s=Kx(t,e,n),a=Ux("dilations",t,e,n),i=Ux("dataFormat",t,e,n).toUpperCase();return[ju(Ux("input",t,e,n),Ux("filter",t,e,n),[r[1],r[2]],s,i,[a[1],a[2]])]}case"Conv3D":{const r=Ux("strides",t,e,n),s=Ux("pad",t,e,n),a=Ux("dataFormat",t,e,n).toUpperCase(),i=Ux("dilations",t,e,n);return[Bu(Ux("x",t,e,n),Ux("filter",t,e,n),[r[1],r[2],r[3]],s,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=Ux("strides",t,e,n),s=Ux("pad",t,e,n),a=Ux("kernelSize",t,e,n);return[du(Ux("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=Ux("strides",t,e,n),s=Ux("pad",t,e,n),a=Ux("kernelSize",t,e,n);return[Ll(Ux("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=Ux("strides",t,e,n),s=Ux("pad",t,e,n),a=Ux("kernelSize",t,e,n),i=Ux("includeBatchInIndex",t,e,n),{result:o,indexes:u}=Bl(Ux("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s,i);return[o,u]}case"AvgPool3D":{const r=Ux("strides",t,e,n),s=Ux("pad",t,e,n),a=Ux("kernelSize",t,e,n);return[fu(Ux("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=Ux("strides",t,e,n),s=Ux("pad",t,e,n),a=Ux("kernelSize",t,e,n);return[zl(Ux("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"Dilation2D":{const r=Ux("strides",t,e,n),s=Ux("pad",t,e,n),a=Ux("dilations",t,e,n),i=r[1],o=r[2],u=a[1],l=a[2];return[Ku(Ux("x",t,e,n),Ux("filter",t,e,n),[i,o],s,[u,l],"NHWC")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"creation":return Ui((()=>((t,e,n)=>{switch(t.op){case"Fill":{const r=Ux("shape",t,e,n),s=Ux("dtype",t,e,n);return[wo(r,Ux("value",t,e,n),s)]}case"LinSpace":return[kl(Ux("start",t,e,n),Ux("stop",t,e,n),Ux("num",t,e,n))];case"Multinomial":{const r=Ux("logits",t,e,n),s=Ux("numSamples",t,e,n),a=Ux("seed",t,e,n);return[Xl(r,s,a)]}case"OneHot":{const r=Ux("indices",t,e,n),s=Ux("depth",t,e,n),a=Ux("onValue",t,e,n),i=Ux("offValue",t,e,n);return[Xa(r,s,a,i)]}case"Ones":return[Wl(Ux("shape",t,e,n),Ux("dtype",t,e,n))];case"OnesLike":return[Zl(Ux("x",t,e,n))];case"RandomUniform":return[gc(Ux("shape",t,e,n),Ux("minval",t,e,n),Ux("maxval",t,e,n),Ux("dtype",t,e,n))];case"Range":return[bc(Ux("start",t,e,n),Ux("stop",t,e,n),Ux("step",t,e,n),Ux("dtype",t,e,n))];case"TruncatedNormal":{const r=Ux("shape",t,e,n),s=Ux("mean",t,e,n),a=Ux("stdDev",t,e,n),i=Ux("seed",t,e,n);return[rh(r,s,a,Ux("dtype",t,e,n),i)]}case"Zeros":return[Pl(Ux("shape",t,e,n),Ux("dtype",t,e,n))];case"ZerosLike":return[uo(Ux("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"dynamic":return(async(t,e,n)=>{switch(t.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=Fw(t,e,n),l=await Ap.nonMaxSuppressionWithScoreAsync(r,s,a,i,o,u);return[l.selectedIndices,l.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=Fw(t,e,n),u=Ux("padToMaxOutputSize",t,e,n),l=await Ap.nonMaxSuppressionPaddedAsync(r,s,a,i,o,u);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=Fw(t,e,n);return[await Ap.nonMaxSuppressionAsync(r,s,a,i,o)]}case"Where":{const r=Ca(Ux("condition",t,e,n),"bool"),s=[await lh(r)];return r.dispose(),s}case"ListDiff":return Rc(Ux("x",t,e,n),Ux("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"evaluation":return Ui((()=>((t,e,n)=>{switch(t.op){case"TopKV2":{const r=Ux("x",t,e,n),s=Ux("k",t,e,n),a=Ux("sorted",t,e,n),i=nh(r,s,a);return[i.values,i.indices]}case"Unique":{const r=Ux("x",t,e,n),s=sh(r);return[s.values,s.indices]}case"UniqueV2":{const r=Ux("x",t,e,n),s=Ux("axis",t,e,n),a=sh(r,s);return[a.values,a.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"image":return Ui((()=>((t,e,n)=>{switch(t.op){case"ResizeBilinear":{const r=Ux("images",t,e,n),s=Ux("size",t,e,n),a=Ux("alignCorners",t,e,n);return[Ap.resizeBilinear(r,[s[0],s[1]],a)]}case"ResizeNearestNeighbor":{const r=Ux("images",t,e,n),s=Ux("size",t,e,n),a=Ux("alignCorners",t,e,n);return[Ap.resizeNearestNeighbor(r,[s[0],s[1]],a)]}case"CropAndResize":{const r=Ux("image",t,e,n),s=Ux("boxes",t,e,n),a=Ux("boxInd",t,e,n),i=Ux("cropSize",t,e,n),o=Ux("method",t,e,n),u=Ux("extrapolationValue",t,e,n);return[Ap.cropAndResize(r,s,a,i,o,u)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"graph":return Ui((()=>((t,e,n)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const r=Ux("default",t,e,n);return[Gx(t.name,e,n)||r];case"Placeholder":return[Gx(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[Xx(Ux("x",t,e,n))];case"IdentityN":return Ux("x",t,e,n).map((t=>Xx(t)));case"Snapshot":return[Xx(Ux("x",t,e,n))];case"Shape":return[yc(Ux("x",t,e,n).shape,"int32")];case"ShapeN":return Ux("x",t,e,n).map((t=>yc(t.shape)));case"Size":return[yo(Ux("x",t,e,n).size,"int32")];case"Rank":return[yo(Ux("x",t,e,n).rank,"int32")];case"NoOp":return[yo(1)];case"Print":const s=Ux("x",t,e,n),a=Ux("data",t,e,n),i=Ux("message",t,e,n),o=Ux("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let t=0;t<a.length;t++)console.log(Array.prototype.slice.call(a[t].dataSync()).slice(0,o));return[s];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"logical":return Ui((()=>((t,e,n)=>{switch(t.op){case"Equal":return[Xu(Ux("a",t,e,n),Ux("b",t,e,n))];case"NotEqual":return[Yl(Ux("a",t,e,n),Ux("b",t,e,n))];case"Greater":return[dl(Ux("a",t,e,n),Ux("b",t,e,n))];case"GreaterEqual":return[fl(Ux("a",t,e,n),Ux("b",t,e,n))];case"Less":return[wl(Ux("a",t,e,n),Ux("b",t,e,n))];case"LessEqual":return[vl(Ux("a",t,e,n),Ux("b",t,e,n))];case"LogicalAnd":return[Fl(Ux("a",t,e,n),Ux("b",t,e,n))];case"LogicalNot":return[_l(Ux("a",t,e,n))];case"LogicalOr":return[Ol(Ux("a",t,e,n),Ux("b",t,e,n))];case"Select":case"SelectV2":return[Yu(Ux("condition",t,e,n),Ux("a",t,e,n),Ux("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"matrices":return Ui((()=>((t,e,n)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[Ka(Ux("a",t,e,n),Ux("b",t,e,n),Ux("transposeA",t,e,n),Ux("transposeB",t,e,n))];case"Transpose":return[Ya(Ux("x",t,e,n),Ux("perm",t,e,n))];case"_FusedMatMul":const[r,s]=Ux("fusedOps",t,e,n),a="biasadd"===r,i="prelu"===s,o=Ux("numArgs",t,e,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,l]=Ux("args",t,e,n);return[Hh({a:Ux("a",t,e,n),b:Ux("b",t,e,n),transposeA:Ux("transposeA",t,e,n),transposeB:Ux("transposeB",t,e,n),bias:u,activation:s,preluActivationWeights:l})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"normalization":return Ui((()=>((t,e,n)=>{switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Iu(Ux("x",t,e,n),Ux("mean",t,e,n),Ux("variance",t,e,n),Ux("offset",t,e,n),Ux("scale",t,e,n),Ux("epsilon",t,e,n))];case"LRN":return[Nl(Ux("x",t,e,n),Ux("radius",t,e,n),Ux("bias",t,e,n),Ux("alpha",t,e,n),Ux("beta",t,e,n))];case"Softmax":return[Bc(Ux("x",t,e,n))];case"LogSoftmax":return[Rl(Ux("x",t,e,n))];case"SparseToDense":return[Ah(Ux("sparseIndices",t,e,n),Ux("outputShape",t,e,n),Ux("sparseValues",t,e,n),Ux("defaultValue",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"reduction":return Ui((()=>((t,e,n)=>{switch(t.op){case"Max":{const r=Ux("axis",t,e,n),s=Ux("keepDims",t,e,n);return[El(Ux("x",t,e,n),r,s)]}case"Mean":{const r=Ux("axis",t,e,n),s=Ux("keepDims",t,e,n);return[Vl(Ux("x",t,e,n),r,s)]}case"Min":{const r=Ux("axis",t,e,n),s=Ux("keepDims",t,e,n);return[Ul(Ux("x",t,e,n),r,s)]}case"Sum":{const r=Ux("axis",t,e,n),s=Ux("keepDims",t,e,n);return[Al(Ux("x",t,e,n),r,s)]}case"All":{const r=Ux("axis",t,e,n),s=Ux("keepDims",t,e,n);return[Ho(Ux("x",t,e,n),r,s)]}case"Any":{const r=Ux("axis",t,e,n),s=Ux("keepDims",t,e,n);return[jo(Ux("x",t,e,n),r,s)]}case"ArgMax":{const r=Ux("axis",t,e,n);return[qo(Ux("x",t,e,n),r)]}case"ArgMin":{const r=Ux("axis",t,e,n);return[Ko(Ux("x",t,e,n),r)]}case"Prod":{const r=Ux("axis",t,e,n),s=Ux("keepDims",t,e,n);return[uc(Ux("x",t,e,n),r,s)]}case"Cumsum":{const r=Ux("axis",t,e,n),s=Ux("exclusive",t,e,n),a=Ux("reverse",t,e,n);return[Gu(Ux("x",t,e,n),r,s,a)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"slice_join":return Ui((()=>((t,e,n)=>{switch(t.op){case"ConcatV2":case"Concat":{const r=Ux("n",t,e,n),s=Ux("axis",t,e,n);let a=Ux("tensors",t,e,n);return a=a.slice(0,r),[yu(a,s)]}case"GatherV2":case"Gather":{const r=Ux("axis",t,e,n),s=Ux("x",t,e,n),a=Ux("indices",t,e,n);return[pl(s,Ca(a,"int32"),r)]}case"ReverseV2":case"Reverse":{const r=Ux("axis",t,e,n),s=Ux("x",t,e,n);return[kc(s,r)]}case"Slice":{const r=Ux("begin",t,e,n),s=Ux("size",t,e,n);return[xu(Ux("x",t,e,n),r,s)]}case"StridedSlice":{const r=Ux("begin",t,e,n),s=Ux("end",t,e,n),a=Ux("strides",t,e,n),i=Ux("beginMask",t,e,n),o=Ux("endMask",t,e,n),u=Ux("ellipsisMask",t,e,n),l=Ux("newAxisMask",t,e,n),c=Ux("shrinkAxisMask",t,e,n),h=Ux("x",t,e,n);return[Yc(h,r,s,a,i,o,u,l,c)]}case"Pack":return Ui((()=>{const r=Ux("axis",t,e,n),s=Ux("tensors",t,e,n),a=s[0].shape,i=qc(s[0]).shape,o=s.map((t=>{const e=Z(t.shape,a);if(!e&&!Z(qc(t).shape,i))throw new Error("the input tensors shape does not match");return e?t:qa(t,a)}));return[Kc(o,r)]}));case"Unpack":{const r=Ux("axis",t,e,n),s=Ux("tensor",t,e,n);return ih(s,r)}case"Tile":{const r=Ux("reps",t,e,n);return[sl(Ux("x",t,e,n),r)]}case"Split":case"SplitV":{const r=Ux("axis",t,e,n),s=Ux("numOrSizeSplits",t,e,n),a=Ux("x",t,e,n);return Gc(a,s,r)}case"ScatterNd":{const r=Ux("indices",t,e,n),s=Ux("values",t,e,n),a=Ux("shape",t,e,n);return[Eh(r,s,a)]}case"GatherNd":{const r=Ux("x",t,e,n),s=Ux("indices",t,e,n);return[Rh(r,s)]}case"SparseToDense":{const r=Ux("sparseIndices",t,e,n),s=Ux("outputShape",t,e,n),a=Ux("sparseValues",t,e,n),i=Ux("defaultValue",t,e,n);return[Ah(r,a,s,a.dtype===i.dtype?i:Ca(i,a.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"spectral":return Ui((()=>((t,e,n)=>{switch(t.op){case"FFT":return[Pc(Ux("x",t,e,n))];case"IFFT":return[Wc(Ux("x",t,e,n))];case"RFFT":return[Hc(Ux("x",t,e,n))];case"IRFFT":return[Vc(Ux("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"transformation":return Ui((()=>((t,e,n)=>{switch(t.op){case"Cast":return[Ca(Ux("x",t,e,n),Ux("dtype",t,e,n))];case"ExpandDims":{const r=Ux("axis",t,e,n);return[nl(Ux("x",t,e,n),r)]}case"Squeeze":{const r=Ux("axis",t,e,n);return[qc(Ux("x",t,e,n),r)]}case"Reshape":return[qa(Ux("x",t,e,n),Ux("shape",t,e,n))];case"MirrorPad":return[Hl(Ux("x",t,e,n),Ux("padding",t,e,n),Ux("mode",t,e,n))];case"PadV2":case"Pad":return[tc(Ux("x",t,e,n),Ux("padding",t,e,n),Ux("constantValue",t,e,n))];case"SpaceToBatchND":{const r=Ux("blockShape",t,e,n),s=Ux("paddings",t,e,n);return[ac(Ux("x",t,e,n),r,s)]}case"BatchToSpaceND":{const r=Ux("blockShape",t,e,n),s=Ux("crops",t,e,n);return[ku(Ux("x",t,e,n),r,s)]}case"DepthToSpace":{const r=Ux("blockSize",t,e,n),s=Ux("dataFormat",t,e,n).toUpperCase();return[Hu(Ux("x",t,e,n),r,s)]}case"BroadcastTo":return[Tu(Ux("x",t,e,n),Ux("shape",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"hash_table":return(async(t,e,n,r)=>{switch(t.op){case"HashTable":case"HashTableV2":{const s=Ux("keyDType",t,e,n),a=Ux("valueDType",t,e,n),i=new _w(s,a);return r.addHashTable(t.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=Ux("tableHandle",t,e,n,r),a=Ux("keys",t,e,n),i=Ux("values",t,e,n),o=r.getHashTableById(s.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const s=Ux("tableHandle",t,e,n,r),a=Ux("keys",t,e,n),i=Ux("defaultValue",t,e,n),o=r.getHashTableById(s.id);return[await o.find(a,i)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n,r);case"custom":const s=Vx(t.op);if(s&&s.customExecutor)return s.customExecutor(new Tw(t,e,n));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,n);return Rt(s)?s.then((t=>[].concat(t))):[].concat(s)}class Mw{constructor(t={},e={},n={},r={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map((t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`)).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function Lw(t,e,n,r){const s=new Set,a=[];let i=null,o=null;const u=new Set,l=Object.keys(t).map((t=>qx(t)[0]));let c=[];null!=r&&(c=r.map((t=>qx(t.name)[0])));const h=[...e];for(;h.length>0;){const t=h.pop();(Ww(t)||Vw(t)||Uw(t))&&null==i&&(i=t,o=i.children.map((t=>t.name)).filter((t=>s.has(t)))),s.add(t.name),null==n[t.name]&&-1===l.indexOf(t.name)&&-1===c.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach((t=>{u.has(t.name)||(u.add(t.name),h.push(t))})):a.push(t.name))}return{inputs:t,outputs:e,usedNodes:s,missingInputs:a,dynamicNode:i,syncInputs:o}}const zw=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Bw=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Pw=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function Ww(t){return zw.indexOf(t.op)>=0}function Vw(t){return Bw.indexOf(t.op)>=0}function Uw(t){return Pw.indexOf(t.op)>=0}class Gw{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach((e=>{this._functionExecutorMap[e]=new Gw(t.functions[e],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map((e=>t[e].map((t=>t.id))));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((t=>t.signatureKey||t.name))}get outputNodes(){return this._outputs.map((t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e}))}get functions(){return Object.keys(this._functions).reduce(((t,e)=>(t[e]=this._functions[e].signature,t)),{})}getCompilationKey(t,e){const n=t.map((t=>t.name)).sort(),r=e.map((t=>t.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(t,e){const n=Lw(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=e.map((t=>t.name)),s=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(t,e,n){const{usedNodes:r,inputs:s}=n,a=[],i=Object.keys(s).map((t=>qx(t)[0])).map((e=>t.nodes[e])),o=t.initNodes;i.forEach((t=>{r.has(t.name)&&a.push(t)})),t.weights.forEach((t=>{r.has(t.name)&&a.push(t)})),null!=o&&o.forEach((t=>{r.has(t.name)&&a.push(t)}));const u=new Set,l=[];for(;a.length>0;){const t=a.pop();u.add(t.name),e[t.name]||l.push(t),t.children.forEach((t=>{!u.has(t.name)&&r.has(t.name)&&t.inputs.every((t=>u.has(t.name)))&&a.push(t)}))}return l}(this.graph,this.weightMap,n)}execute(t,e){t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=n.map((t=>this.graph.nodes[qx(t)[0]])),s=e.map((t=>qx(t)[0]));let a=s.map((t=>this.graph.nodes[t]));0===a.length&&(a=this._outputs);const i=this.getCompilationKey(r,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(t,a),this.compiledMap.set(i,o));const u={},l={};return Ui((()=>{const n=new Mw(this.weightMap,u,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,s]=qx(e),a=[];a[s]=t[e],r[n]=a}));const a=this.getFrozenTensorIds(r),i={};for(let t=0;t<o.length;t++){const e=o[t];if(!r[e.name]){const t=Ow(e,r,n,this._resourceManager);if(Rt(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);r[e.name]=t,this.checkTensorForDisposal(e.name,e,r,n,a,s,i)}}return null==this.parent&&n.dispose(a),e.map((t=>Gx(t,r,n)))}))}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map((e=>t[e])).map((t=>t.map((t=>t.id)))));return new Set(e)}checkTensorForDisposal(t,e,n,r,s,a,i){"control"!==e.category&&-1===a.indexOf(t)&&(n[t].forEach((t=>{null!=t&&(i[t.id]=(i[t.id]||0)+e.children.length)})),e.inputs.forEach((t=>{if("control"!==t.category){const e=function(t,e,n){return e[jx(t,n.currentContextId)]}(t.name,n,r);null!=e&&e.forEach((t=>{if(t&&!s.has(t.id)){const e=i[t.id];1===e?(t.dispose(),delete i[t.id]):null!=e&&i[t.id]--}}))}})))}async executeAsync(t,e){return this._executeAsync(t,e)}async _executeAsync(t,e,n=!1,r={},s={}){n||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));const a=new Mw(this.weightMap,r,s,this.functionExecutorMap),i=await this.executeWithControlFlow(t,a,e,n),o=e.map((t=>Gx(t,i,a))),u=o.map((t=>t.id)),l=Object.keys(t).map((e=>t[e].id)),c=new Set([...u,...l,...this.weightIds]);return Object.keys(i).forEach((t=>{i[t].forEach((t=>{!t||t.isDisposed||c.has(t.id)||t.dispose()}))})),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(t,e,n){const r=t.reduce(((t,e,n)=>(t[this.inputs[n].name]=e,t)),{});return this._executeAsync(r,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,r){const s=Object.keys(t),a=s.map((t=>this.graph.nodes[qx(t)[0]])),i=n.map((t=>qx(t)[0]));let o=i.map((t=>this.graph.nodes[t]));0===o.length&&(o=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:h}=Lw(t,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((t=>({node:t,contexts:e.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,r]=qx(e),s=[];s[r]=t[e],d[n]=s}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const t=this.processStack(a,p,e,d,g,m,i,f,u);await Promise.all(t)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((t=>!Ww(t)&&!Gx(t.name,d,e))).map((t=>t.name));if(y.length>0){let t="";throw null!=c&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${t}`)}return d}processStack(t,e,n,r,s,a,i,o,u){const l=[];for(;e.length>0;){const t=e.pop();n.currentContext=t.contexts;let c="";if("Enter"===t.node.op&&Ux("isConstant",t.node,r,n)&&([c]=Hx(t.node.name,n)),null==r[t.node.name]){const h=Ow(t.node,r,n,this._resourceManager);c||([c]=Hx(t.node.name,n));const p=n.currentContext;Rt(h)?l.push(h.then((l=>(r[c]=l,n.currentContext=p,this.checkTensorForDisposal(c,t.node,r,n,a,i,o),this.processChildNodes(t.node,e,n,r,s,u),l)))):(r[c]=h,this.checkTensorForDisposal(c,t.node,r,n,a,i,o),this.processChildNodes(t.node,e,n,r,s,u))}else this.processChildNodes(t.node,e,n,r,s,u)}return l}processChildNodes(t,e,n,r,s,a){t.children.forEach((t=>{const[i]=Hx(t.name,n);!s[i]&&a.has(t.name)&&("Merge"===t.op?t.inputNames.some((t=>!!Gx(t,r,n)))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every((t=>!!Gx(t,r,n)))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})))}))}dispose(){Object.keys(this.weightMap).forEach((t=>this.weightMap[t].forEach((t=>t.dispose()))))}checkInputShapeAndType(t){Object.keys(t).forEach((e=>{const n=t[e],[r]=qx(e),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const t=s.attrParams.shape.value;j(t.length===n.shape.length&&n.shape.every(((e,n)=>-1===t[n]||t[n]===e)),(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${t}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&j(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(t){const e={};for(const n in t)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?e[this._signature.inputs[n].name]=t[n]:e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter((t=>{const[e]=qx(t);return null==this.graph.nodes[e]}));if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map((t=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]?this._signature.outputs[t].name:t),{})}checkOutputs(t){t.forEach((t=>{const[e]=qx(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)}))}}class Hw{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}class jw{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={}),this.resourceManager=new Hw}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=Va(t,this.loadOptions);else{const e=Xs(t,this.loadOptions);if(0===e.length)e.push(Va(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=await this.handler.load();return this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let n={};null!=this.artifacts.userDefinedMetadata&&(n=this.artifacts.userDefinedMetadata.signature),this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=Ls(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Gw(dw.Instance.transformGraph(e,n)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer){const e=dw.Instance.transformGraph(t.modelInitializer);this.initializer=new Gw(e),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(t,e){if("string"==typeof t){const e=Ks(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof ns||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce(((e,n,r)=>(e[n]=t[r],e)),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce(((e,n)=>(e[n]=[t[n]],e)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function qw(t,e={}){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t=`${t}model.json?tfjs-format=file`);const n=new jw(t,e);return await n.load(),n}function Kw(t,e,n=new Map,r=new Set){if(null==t)return null;if(r.has(t))throw new Error("Circular references are not supported.");if(n.has(t))return n.get(t);const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(Zw(t)){const s=Array.isArray(t)?[]:{};r.add(t);for(const a in t){const i=Kw(t[a],e,n,r);s[a]=i}return r.delete(t),s}throw new Error(`Can't recurse into non-iterable type: ${t}`)}return n.set(t,s.value),s.value}function Xw(t,e=Jw){return Yw(t,e)}function Yw(t,e,n=new Set){const r=t[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(Zw(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=Yw(t.map((t=>t[a])),e,n);s[a]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function Jw(t){return null===t?null:Zw(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}function Zw(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof ns))}function Qw(t){return Kw(t,tv)}function tv(t){return t instanceof ns?{value:t.clone(),recurse:!1}:Zw(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}class ev{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n}}class nv extends ev{constructor(){super(nv.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){const t=2*this.capacity,e=new Array(t),n=this.length();for(let t=0;t<n;t++)e[t]=this.get(this.wrap(this.begin+t));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}nv.INITIAL_CAPACITY=32;class rv{async toArray(){const t=[];let e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){const t=this.prefetch(100),e=[];let n=await t.next();for(;!n.done;)e.push(n.value),n=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),n=t(e.value);for(;!e.done&&n;)e=await this.next(),n=t(e.value)}handleErrors(t){return new pv(this,t)}filter(t){return new cv(this,t)}map(t){return new hv(this,t)}mapAsync(t){return new dv(this,t)}serialMapAsync(t){return new dv(this,t).serial()}flatmap(t){return new mv(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile((t=>!0===t))}rowMajorBatch(t,e=!0){return new lv(this,t,e)}columnMajorBatch(t,e=!0,n=Jw){return this.rowMajorBatch(t,e).map((t=>Xw(t,n)))}concatenate(t,e){return new gv(new sv([this,t]),e)}take(t){return t<0||null==t?this:new uv(this,t)}skip(t){return t<0||null==t?this:new ov(this,t)}prefetch(t){return new xv(this,t)}shuffle(t,e){return new wv(this,t,e)}serial(){return new iv(this)}}class sv extends rv{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const t=this.items[this.trav];return this.trav++,{value:Qw(t),done:!1}}}class av extends rv{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message=`Error thrown while iterating through a dataset: ${t.message}`,t}}}class iv extends rv{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class ov extends rv{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;Gi(t.value)}return this.upstream.next()}}class uv extends rv{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class lv extends rv{constructor(t,e,n=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const t=[];for(;t.length<this.batchSize;){const e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}}class cv extends rv{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;Gi(t.value)}}}class hv extends rv{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Map`}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=ms(t.value),n=this.transform(t.value),r=ms(n);for(const t of e)fs(t,r)||t.dispose();return{value:n,done:!1}}}class pv extends rv{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}}class dv extends rv{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=ms(t.value),n=await this.transform(t.value),r=ms(n);for(const t of e)fs(t,r)||t.dispose();return{value:n,done:!1}}}class fv extends rv{constructor(){super(),this.outputQueue=new nv,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class mv extends fv{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const t=await this.upstream.next();if(t.done)return!1;const e=ms(t.value),n=this.transform(t.value),r=ms(n);this.outputQueue.pushAll(n);for(const t of e)fs(t,r)||t.dispose();return!0}}class gv extends rv{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,null==this.iterator){const t=await this.moreIterators.next();if(t.done)return{value:null,done:!0};this.iterator=t.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}}var yv,bv;(bv=yv||(yv={}))[bv.FAIL=0]="FAIL",bv[bv.SHORTEST=1]="SHORTEST",bv[bv.LONGEST=2]="LONGEST";class xv extends rv{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new ev(e)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class wv extends xv{constructor(t,e,n){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=cc.alea(n||Kr().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(!e.done)return this.refill(),e;this.upstreamExhausted=!0}return{value:null,done:!0}}}class vv{constructor(){this.size=null}batch(t,e=!0){const n=this;let r;return j(t>0,(()=>`batchSize needs to be positive, but it is\n      ${t}`)),r=this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t),kv((async()=>(await n.iterator()).columnMajorBatch(t,e,Nv)),r)}concatenate(t){const e=this;let n;return n=this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null,kv((async()=>(await e.iterator()).concatenate(await t.iterator())),n)}filter(t){const e=this;let n;return n=this.size===1/0?1/0:null,kv((async()=>(await e.iterator()).filter((e=>Ui((()=>t(e)))))),n)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){const e=this;return kv((async()=>(await e.iterator()).map((e=>Ui((()=>t(e)))))),this.size)}mapAsync(t){const e=this;return kv((async()=>(await e.iterator()).mapAsync(t)),this.size)}prefetch(t){if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const e=this;return kv((async()=>(await e.iterator()).prefetch(t)),this.size)}repeat(t){const e=this;let n;return n=null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null,kv((async()=>{return n=(s=async()=>({value:await e.iterator(),done:!1}),new av(s)).take(t),new gv(n,r);var n,r,s}),n)}skip(t){const e=this;let n;return n=null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null,kv((async()=>(await e.iterator()).skip(t)),n)}shuffle(t,e,n=!0){if(null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=cc.alea(e||Kr().toString());return kv((async()=>{let e=s.int32();return n&&(e+=s.int32()),(await r.iterator()).shuffle(t,e.toString())}),this.size)}take(t){const e=this;let n;return n=null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null,kv((async()=>(await e.iterator()).take(t)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function kv(t,e=null){return new class extends vv{constructor(){super(...arguments),this.size=e}async iterator(){return t()}}}function Nv(t){if(null===t)return null;return null==(e=t[0])||null===(n=e)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(e)||"object"==typeof e&&e instanceof ns||dt(e)?{value:function(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof ns?Kc(t):_s(t)}(t),recurse:!1}:{value:null,recurse:!0};var e,n}function Iv(t,e){Array.isArray(t)||(t=[t]),t.forEach((t=>{null!=t&&j("complex64"!==t.dtype,(()=>`${e} does not support complex64 tensors in the CPU backend.`))}))}vv.MAX_BUFFER_SIZE=1e4,Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const $v=rp,Sv=cd,Cv=hd,Tv=pd,Ev=uh;class Av extends z{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new L(this,Pi())}write(t,e,n){this.firstUse&&(this.firstUse=!1,Ft().get("IS_NODE")&&Jp("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={};return this.data.set(r,{values:t,dtype:n,refCount:1}),r}makeTensorInfo(t,e,n){let r;if("string"===e&&null!=n&&n.length>0&&gt(n[0])){const s=n.map((t=>Yr(t)));r=this.write(s,t,e)}else r=this.write(n,t,e);return{dataId:r,shape:t,dtype:e}}incRef(t){this.data.get(t).refCount++}decRef(t){this.data.has(t)&&this.data.get(t).refCount--}move(t,e,n,r){this.data.set(t,{values:e,dtype:r,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensorInfos:n}=this.data.get(t);return"complex64"===e?Qp(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map((t=>Jr(t)))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return Sa(t.shape,t.dtype,n)}makeOutput(t,e,n){const r=this.write(t,e,n);return Pi().makeTensorFromDataId(r,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensorInfos:e}=this.data.get(t);null!=e&&(this.disposeData(e.real.dataId),this.disposeData(e.imag.dataId)),this.data.delete(t)}}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.data.has(e)){const t=this.data.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}async time(t){const e=Kr();return t(),{kernelMs:Kr()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}stridedSlice(t,e,n,r){Iv(t,"stridedSlice");const s=ui(e,n,r);if(s.some((t=>0===t)))return _s([],s);const a=Sa(s,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;t++){const n=a.indexToLoc(t),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[t]*r[t]+e[t];a.set(i.get(...s),...n)}return a.toTensor()}diag(t){const e=this.readSync(t.dataId),n=Sa([t.size,t.size],t.dtype),r=n.values;for(let n=0;n<e.length;n++)r[n*t.size+n]=e[n];return n.toTensor()}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=xu(t,a,i).reshape(r);return o}reverse(t,e){Iv(t,"reverse");const n=Sa(t.shape,t.dtype),r=this.bufferSync(t);for(let s=0;s<n.size;s++){const a=n.indexToLoc(s),i=a.slice();e.forEach((e=>i[e]=t.shape[e]-1-i[e])),n.set(r.get(...i),...a)}return n.toTensor()}neg(t){return Iv(t,"neg"),ao(yo(-1),t)}addN(t){Iv(t,"addN");const e=t.map((t=>this.readSync(t.dataId))),n=Sa(t[0].shape,t[0].dtype),r=n.values;for(let n=0;n<t.length;n++){const t=e[n];for(let e=0;e<r.length;e++)r[e]+=t[e]}return n.toTensor()}softmax(t,e){const n=it([e],t.shape),r=El(t,n),s=Po(r.shape,n),a=No(t,r.reshape(s)),i=el(a),o=this.sum(i,n).reshape(s);return so(i,o)}pow(t,e){return Iv([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>Math.pow(t,e)))}floorDiv(t,e){return Iv([t,e],"floorDiv"),this.broadcastedBinaryOp(t,e,"int32",((t,e)=>Math.floor(t/e)))}sum(t,e){Iv(t,"sum"),Wo("sum",e,t.rank);const[n,r]=Bo(t.shape,e),s=Pl(n,cs(t.dtype,"int32")),a=Y(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=0;for(let t=0;t<a;++t)n+=o[e+t];i[t]=n}return s}prod(t,e){Iv(t,"sum");const[n,r]=Bo(t.shape,e),s=Pl(n,cs(t.dtype,"int32")),a=Y(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=1;for(let t=0;t<a;++t)n*=o[e+t];i[t]=n}return s}unsortedSegmentSum(t,e,n){Iv(t,"unsortedSegmentSum");const r=[],s=t.rank-e.rank;for(let t=0;t<s;++t)e=e.expandDims(t+1);for(let s=0;s<n;++s){const n=yo(s,"int32"),a=Xu(n,e).asType("float32").mul(t).sum(0);r.push(a)}return Kc(r)}argMin(t,e){Iv(t,"argMin");const n=[e];Wo("argMin",n,t.rank);const[r,s]=Bo(t.shape,n),a=Pl(r,"int32"),i=Y(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=u[e],r=0;for(let t=0;t<i;++t){const s=u[e+t];s<n&&(n=s,r=t)}o[t]=r}return a}argMax(t,e){Iv(t,"argMax");const n=[e];Wo("argMax",n,t.rank);const[r,s]=Bo(t.shape,n),a=Pl(r,"int32"),i=Y(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=u[e],r=0;for(let t=0;t<i;++t){const s=u[e+t];s>n&&(n=s,r=t)}o[t]=r}return a}cumsum(t,e,n,r){if(Iv(t,"cumsum"),e!==t.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.rank-1} but got axis=${e}`);const s=cs(t.dtype,"int32"),a=Pl(t.shape,s),i=this.readSync(a.dataId),o=this.readSync(t.dataId),u=t.shape[t.rank-1],l=r?(t,e)=>t+u-e-1:(t,e)=>t+e;for(let t=0;t<o.length;t+=u)for(let e=0;e<u;e++){const r=l(t,e);if(0===e)i[r]=n?0:o[r];else{const s=l(t,e-1);i[r]=n?o[s]+i[s]:o[r]+i[s]}}return a}equal(t,e){return Iv([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t===e?1:0))}notEqual(t,e){return Iv([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t!==e?1:0))}less(t,e){return Iv([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t<e?1:0))}lessEqual(t,e){return Iv([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t<=e?1:0))}greater(t,e){return Iv([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t>e?1:0))}greaterEqual(t,e){return Iv([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t>=e?1:0))}logicalAnd(t,e){return Iv([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t&&e))}logicalOr(t,e){return Iv([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t||e))}select(t,e,n){Iv([t,e,n],"select");const r=this.readSync(t.dataId),s=this.readSync(e.dataId),a=this.readSync(n.dataId),i=Pl(e.shape,cs(e.dtype,n.dtype)),o=this.readSync(i.dataId);let u=0;const l=0===t.rank||t.rank>1||1===e.rank?1:Y(e.shape.slice(1));for(let t=0;t<r.length;t++)for(let e=0;e<l;e++)1===r[t]?o[u++]=s[t]:o[u++]=a[t];return i}where(t){Iv([t],"where");const e=this.readSync(t.dataId);return Ev(t.shape,e)}topk(t,e,n){Iv(t,"topk");const r=this.readSync(t.dataId);return Tv(r,t.shape,t.dtype,e,n)}min(t,e){Iv(t,"min"),Wo("min",e,t.rank);const[n,r]=Bo(t.shape,e),s=Pl(n,t.dtype),a=Y(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];r<n&&(n=r)}i[t]=n}return s}minimum(t,e){return Iv([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>Math.min(t,e)))}mod(t,e){return Iv([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e}))}maximum(t,e){return Iv([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>Math.max(t,e)))}all(t,e){Iv(t,"all"),Wo("all",e,t.rank);const[n,r]=Bo(t.shape,e),s=Pl(n,t.dtype),a=Y(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n&&r}i[t]=n}return s}any(t,e){Iv(t,"any"),Wo("any",e,t.rank);const[n,r]=Bo(t.shape,e),s=Pl(n,t.dtype),a=Y(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n||r}i[t]=n}return s}squaredDifference(t,e){return Iv([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>{const n=t-e;return n*n}))}eluDer(t,e){Iv([t,e],"eluDer");const n=new Float32Array(e.size),r=this.readSync(e.dataId),s=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const e=r[t];n[t]=e>=1?s[t]:s[t]*(e+1)}return this.makeOutput(n,e.shape,"float32")}atan2(t,e){return Iv([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>Math.atan2(t,e)))}tile(t,e){return Iv(t,"tile"),Cv(this.bufferSync(t),e)}gather(t,e,n){Iv([t,e],"gather");const r=t.shape.slice(),s=this.readSync(e.dataId);r[n]=s.length;const a=Sa(r,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;++t){const e=a.indexToLoc(t),r=e.slice();r[n]=s[e[n]];const o=i.locToIndex(r);a.values[t]=i.values[o]}return a.toTensor()}batchToSpaceND(t,e,n){Iv([t],"batchToSpaceND");const r=e.reduce(((t,e)=>t*e)),s=zp(t.shape,e,r),a=Bp(s.length,e.length),i=Pp(t.shape,e,r),o=Wp(n,e.length),u=Vp(i,n,e.length);return Ya(t.reshape(s),a).reshape(i).slice(o,u)}pool3d(t,e,n){Iv(t,"pool3d");const r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,u=e.dilationWidth,l=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),y=Sa(e.outShape,t.dtype),b=y.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[2]*e.outShape[3]*e.outShape[4],v=e.outShape[3]*e.outShape[4],k=e.outShape[4];for(let y=0;y<e.batchSize;++y){const N=y*x,I=y*t.strides[0];for(let y=0;y<e.inChannels;++y)for(let x=0;x<e.outDepth;++x){const $=x*r-p;let S=$;for(;S<0;)S+=i;const C=Math.min(e.inDepth,l+$),T=N+x*w;for(let r=0;r<e.outHeight;++r){const l=r*s-d;let p=l;for(;p<0;)p+=o;const x=Math.min(e.inHeight,c+l),w=T+r*v;for(let r=0;r<e.outWidth;++r){const s=r*a-f;let l=s;for(;l<0;)l+=u;const c=Math.min(e.inWidth,h+s),d=w+r*k;let v=m,N=0,$=0;for(let e=S;e<C;e+=i){const r=I+e*t.strides[1];for(let e=p;e<x;e+=o){const s=r+e*t.strides[2];for(let e=l;e<c;e+=u){const r=g[s+e*t.strides[3]+y];if("max"===n&&r>v?v=r:"avg"===n&&(N+=r,$++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}b[d+y]="avg"===n?N/$:v}}}}return y.toTensor()}avgPool3d(t,e){return Iv(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()}avgPool3dBackprop(t,e,n){Iv([t,e],"avgPool3dBackprop");const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,u=n.filterWidth,l=n.dilationDepth,c=n.dilationHeight,h=n.dilationWidth,p=n.effectiveFilterDepth,d=n.effectiveFilterHeight,f=n.effectiveFilterWidth,m=p-1-n.padInfo.front,g=f-1-n.padInfo.left,y=d-1-n.padInfo.top,b=Sa(e.shape,"float32"),x=1/(i*o*u),w=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let i=0;i<n.inDepth;++i)for(let o=0;o<n.inHeight;++o)for(let u=0;u<n.inWidth;++u){const v=i-m,k=o-y,N=u-g;let I=0;for(let i=0;i<p;i+=l){const o=(v+i)/r;if(!(o<0||o>=n.outDepth||Math.floor(o)!==o))for(let r=0;r<d;r+=c){const i=(k+r)/s;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<f;r+=h){const s=(N+r)/a;s<0||s>=n.outWidth||Math.floor(s)!==s||(I+=w.get(t,o,i,s,e))}}}b.set(I*x,t,i,o,u,e)}return b.toTensor()}maxPool3d(t,e){return Iv(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()}maxPool3dPositions(t,e){const n=Sa(e.outShape,"int32"),r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,u=e.dilationWidth,l=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m=this.bufferSync(t);for(let t=0;t<e.batchSize;++t)for(let g=0;g<e.inChannels;++g)for(let y=0;y<e.outDepth;++y){const b=y*r-p;let x=b;for(;x<0;)x+=i;const w=Math.min(e.inDepth,l+b);for(let r=0;r<e.outHeight;++r){const l=r*s-d;let p=l;for(;p<0;)p+=o;const v=Math.min(e.inHeight,c+l);for(let s=0;s<e.outWidth;++s){const d=s*a-f;let k=d;for(;k<0;)k+=u;const N=Math.min(e.inWidth,h+d);let I=Number.NEGATIVE_INFINITY,$=-1;for(let e=x;e<w;e+=i){const n=e-b;for(let r=p;r<v;r+=o){const s=r-l;for(let a=k;a<N;a+=u){const i=a-d,o=m.get(t,e,r,a,g);o>=I&&(I=o,$=n*c*h+s*c+i)}}}n.set($,t,y,r,s,g)}}}return n.toTensor()}maxPool3dBackprop(t,e,n,r){Iv([e,n],"maxPool3dBackprop");const s=this.maxPool3dPositions(e,r),a=r.strideDepth,i=r.strideHeight,o=r.strideWidth,u=r.dilationDepth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterDepth,p=r.effectiveFilterHeight,d=r.effectiveFilterWidth,f=h-1-r.padInfo.front,m=d-1-r.padInfo.left,g=p-1-r.padInfo.top,y=Sa(e.shape,"float32"),b=this.bufferSync(s),x=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inDepth;++n)for(let s=0;s<r.inHeight;++s)for(let w=0;w<r.inWidth;++w){const v=n-f,k=s-g,N=w-m;let I=0;for(let n=0;n<h;n+=u){const s=(v+n)/a;if(!(s<0||s>=r.outDepth||Math.floor(s)!==s))for(let a=0;a<p;a+=l){const u=(k+a)/i;if(!(u<0||u>=r.outHeight||Math.floor(u)!==u))for(let i=0;i<d;i+=c){const l=(N+i)/o;if(l<0||l>=r.outWidth||Math.floor(l)!==l)continue;const c=h*p*d-1-b.get(t,s,u,l,e)===n*p*d+a*d+i?1:0;0!==c&&(I+=x.get(t,s,u,l,e)*c)}}}y.set(I,t,n,s,w,e)}return y.toTensor()}resizeBilinear(t,e,n,r){Iv(t,"resizeBilinear");const[s,a,i,o]=t.shape,u=this.readSync(t.dataId),l=new Float32Array(Y([s,e,n,o])),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n];let p=0;const d=c[0]/h[0],f=c[1]/h[1];for(let r=0;r<s;r++)for(let s=0;s<e;s++){const e=d*s,c=Math.floor(e),h=e-c,m=Math.min(a-1,Math.ceil(e)),g=r*t.strides[0]+c*t.strides[1],y=r*t.strides[0]+m*t.strides[1];for(let e=0;e<n;e++){const n=f*e,r=Math.floor(n),s=n-r,a=Math.min(i-1,Math.ceil(n)),c=g+r*t.strides[2],d=y+r*t.strides[2],m=g+a*t.strides[2],b=y+a*t.strides[2];for(let t=0;t<o;t++){const e=u[c+t],n=u[d+t],r=e+(u[m+t]-e)*s,a=r+(n+(u[b+t]-n)*s-r)*h;l[p++]=a}}}return _s(l,[s,e,n,o])}resizeBilinearBackprop(t,e,n){Iv([t,e],"resizeBilinearBackprop");const[r,s,a,i]=e.shape,[,o,u]=t.shape,l=new Float32Array(r*s*a*i),c=[n&&o>1?s-1:s,n&&u>1?a-1:a],h=[n&&o>1?o-1:o,n&&u>1?u-1:u],p=c[0]/h[0],d=c[1]/h[1],f=this.readSync(t.dataId);let m=0;for(let t=0;t<r;t++){const n=t*e.strides[0];for(let t=0;t<o;t++){const r=t*p,o=Math.floor(r),c=Math.min(Math.ceil(r),s-1),h=n+o*e.strides[1],g=n+c*e.strides[1],y=r-o,b=1-y;for(let t=0;t<u;t++){const n=t*d,r=Math.floor(n),s=Math.min(Math.ceil(n),a-1),o=n-r,u=1-o,c=h+r*e.strides[2],p=h+s*e.strides[2],x=g+r*e.strides[2],w=g+s*e.strides[2],v=b*u,k=b*o,N=y*u,I=y*o;for(let t=0;t<i;t++){const e=f[m++];l[c+t]+=e*v,l[p+t]+=e*k,l[x+t]+=e*N,l[w+t]+=e*I}}}}return Qc(l,[r,a,s,i],e.dtype)}resizeNearestNeighbor(t,e,n,r){Iv(t,"resizeNearestNeighbor");const[s,a,i,o]=t.shape,u=this.readSync(t.dataId),l=new Float32Array(s*e*n*o),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],p=c[0]/h[0],d=c[1]/h[1];let f=0;for(let c=0;c<s;c++){const s=c*t.strides[0];for(let c=0;c<e;c++){const e=p*c,h=s+Math.min(a-1,r?Math.round(e):Math.floor(e))*t.strides[1];for(let e=0;e<n;e++){const n=d*e,s=h+Math.min(i-1,r?Math.round(n):Math.floor(n))*t.strides[2];for(let t=0;t<o;t++){const e=u[s+t];l[f++]=e}}}}return _s(l,[s,e,n,o],t.dtype)}resizeNearestNeighborBackprop(t,e,n){Iv([t,e],"resizeNearestNeighborBackprop");const[r,s,a,i]=e.shape,[,o,u]=t.shape,l=new Float32Array(r*s*a*i),c=this.readSync(t.dataId),h=[n&&o>1?s-1:s,n&&u>1?a-1:a],p=[n&&o>1?o-1:o,n&&u>1?u-1:u],d=h[0]/p[0],f=h[1]/p[1],m=1/d,g=1/f,y=2*Math.ceil(m)+2,b=2*Math.ceil(g)+2;for(let h=0;h<r;h++){const r=h*e.strides[0];for(let h=0;h<s;h++){const p=r+h*e.strides[1],x=Math.floor(h*m),w=Math.floor(x-y/2);for(let m=0;m<a;m++){const x=p+m*e.strides[2],v=Math.floor(m*g),k=Math.floor(v-b/2);for(let e=0;e<i;e++){let i=0;for(let l=0;l<y;l++){const p=l+w;if(p<0||p>=o)continue;const g=r+p*t.strides[1],y=p*d;if(h===Math.min(s-1,n?Math.round(y):Math.floor(y)))for(let r=0;r<b;r++){const s=r+k;if(s<0||s>=u)continue;const o=g+s*t.strides[2],l=s*f;m===Math.min(a-1,n?Math.round(l):Math.floor(l))&&(i+=c[o+e])}}l[x+e]=i}}}}return Qc(l,e.shape,e.dtype)}localResponseNormalization4D(t,e,n,r,s){Iv(t,"localResponseNormalization4D");const a=t.shape[3],i=a-1,o=this.readSync(t.dataId),u=t.size,l=new Float32Array(u);function c(t){const n=t%a;let r=t-n+Math.max(0,n-e);const s=t-n+Math.min(n+e,i);let u=0;for(;r<=s;r++){const t=o[r];u+=t*t}return u}for(let t=0;t<u;t++){const e=c(t),a=o[t]*Math.pow(n+r*e,-s);l[t]=a}return Qc(l,t.shape)}LRNGrad(t,e,n,r,s,a,i){Iv(t,"LRNGrad");const o=t.shape[3],u=this.readSync(t.dataId),l=this.readSync(e.dataId),c=this.readSync(n.dataId),h=new Float32Array(t.size),p=t.size;for(let t=0;t<p;t++){const e=t%o,n=t-e+Math.max(0,e-r),p=t-e+Math.min(o,e+r+1);let d=0;for(let t=n;t<p;t++)d+=Math.pow(l[t],2);d=a*d+s;for(let e=n;e<p;e++){let n=-2*a*i*l[e]*c[t]/d;t===e&&(n+=Math.pow(d,-i)),n*=u[t],h[e]+=n}}return Qc(h,t.shape)}multinomial(t,e,n,r){Iv(t,"multinomial");const s=e?t:Bc(t),a=s.shape[0],i=s.shape[1],o=Pl([a,n],"int32"),u=this.readSync(o.dataId),l=this.readSync(s.dataId);for(let t=0;t<a;++t){const e=t*i,s=new Float32Array(i-1);s[0]=l[e];for(let t=1;t<s.length;++t)s[t]=s[t-1]+l[e+t];const a=cc.alea(r.toString()),o=t*n;for(let t=0;t<n;++t){const e=a();u[o+t]=s.length;for(let n=0;n<s.length;n++)if(e<s[n]){u[o+t]=n;break}}}return o}oneHot(t,e,n,r){Iv(t,"oneHot");const s=new Float32Array(t.size*e);s.fill(r);const a=this.readSync(t.dataId);for(let r=0;r<t.size;++r)a[r]>=0&&a[r]<e&&(s[r*e+a[r]]=n);return Zc(s,[t.size,e],"int32")}nonMaxSuppression(t,e,n,r,s){Iv(t,"nonMaxSuppression");const a=this.readSync(t.dataId),i=this.readSync(e.dataId);return $v(a,i,n,r,s)}depthToSpace(t,e,n){j("NHWC"===n,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${n}`)),j(e>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${e}`));const r=t.shape[0],s=t.shape[1],a=t.shape[2],i=t.shape[3],o=s*e,u=a*e,l=i/(e*e),c=this.readSync(t.dataId),h=new Float32Array(r*o*u*l);let p=0;for(let t=0;t<r;++t)for(let n=0;n<o;++n){const r=Math.floor(n/e),o=n%e;for(let n=0;n<u;++n){const u=Math.floor(n/e),d=(o*e+n%e)*l;for(let e=0;e<l;++e){const n=e+d+i*(u+a*(r+s*t));h[p++]=c[n]}}}return Qc(h,[r,o,u,l])}broadcastedBinaryOp(t,e,n,r){const s=To(t.shape,e.shape),a=Sa(s,n),i=this.readSync(t.dataId),o=this.readSync(e.dataId),u=So(t.shape,s),l=So(e.shape,s),c=a.values;if(u.length+l.length===0)for(let t=0;t<c.length;++t)c[t]=r(i[t%i.length],o[t%o.length]);else{const n=this.bufferSync(t),s=this.bufferSync(e);for(let h=0;h<c.length;++h){const p=a.indexToLoc(h),d=p.slice(-t.rank);u.forEach((t=>d[t]=0));const f=n.locToIndex(d),m=p.slice(-e.rank);l.forEach((t=>m[t]=0));const g=s.locToIndex(m);c[h]=r(i[f],o[g])}}return a.toTensor()}split(t,e,n){return Sv(t,e,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(t,e,n,r,s,a){const[i,o,u,l]=t.shape,c=e.shape[0],[h,p]=r,d=Sa([c,h,p,l],"float32"),f=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),y=t.strides,b=d.strides;for(let t=0;t<c;t++){const e=4*t,n=f[e],r=f[e+1],c=f[e+2],x=f[e+3],w=m[t];if(w>=i)continue;const v=h>1?(c-n)*(o-1)/(h-1):0,k=p>1?(x-r)*(u-1)/(p-1):0;for(let e=0;e<h;e++){const i=h>1?n*(o-1)+e*v:.5*(n+c)*(o-1);if(i<0||i>o-1)for(let n=0;n<p;n++)for(let r=0;r<l;r++){const s=r+n*b[2]+e*b[1]+t*b[0];d.values[s]=a}else if("bilinear"===s){const n=Math.floor(i),s=Math.ceil(i),o=i-n;for(let i=0;i<p;i++){const c=p>1?r*(u-1)+i*k:.5*(r+x)*(u-1);if(c<0||c>u-1){for(let n=0;n<l;n++){const r=n+i*b[2]+e*b[1]+t*b[0];d.values[r]=a}continue}const h=Math.floor(c),f=Math.ceil(c),m=c-h;for(let r=0;r<l;r++){let a=r+h*y[2]+n*y[1]+w*y[0];const u=g[a];a=r+f*y[2]+n*y[1]+w*y[0];const l=g[a];a=r+h*y[2]+s*y[1]+w*y[0];const c=g[a];a=r+f*y[2]+s*y[1]+w*y[0];const p=u+(l-u)*m,x=c+(g[a]-c)*m;a=r+i*b[2]+e*b[1]+t*b[0],d.values[a]=p+(x-p)*o}}}else for(let n=0;n<p;++n){const s=p>1?r*(u-1)+n*k:.5*(r+x)*(u-1);if(s<0||s>u-1){for(let r=0;r<l;r++){const s=r+n*b[2]+e*b[1]+t*b[0];d.values[s]=a}continue}const o=Math.round(s),c=Math.round(i);for(let r=0;r<l;r++){const s=r+o*y[2]+c*y[1]+w*y[0],a=r+n*b[2]+e*b[1]+t*b[0];d.values[a]=g[s]}}}}return d.toTensor()}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,sliceSize:i,strides:o,outputSize:u}=ai(0,t,n);return this.scatter(t,e,n,u,i,a,s,o,r,!1)}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=ni(t,e);if(0===a)return _s([],s,t.dtype);const u=new Zr([a,i],t.dtype),l=this.readSync(e.dataId),c=this.readSync(t.dataId);for(let e=0;e<a;e++){const n=[];let s=0;for(let t=0;t<r;t++){const a=l[e*r+t];s+=a*o[t],n.push(a)}if(s<0||s>=t.size/i)throw new Error(`Invalid indices: ${n} does not index into ${t.shape}`);for(let t=0;t<i;t++)u.values[e*i+t]=c[s*i+t]}return u.toTensor().reshape(s)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=ai(0,t,n),u=yo(0);return this.scatter(t,e,n,o,a,s,r,i,u,!0)}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return wo(t.shape,1,t.dtype)}zerosLike(t){const e=lt(t.dtype,Y(t.shape));return this.makeOutput(e,t.shape,t.dtype)}linspace(t,e,n){return ld(t,e,n)}scatter(t,e,n,r,s,a,i,o,u,l){const c=[r/s,s],h=this.readSync(t.dataId),p=this.readSync(e.dataId);if(0===r)return _s([],n,e.dtype);const d=new Zr(c,e.dtype);d.values.fill(this.readSync(u.dataId)[0]);for(let t=0;t<a;t++){const a=[];let u=0;for(let e=0;e<i;e++){const n=h[t*i+e];a.push(n),u+=n*o[e]}if(u<0||u>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)l?d.values[u*s+n]+=p[t*s+n]:d.values[u*s+n]=0===e.rank?p[0]:p[t*s+n]}return d.toTensor().reshape(n)}}function Rv(t,e,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;if(Iv(i,t),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,u=o.data.get(i.dataId).values,l=Y(i.shape),c=n||i.dtype,h=lt(c,l);for(let t=0;t<l;++t)h[t]=e(u[t],s);return o.makeTensorInfo(i.shape,c,h)}}function Dv(t,e,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;if(Iv(i,t),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,u=o.data.get(i.dataId).values,l=n||i.dtype,c=e(u,l,s);return o.makeTensorInfo(i.shape,l,c)}}Qi("cpu",(()=>new Av),1);const Fv=Rv(Ee,(t=>t>=0?t:Math.exp(t)-1)),_v={kernelName:Ee,backendName:"cpu",kernelFunc:Fv};function Ov(t){const{inputs:e,backend:n}=t,{x:r}=e;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const Mv={kernelName:He,backendName:"cpu",kernelFunc:Ov};function Lv(t){return(e,n,r,s,a)=>{const i=To(e,n),o=i.length,u=kt(i),l=ut(a,Y(i)),c=e.length,h=n.length,p=kt(e),d=kt(n),f=So(e,i),m=So(n,i);if(f.length+m.length===0)for(let e=0;e<l.length;++e)l[e]=t(r[e%r.length],s[e%s.length]);else for(let e=0;e<l.length;++e){const n=At(e,o,u),a=n.slice(-c);f.forEach((t=>a[t]=0));const i=Et(a,c,p),g=n.slice(-h);m.forEach((t=>g[t]=0));const y=Et(g,h,d);l[e]=t(r[i],s[y])}return[l,i]}}const zv=Lv(((t,e)=>t<0?e*t:t));function Bv(t){const{inputs:e,backend:n}=t,{x:r,alpha:s}=e;Iv([r,s],"prelu");const a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,[o,u]=zv(r.shape,s.shape,a,i,r.dtype);return n.makeTensorInfo(u,r.dtype,o)}const Pv={kernelName:Dn,backendName:"cpu",kernelFunc:Bv},Wv=Rv(Ln,(t=>Math.max(0,t))),Vv={kernelName:Ln,backendName:"cpu",kernelFunc:Wv},Uv=Rv(Un,(t=>Math.min(Math.max(0,t),6))),Gv={kernelName:Un,backendName:"cpu",kernelFunc:Uv};function Hv(t,e,n,r){if("linear"===n)return Ov({inputs:{x:e},backend:t});if("relu"===n)return Wv({inputs:{x:e},backend:t});if("elu"===n)return Fv({inputs:{x:e},backend:t});if("relu6"===n)return Uv({inputs:{x:e},backend:t});if("prelu"===n)return Bv({inputs:{x:e,alpha:r},backend:t});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function jv(t){const{inputs:e,backend:n}=t,{real:r,imag:s}=e,a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,o=n.makeTensorInfo(r.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",i)},o}const qv={kernelName:ue,backendName:"cpu",kernelFunc:jv};function Kv(t){const{inputs:e,backend:n}=t,{input:r}=e,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const Xv={kernelName:On,backendName:"cpu",kernelFunc:Kv};function Yv(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{dtype:a}=r;if("complex64"===a){if("complex64"===s.dtype)return Ov({inputs:{x:s},backend:n});const t=Pl(s.shape),e=Yv({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=jv({inputs:{real:e,imag:t},backend:n});return t.dispose(),n.disposeIntermediateTensorInfo(e),r}if("complex64"===s.dtype){const t=Kv({inputs:{input:s},backend:n}),e=Yv({inputs:{x:t},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(t),e}if(!pt(s.dtype,a)){const t=Ov({inputs:{x:s},backend:n});return{dataId:t.dataId,shape:t.shape,dtype:a}}if("int32"===a){const t=n.data.get(s.dataId).values,e=Int32Array.from(t);return n.makeTensorInfo(s.shape,"int32",e)}if("bool"===a){const t=n.data.get(s.dataId).values,e=qr([0],s.dtype),[r,a]=Lv(((t,e)=>t!==e?1:0))(s.shape,[],t,e,"bool");return n.makeTensorInfo(a,"bool",r)}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${a}`)}const Jv={kernelName:ae,backendName:"cpu",kernelFunc:Yv};function Zv(t,e,n,r){return null==n?({inputs:n,backend:s})=>{const{a,b:i}=n,o=s;Iv([a,i],t);const u=o.data.get(a.dataId).values,l=o.data.get(i.dataId).values,c=r||a.dtype,[h,p]=e(a.shape,i.shape,u,l,c);return o.makeTensorInfo(p,c,h)}:({inputs:t,backend:s})=>{const{a,b:i}=t,o=s;if("complex64"===a.dtype||"complex64"===i.dtype){const t=Yv({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),e=o.data.get(t.dataId),r=e.complexTensorInfos.real,s=e.complexTensorInfos.imag,u=o.data.get(r.dataId).values,l=o.data.get(s.dataId).values,c=Yv({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,u,l,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),v=jv({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(t),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),v}{const t=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,s=r||a.dtype,[u,l]=e(a.shape,i.shape,t,n,s);return o.makeTensorInfo(l,s,u)}}}function Qv(t){return(e,n,r,s,a,i)=>{const o=To(e,n),u=Y(o),l=o.length,c=kt(o),h=ut("float32",u),p=ut("float32",u),d=So(e,o),f=So(n,o),m=Qp(r,s),g=Qp(a,i),y=e.length,b=kt(e),x=n.length,w=kt(n);if(d.length+f.length===0)for(let e=0;e<h.length;e++){const n=e%m.length,r=e%g.length,s=t(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);h[e]=s.real,p[e]=s.imag}else for(let e=0;e<h.length;e++){const n=At(e,l,c),r=n.slice(-y);d.forEach((t=>r[t]=0));const s=Et(r,y,b),a=n.slice(-x);f.forEach((t=>a[t]=0));const i=Et(a,x,w),o=t(m[2*s],m[2*s+1],g[2*i],g[2*i+1]);h[e]=o.real,p[e]=o.imag}return[h,p,o]}}const tk=Lv(((t,e)=>t+e)),ek=Qv(((t,e,n,r)=>({real:t+n,imag:e+r}))),nk=Zv(Wt,tk,ek),rk={kernelName:Wt,backendName:"cpu",kernelFunc:nk};function sk(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{shape:a}=r,i=Y(s.shape),o=at(a,i),u=Y(o);j(i===u,(()=>`The new shape (${o}) has ${u} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const l=n.data.get(s.dataId);if(null!=l.complexTensorInfos){const t=l.complexTensorInfos.real,e=l.complexTensorInfos.imag;t.shape=o,e.shape=o}return{dataId:s.dataId,shape:o,dtype:s.dtype}}const ak={kernelName:zn,backendName:"cpu",kernelFunc:sk};function ik(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:a}=e,{transposeA:i,transposeB:o}=r;Iv([s,a],"matMul");const u=s.shape.length,l=a.shape.length,c=i?s.shape[u-2]:s.shape[u-1],h=o?a.shape[l-1]:a.shape[l-2],p=i?s.shape[u-1]:s.shape[u-2],d=o?a.shape[l-2]:a.shape[l-1],f=s.shape.slice(0,-2),m=a.shape.slice(0,-2),g=Y(f),y=Y(m);j(u>=2&&l>=2&&(g===y||1===g||1===y),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${f}) and (${m}).`));const b=(g>y?s.shape.slice(0,-2):a.shape.slice(0,-2)).concat([p,d]);j(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,d,h]:[y,h,d],w=sk({inputs:{x:s},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),v=sk({inputs:{x:a},backend:n,attrs:{shape:x}}),k=i?w.shape[1]:w.shape[2],N=i?w.shape[2]:w.shape[1],I=o?v.shape[1]:v.shape[2],$=Math.max(g,y),S=n.data.get(w.dataId).values,C=n.data.get(v.dataId).values,T=kt(w.shape),E=kt(v.shape),[A,R,D]=i?[T[0],1,T[1]]:[T[0],T[1],1],[F,_,O]=o?[1,E[1],E[0]]:[E[1],1,E[0]],M=N*I,L=Sa([$,N,I],w.dtype),z=L.values,B=n.blockSize;for(let t=0;t<$;t++)for(let e=0;e<N;e+=B)for(let n=0;n<I;n+=B)for(let r=0;r<k;r+=B){const s=Math.min(e+B,N),a=Math.min(n+B,I),i=Math.min(r+B,k);for(let o=e;o<s;o++)for(let e=n;e<a;e++){let n=0;for(let s=r;s<i;s++){const r=Math.min(t,g-1)*A,a=Math.min(t,y-1)*O;n+=S[r+o*R+s*D]*C[s*F+e*_+a]}z[t*M+(o*I+e)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(b,L.dtype,L.values)}const ok={kernelName:ne,backendName:"cpu",kernelFunc:ik},uk={kernelName:Ir,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:a,bias:i,preluActivationWeights:o}=e,{transposeA:u,transposeB:l,activation:c}=r;let h,p,d;const f=[];h=ik({inputs:{a:s,b:a},attrs:{transposeA:u,transposeB:l},backend:n}),i&&(p=nk({inputs:{a:h,b:i},backend:n}),f.push(h),h=p),c&&(d=Hv(n,h,c,o),f.push(h),h=d);for(const t of f)n.disposeIntermediateTensorInfo(t);return h}};function lk(t){const e=new Float32Array(t.length);for(let n=0;n<t.length;++n)e[n]=Math.abs(t[n]);return e}const ck={kernelName:zt,backendName:"cpu",kernelFunc:t=>{const{x:e}=t.inputs,n=t.backend;let r=new Float32Array(Y(e.shape));if("complex64"!==e.dtype)r=lk(n.data.get(e.dataId).values);else{const t=n.data.get(e.dataId),s=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,i=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values;for(let t=0;t<i.length;t++){const e=i[t],n=o[t];r[t]=Math.hypot(e,n)}}return n.makeOutput(r,e.shape,"float32")}},hk=Rv(Bt,(t=>Math.acos(t))),pk={kernelName:Bt,backendName:"cpu",kernelFunc:hk},dk=Rv(Pt,(t=>Math.acosh(t))),fk={kernelName:Pt,backendName:"cpu",kernelFunc:dk},mk=Rv(qt,(t=>Math.asin(t))),gk={kernelName:qt,backendName:"cpu",kernelFunc:mk},yk=Rv(Kt,(t=>Math.asinh(t))),bk={kernelName:Kt,backendName:"cpu",kernelFunc:yk},xk=Rv(Xt,(t=>Math.atan(t))),wk={kernelName:Xt,backendName:"cpu",kernelFunc:xk},vk=Rv(Yt,(t=>Math.atanh(t))),kk={kernelName:Yt,backendName:"cpu",kernelFunc:vk};function Nk(t,e,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,u=s.dilationHeight,l=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,p=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Sa(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let e=0;e<s.batchSize;++e){const n=e*y,m=e*r[0];for(let e=0;e<s.inChannels;++e)for(let y=0;y<s.outHeight;++y){const w=y*i-p,v=Math.max(0,w),k=Math.min(s.inHeight,c+w),N=n+y*b;for(let n=0;n<s.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(s.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<k;n+=u){const s=m+n*r[1];for(let n=c;n<p;n+=l){const i=t[s+n*r[2]+e];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[N+n*x+e]="avg"===a?b/w:y}}}return m}function Ik(t,e,n,r,s=!1,a=!1){const i=Sa(r.outShape,"int32"),o=r.strideHeight,u=r.strideWidth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,p=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=Sa(e,n,t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=l;const b=Math.min(r.inHeight,h+g);for(let o=0;o<r.outWidth;++o){const h=o*u-f;let d=h;for(;d<0;)d+=c;const x=Math.min(r.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=l){const i=n-g;for(let o=d;o<x;o+=c){const u=o-h,l=m.get(t,n,o,e);l>w&&(w=l,v=s?a?((t*r.inHeight+n)*r.inWidth+o)*r.inChannels+e:(n*r.inWidth+o)*r.inChannels+e:i*p+u)}}i.set(v,t,n,o,e)}}return i}const $k={kernelName:Zt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;Iv(s,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;j(hu(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=eu(s.shape,a,i,1,o,u);let c;if(1===l.filterWidth&&1===l.filterHeight&&Z(l.inShape,l.outShape))c=Ov({inputs:{x:s},backend:n});else{const t=n.data.get(s.dataId).values,e=kt(s.shape),r=Nk(t,s.shape,s.dtype,e,l,"avg");c=n.makeTensorInfo(l.outShape,s.dtype,r.values)}return c}},Sk={kernelName:Qt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:a}=e,i=a;Iv([s,a],"avgPoolBackprop");const{filterSize:o,strides:u,pad:l}=r,c=eu(i.shape,o,u,1,l),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,v=Sa(i.shape,"float32"),k=1/(d*f),N=n.data.get(s.dataId).values,I=Sa(s.shape,"float32",N);for(let t=0;t<c.batchSize;++t)for(let e=0;e<c.inChannels;++e)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=n-w,a=r-x;let i=0;for(let n=0;n<y;n+=m){const r=(s+n)/h;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<b;n+=g){const s=(a+n)/p;s<0||s>=c.outWidth||Math.floor(s)!==s||(i+=I.get(t,r,s,e))}}v.set(i*k,t,n,r,e)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},Ck={kernelName:Pe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,scale:a,offset:i,mean:o,variance:u}=e;j(o.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),j(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),j(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),Iv([s,o,u,a,i],"batchNorm");let{varianceEpsilon:l}=r;null==l&&(l=.001);const c=n.data.get(s.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(u.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,v=0,k=0,N=0;for(let t=0;t<c.length;++t)m[t]=f[w++]+(c[t]-h[v++])*d[k++]/Math.sqrt(p[N++]+l),w>=g&&(w=0),v>=x&&(v=0),k>=y&&(k=0),N>=b&&(N=0);return n.makeTensorInfo(s.shape,s.dtype,m)}};function Tk(t){return(e,n,r)=>{const s=ut(n,e.length);for(let n=0;n<e.length;++n)s[n]=t(e[n],r);return s}}const Ek=Tk((t=>Math.ceil(t))),Ak=Dv(ie,Ek),Rk={kernelName:ie,backendName:"cpu",kernelFunc:Ak},Dk=Rv(oe,((t,e)=>{const n=e;return t>n.clipValueMax?n.clipValueMax:t<n.clipValueMin?n.clipValueMin:t})),Fk={kernelName:oe,backendName:"cpu",kernelFunc:Dk};function _k(t){const{inputs:e,backend:n}=t,{input:r}=e,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const Ok={kernelName:qe,backendName:"cpu",kernelFunc:_k};function Mk(t){const{inputs:e,backend:n,attrs:r}=t,{axis:s}=r,a=it(s,e[0].shape)[0];let i=gu(e.map((t=>t.shape)),a);if(0===Y(i))return n.makeTensorInfo(i,e[0].dtype,[]);const o=e.filter((t=>Y(t.shape)>0));if(1===o.length)return o[0];if(mu(o.map((t=>t.shape)),a),"complex64"===o[0].dtype){const t=o.map((t=>Kv({inputs:{input:t},backend:n}))),e=o.map((t=>_k({inputs:{input:t},backend:n}))),r=Mk({inputs:t,backend:n,attrs:{axis:a}}),s=Mk({inputs:e,backend:n,attrs:{axis:a}}),i=jv({inputs:{real:r,imag:s},backend:n});return t.forEach((t=>n.disposeIntermediateTensorInfo(t))),e.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),i}const u=o.map((t=>{const e=Y(t.shape.slice(a));return sk({inputs:{x:t},backend:n,attrs:{shape:[-1,e]}})}));i=gu(u.map((t=>t.shape)),1);const l=ut(o[0].dtype,Y(i));if(1===u[0].shape[0]){let t=0;u.forEach((e=>{const r=n.data.get(e.dataId).values,s=Y(e.shape);l.set(r,t),t+=s}))}else{let t=0;u.forEach((e=>{const r=n.data.get(e.dataId).values;let s=0;for(let n=0;n<e.shape[0];++n){const a=n*i[1]+t;for(let t=0;t<e.shape[1];++t)l[a+t]=r[s++]}t+=e.shape[1]}))}const c=gu(o.map((t=>t.shape)),a),h=n.makeTensorInfo(c,e[0].dtype,l);return u.forEach((t=>n.disposeIntermediateTensorInfo(t))),h}const Lk={kernelName:le,backendName:"cpu",kernelFunc:Mk};function zk(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:a}=e,{strides:i,pad:o,dataFormat:u,dilations:l,dimRoundingMode:c}=r;Iv([s,a],"conv2d");const h=pu(u),p=ru(s.shape,a.shape,i,l,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new Zr(p.outShape,s.dtype),v=kt(s.shape),k=kt(a.shape),N=v[0],I=x?v[1]:v[2],$=x?v[2]:1,S=x?1:v[1],C=w.strides[0],T=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(s.dataId).values,D=n.data.get(a.dataId).values,F=w.values;for(let t=0;t<p.batchSize;++t){const e=t*N,n=t*C;for(let t=0;t<p.outHeight;++t){const r=n+t*T,s=t*p.strideHeight-b;for(let t=0;t<d;++t){const n=s+t*m;if(n<0||n>=p.inHeight)continue;const a=t*k[0],i=e+n*I;for(let t=0;t<p.outWidth;++t){const e=r+t*E,n=t*p.strideWidth-y;for(let t=0;t<f;++t){const r=n+t*g;if(r<0||r>=p.inWidth)continue;const s=i+r*$;let o=a+t*k[1];for(let t=0;t<p.inChannels;++t){const n=R[s+t*S];for(let t=0;t<p.outChannels;++t)F[e+t*A]+=n*D[o+t];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,F)}const Bk={kernelName:ce,backendName:"cpu",kernelFunc:zk},Pk={kernelName:he,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:a}=e,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=r;Iv([s,a],"conv2dBackpropFilter");const h=pu(u),p=ru(s.shape,c,i,1,o,l,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new Zr(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,v=n.data.get(s.dataId).values,k=n.data.get(a.dataId).values,N=new Zr(s.shape,s.dtype,v),I=new Zr(a.shape,a.dtype,k);for(let t=0;t<m;++t){const e=Math.max(0,Math.ceil((w-t)/d)),n=Math.min(p.outHeight,(p.inHeight+w-t)/d);for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((x-r)/f)),a=Math.min(p.outWidth,(p.inWidth+x-r)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let u=0;for(let l=0;l<p.batchSize;++l)for(let c=e;c<n;++c){const e=t+c*d-w;for(let t=s;t<a;++t){const n=r+t*f-x;u+=y?N.get(l,e,n,i)*I.get(l,c,t,o):N.get(l,i,e,n)*I.get(l,o,c,t)}}b.set(u,t,r,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},Wk={kernelName:pe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:a}=e,{inputShape:i,strides:o,pad:u,dataFormat:l,dimRoundingMode:c}=r;Iv([s,a],"conv2dBackpropInput");const h=kt(a.shape),p=kt(s.shape);let d=pu(l);const f=ru(i,a.shape,o,1,u,c,!1,d),m=new Zr(f.inShape,"float32"),g=m.values,y=n.data.get(s.dataId).values,b=n.data.get(a.dataId).values,[x,w,v]=h,{batchSize:k,filterHeight:N,filterWidth:I,inChannels:$,inHeight:S,inWidth:C,outChannels:T,outHeight:E,outWidth:A,strideHeight:R,strideWidth:D}=f;d=f.dataFormat;const F=N-1-f.padInfo.top,_=I-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,B=O?1:m.strides[1],P=p[0],W=O?p[1]:p[2],V=O?p[2]:1,U=O?1:p[1];for(let t=0;t<k;++t)for(let e=0;e<$;++e)for(let n=0;n<S;++n){const r=n-F,s=Math.max(0,Math.ceil(r/R)),a=Math.min(E,(N+r)/R);for(let i=0;i<C;++i){const o=i-_,u=Math.max(0,Math.ceil(o/D)),l=Math.min(A,(I+o)/D);let c=0;for(let n=s;n<a;++n){const s=n*R-r;for(let r=u;r<l;++r){const a=P*t+W*n+V*r,i=x*(N-1-s)+w*(I-1-(r*D-o))+v*e;for(let t=0;t<T;++t)c+=y[a+U*t]*b[i+t]}}g[M*t+L*n+z*i+B*e]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},Vk={kernelName:de,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:a}=e,{strides:i,pad:o,dilations:u}=r;Iv([s,a],"conv3d");const l=su(s.shape,a.shape,i,u,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=l,y=g.front,b=g.left,x=g.top,w=new Zr(l.outShape,s.dtype),v=n.data.get(s.dataId).values,k=n.data.get(a.dataId).values,N=w.values,I=kt(s.shape),$=kt(a.shape);for(let t=0;t<l.batchSize;++t){const e=t*I[0],n=t*w.strides[0];for(let t=0;t<l.outDepth;++t){const r=n+t*w.strides[1],s=t*l.strideDepth-y;for(let t=0;t<c;++t){const n=s+t*d;if(n<0||n>=l.inDepth)continue;const a=t*$[0],i=e+n*I[1];for(let t=0;t<l.outHeight;++t){const e=r+t*w.strides[2],n=t*l.strideHeight-x;for(let t=0;t<h;++t){const r=n+t*f;if(r<0||r>=l.inHeight)continue;const s=a+t*$[1],o=i+r*I[2];for(let t=0;t<l.outWidth;++t){const n=e+t*l.outChannels,r=t*l.strideWidth-b;for(let t=0;t<p;++t){const e=r+t*m;if(e<0||e>=l.inWidth)continue;const a=s+t*$[2],i=o+e*l.inChannels;let u=a;for(let t=0;t<l.inChannels;++t){const e=v[i+t];for(let t=0;t<l.outChannels;++t)N[n+t]+=e*k[u+t];u+=l.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},Uk={kernelName:fe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:a}=e,{strides:i,pad:o,filterShape:u}=r;Iv([s,a],"conv3dBackpropFilterV2");const l=kt(s.shape),c=kt(a.shape),h=su(s.shape,u,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new Zr(h.filterShape,"float32"),x=b.values,[w,v,k,N]=b.strides,I=n.data.get(a.dataId).values,[$,S,C,T]=c,E=n.data.get(s.dataId).values,[A,R,D,F]=l,_=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let t=0;t<m;++t){const e=Math.max(0,Math.ceil((_-t)/p)),n=Math.min(h.outDepth,(h.inDepth+_-t)/p),r=t*w;for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((M-s)/d)),i=Math.min(h.outHeight,(h.inHeight+M-s)/d),o=s*v+r;for(let r=0;r<y;++r){const u=Math.max(0,Math.ceil((O-r)/f)),l=Math.min(h.outWidth,(h.inWidth+O-r)/f),c=r*k+o;for(let o=0;o<h.inChannels;++o){const m=o*N+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*$;for(let m=e;m<n;++m){const e=(t+m*p-_)*R+h,n=m*S+y;for(let t=a;t<i;++t){const a=(s+t*d-M)*D+e,i=t*C+n;for(let t=u;t<l;++t){const e=t*T+i;g+=E[(r+t*f-O)*F+a+o]*I[e+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},Gk={kernelName:me,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:a}=e,{pad:i,strides:o,inputShape:u}=r;Iv([s],"conv3dBackpropInputV2");const l=kt(s.shape),c=kt(a.shape),h=su(u,a.shape,o,1,i),p=new Zr(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(s.dataId).values,[x,w,v,k]=l,N=n.data.get(a.dataId).values,[I,$,S,C]=c,{batchSize:T,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:D,inDepth:F,inHeight:_,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:W,strideWidth:V}=h,U=E-1-h.padInfo.front,G=A-1-h.padInfo.top,H=R-1-h.padInfo.left;for(let t=0;t<T;++t)for(let e=0;e<D;++e)for(let n=0;n<F;++n){const r=n-U,s=Math.max(0,Math.ceil(r/P)),a=Math.min(L,(E+r)/P);for(let i=0;i<_;++i){const o=i-G,u=Math.max(0,Math.ceil(o/W)),l=Math.min(z,(A+o)/W);for(let c=0;c<O;++c){const h=c-H,p=Math.max(0,Math.ceil(h/V)),T=Math.min(B,(R+h)/V);let D=0;for(let n=s;n<a;++n){const s=n*P-r;for(let r=u;r<l;++r){const a=r*W-o;for(let i=p;i<T;++i){const o=x*t+w*n+v*r+k*i,u=I*(E-1-s)+$*(A-1-a)+S*(R-1-(i*V-h))+C*e;for(let t=0;t<M;++t)D+=b[o+t]*N[u+t]}}}d[f*t+m*n+g*i+y*c+e]=D}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},Hk=Rv(ge,(t=>Math.cos(t))),jk={kernelName:ge,backendName:"cpu",kernelFunc:Hk},qk=Rv(ye,(t=>Math.cosh(t))),Kk={kernelName:ye,backendName:"cpu",kernelFunc:qk};function Xk(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:a}=e,{strides:i,pad:o,dilations:u,dimRoundingMode:l}=r;Iv([s,a],"depthwiseConv2DNative");const c=kt(s.shape),h=kt(a.shape);let p=u;null==p&&(p=[1,1]),j(hu(i,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`));const d=ru(s.shape,a.shape,i,p,o,l,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,v=d.outChannels/d.inChannels,k=new Zr(d.outShape,s.dtype),N=n.data.get(s.dataId).values,I=n.data.get(a.dataId).values,$=k.values;for(let t=0;t<d.batchSize;++t){const e=t*c[0],n=t*k.strides[0];for(let t=0;t<d.outHeight;++t){const r=n+t*k.strides[1],s=t*d.strideHeight-x;for(let t=0;t<f;++t){const n=s+t*g;if(n<0||n>=d.inHeight)continue;const a=t*h[0],i=e+n*c[1];for(let t=0;t<d.outWidth;++t){const e=r+t*k.strides[2],n=t*d.strideWidth-w;for(let t=0;t<m;++t){const r=n+t*y;if(r<0||r>=d.inWidth)continue;const s=a+t*h[1],o=i+r*d.inChannels;let u=e,l=s;for(let t=0;t<d.inChannels;++t){const e=N[o+t];for(let t=0;t<v;++t)$[u+t]+=e*I[l+t];u+=v,l+=v}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}const Yk={kernelName:ve,backendName:"cpu",kernelFunc:Xk},Jk={kernelName:ke,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:a}=e,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=r;Iv([s,a],"depthwiseConv2dNativeBackpropFilter");const h=ru(s.shape,c,i,o,u,l,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new Zr(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(s.dataId).values,v=new Zr(s.shape,s.dtype,w),k=n.data.get(a.dataId).values,N=new Zr(a.shape,a.dtype,k);for(let t=0;t<f;++t){const e=Math.max(0,Math.ceil((b-t)/p)),n=Math.min(h.outHeight,(h.inHeight+b-t)/p);for(let r=0;r<m;++r){const s=Math.max(0,Math.ceil((y-r)/d)),a=Math.min(h.outWidth,(h.inWidth+y-r)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),u=i%x;let l=0;for(let u=0;u<h.batchSize;++u)for(let c=e;c<n;++c){const e=t+c*p-b;for(let t=s;t<a;++t){const n=r+t*d-y;l+=v.get(u,e,n,o)*N.get(u,c,t,i)}}g.set(l,t,r,o,u)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},Zk={kernelName:Ne,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:a}=e,{strides:i,dilations:o,pad:u,dimRoundingMode:l,inputShape:c}=r;Iv([s,a],"depthwiseConv2DNativeBackpropInput");const h=kt(s.shape),p=kt(a.shape),d=ru(c,a.shape,i,o,u,l,!0),f=new Zr(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(s.dataId).values,[w,v,k]=h,N=n.data.get(a.dataId).values,[I,$,S]=p,{batchSize:C,filterHeight:T,filterWidth:E,inChannels:A,inHeight:R,inWidth:D,outChannels:F,outHeight:_,outWidth:O,strideHeight:M,strideWidth:L}=d,z=T-1-d.padInfo.top,B=E-1-d.padInfo.left,P=F/A;for(let t=0;t<C;++t)for(let e=0;e<A;++e)for(let n=0;n<R;++n){const r=n-z,s=Math.max(0,Math.ceil(r/M)),a=Math.min(_,(T+r)/M);for(let i=0;i<D;++i){const o=i-B,u=Math.max(0,Math.ceil(o/L)),l=Math.min(O,(E+o)/L);let c=0;for(let n=s;n<a;++n){const s=n*M-r;for(let r=u;r<l;++r){const a=w*t+v*n+k*r,i=I*(T-1-s)+$*(E-1-(r*L-o))+S*e;for(let t=0;t<P;++t)c+=x[a+(e*P+t)]*N[i+t]}}m[g*t+y*n+b*i+e]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},Qk={kernelName:$e,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s}=t,{strides:a,pad:i,dilations:o}=n,u=e,l=u.data.get(r.dataId).values,c=r.shape.length,h=u.data.get(s.dataId).values,p=s.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:N,dilationHeight:I,dilationWidth:$,outShape:S}=tu(r.shape,s.shape,a,i,"NHWC",o),C=Y(S),T=S.length,E=lt(r.dtype,C);for(let t=0;t<d;++t)for(let e=0;e<y;++e){const n=e*w-x.top;for(let a=0;a<b;++a){const i=a*v-x.left;for(let o=0;o<g;++o){let u=Number.MIN_SAFE_INTEGER;for(let e=0;e<k;++e){const a=n+e*I;if(a>=0&&a<f)for(let n=0;n<N;++n){const d=i+n*$;if(d>=0&&d<m){const i=Et([t,a,d,o],c,kt(r.shape)),f=Et([e,n,o],p,kt(s.shape)),m=l[i]+h[f];m>u&&(u=m)}}}E[Et([t,e,a,o],T,kt(S))]=u}}}return{dataId:u.write(qr(E,r.dtype),S,r.dtype),shape:S,dtype:r.dtype}}},tN={kernelName:Ce,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:a}=t,{strides:i,pad:o,dilations:u}=n,l=e,c=It(r.shape,l.data.get(r.dataId).values),h=It(s.shape,l.data.get(s.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:N,dilationWidth:I,outShape:$}=tu(r.shape,s.shape,i,o,"NHWC",u);j(a.rank===$.length,(()=>`Error in ${Ce}, dy must have the same rank as output ${$.length}, but got ${a.rank}`));const S=It($,l.data.get(a.dataId).values),C=Ct(s.shape,s.dtype);for(let t=0;t<p;++t)for(let e=0;e<g;++e){const n=e*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,u=0;for(let e=0;e<v;++e){const r=n+e*N;if(r>=0&&r<d)for(let n=0;n<k;++n){const l=s+n*I;if(l>=0&&l<f){const s=c[t][r][l][a]+h[e][n][a];s>i&&(i=s,o=e,u=n)}}}C[o][u][a]+=S[t][e][r][a]}}}return{dataId:l.write(qr(C,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},eN={kernelName:Se,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:a}=t,{strides:i,pad:o,dilations:u}=n,l=e,c=It(r.shape,l.data.get(r.dataId).values),h=It(s.shape,l.data.get(s.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:N,dilationWidth:I,outShape:$}=tu(r.shape,s.shape,i,o,"NHWC",u);j(a.rank===$.length,(()=>`Error in ${Se}, dy must have the same rank as output ${$.length}, but got ${a.rank}`));const S=It($,l.data.get(a.dataId).values),C=Ct(r.shape,r.dtype);for(let t=0;t<p;++t)for(let e=0;e<g;++e){const n=e*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,u=s<0?0:s;for(let e=0;e<v;++e){const r=n+e*N;if(r>=0&&r<d)for(let n=0;n<k;++n){const l=s+n*I;if(l>=0&&l<f){const s=c[t][r][l][a]+h[e][n][a];s>i&&(i=s,o=r,u=l)}}}C[t][o][u][a]+=S[t][e][r][a]}}}return{dataId:l.write(qr(C,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},nN=Lv(((t,e)=>t/e)),rN=Zv(Te,nN),sN={kernelName:Te,backendName:"cpu",kernelFunc:rN},aN=Hp,iN=jp,oN=qp,uN=Kp,lN=Xp,cN=Yp,hN=Rv(Re,(t=>{const e=Math.sign(t),n=Math.abs(t),r=1/(1+aN*n);return e*(1-((((cN*r+lN)*r+uN)*r+oN)*r+iN)*r*Math.exp(-n*n))})),pN={kernelName:Re,backendName:"cpu",kernelFunc:hN},dN=Tk((t=>Math.exp(t))),fN=Dv(Fe,dN),mN={kernelName:Fe,backendName:"cpu",kernelFunc:fN},gN=Tk((t=>Math.expm1(t))),yN=Dv(_e,gN),bN={kernelName:_e,backendName:"cpu",kernelFunc:yN},xN=Lv(((t,e)=>t*e)),wN=Qv(((t,e,n,r)=>({real:t*n-e*r,imag:t*r+e*n}))),vN=Zv(vn,xN,wN),kN={kernelName:vn,backendName:"cpu",kernelFunc:vN};function NN(t,e,n,r,s){const a=bi(r,e,n),i=Y(n),o=kt(r);if(a){const n=xi(e,o);return t.subarray(n,n+i)}const u=ut(s,i);for(let s=0;s<i;++s){const a=Et(At(s,n.length,kt(n)).map(((t,n)=>t+e[n])),r.length,o);u[s]=t[a]}return u}function IN(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{begin:a,size:i}=r;Iv(s,"slice");const[o,u]=wi(s,a,i);ii(s,o,u);const l=NN(n.data.get(s.dataId).values,o,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,l)}const $N={kernelName:Yn,backendName:"cpu",kernelFunc:IN},SN=Lv(((t,e)=>t-e)),CN=Qv(((t,e,n,r)=>({real:t-n,imag:e-r}))),TN=Zv(lr,SN,CN),EN={kernelName:lr,backendName:"cpu",kernelFunc:TN};function AN(t,e,n){const r=t.shape,s=r[0],a=r[1],i=n.data.get(t.dataId),o=i.complexTensorInfos.real,u=i.complexTensorInfos.imag,l=[s,a],c=Y(l),h=ut("float32",c),p=ut("float32",c);for(let t=0;t<s;t++){const r=IN({inputs:{x:o},backend:n,attrs:{begin:[t,0],size:[1,a]}}),s=IN({inputs:{x:u},backend:n,attrs:{begin:[t,0],size:[1,a]}}),i=jv({inputs:{real:r,imag:s},backend:n}),{real:l,imag:c}=RN(i,e,n),d=Qp(l,c);for(let e=0;e<a;e++){const n=rd(d,e);h[t*a+e]=n.real,p[t*a+e]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(l,"float32",h),f=n.makeTensorInfo(l,"float32",p),m=jv({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function RN(t,e,n){const r=Y(t.shape),s=n.data.get(t.dataId),a=n.data.get(s.complexTensorInfos.real.dataId).values,i=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0==((o=r)&o-1)){const s=DN(a,i,r,e,n),o=[t.shape[0],t.shape[1]];if(e){const t=n.makeTensorInfo(o,"float32",s.real),e=n.makeTensorInfo(o,"float32",s.imag),a=n.makeTensorInfo([],"float32",jr(r,"float32")),i=Ov({inputs:{x:a},backend:n}),u=sN.kernelFunc({inputs:{a:t,b:a},backend:n}),l=sN.kernelFunc({inputs:{a:e,b:i},backend:n}),c=n.data.get(u.dataId).values,h=n.data.get(l.dataId).values;return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),{real:c,imag:h}}return s}return td(function(t,e,n){const r=new Float32Array(2*e);for(let s=0;s<e;s++){let a=0,i=0;for(let r=0;r<e;r++){const o=id(s*r,e,n),u=rd(t,r);a+=u.real*o.real-u.imag*o.imag,i+=u.real*o.imag+u.imag*o.real}n&&(a/=e,i/=e),sd(r,a,i,s)}return r}(Qp(a,i),r,e));var o}function DN(t,e,n,r,s){if(1===n)return{real:t,imag:e};const a=Qp(t,e),i=n/2,o=ed(a),u=o.real,l=o.imag,c=[u.length],h=s.makeTensorInfo(c,"float32",u),p=s.makeTensorInfo(c,"float32",l),d=jv({inputs:{real:h,imag:p},backend:s}),f=nd(a),m=f.real,g=f.imag,y=[m.length],b=s.makeTensorInfo(y,"float32",m),x=s.makeTensorInfo(y,"float32",g),w=jv({inputs:{real:b,imag:x},backend:s}),v=DN(u,l,i,r,s),k=v.real,N=v.imag,I=[k.length],$=s.makeTensorInfo(I,"float32",k),S=s.makeTensorInfo(I,"float32",N),C=jv({inputs:{real:$,imag:S},backend:s}),T=DN(m,g,i,r,s),E=T.real,A=T.imag,R=[E.length],D=s.makeTensorInfo(R,"float32",E),F=s.makeTensorInfo(R,"float32",A),_=jv({inputs:{real:D,imag:F},backend:s}),O=ad(n,r),M=[O.real.length],L=s.makeTensorInfo(M,"float32",O.real),z=s.makeTensorInfo(M,"float32",O.imag),B=jv({inputs:{real:L,imag:z},backend:s}),P=vN({inputs:{a:B,b:_},backend:s}),W=nk({inputs:{a:C,b:P},backend:s}),V=TN({inputs:{a:C,b:P},backend:s}),U=Kv({inputs:{input:W},backend:s}),G=Kv({inputs:{input:V},backend:s}),H=_k({inputs:{input:W},backend:s}),j=_k({inputs:{input:V},backend:s}),q=Mk({inputs:[U,G],backend:s,attrs:{axis:0}}),K=Mk({inputs:[H,j],backend:s,attrs:{axis:0}}),X=s.data.get(q.dataId).values,Y=s.data.get(K.dataId).values;return s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo($),s.disposeIntermediateTensorInfo(S),s.disposeIntermediateTensorInfo(C),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(F),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const FN={kernelName:Oe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e,s=Y(r.shape),a=r.shape[r.shape.length-1],i=sk({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),o=AN(i,!1,n),u=sk({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),u}},_N={kernelName:Me,backendName:"cpu",kernelFunc:function(t){const{backend:e,attrs:n}=t,{shape:r,value:s,dtype:a}=n,i=a||xt(s),o=lt(i,Y(r));return function(t,e,n){t.fill(e)}(o,s),e.makeTensorInfo(r,i,o)}},ON={kernelName:Le,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,s=n,a=ut(r.dtype,Y(r.shape)),[i,o,u,l]=r.shape,c=s.data.get(r.dataId).values;for(let t=0;t<i;t++){const e=t*u*o*l;for(let t=0;t<o;t++){const n=t*(u*l);for(let r=0;r<u;r++){const s=r*l;for(let o=0;o<l;o++){const h=[i,t,r,o][2],p=Math.round(u-h),d=e+n+s+o;let f=c[d];p>=0&&p<u&&(f=c[e+n+p*l+o]),a[d]=f}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},MN=Tk((t=>Math.floor(t))),LN=Dv(ze,MN),zN={kernelName:ze,backendName:"cpu",kernelFunc:LN},BN={kernelName:$r,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:a,bias:i,preluActivationWeights:o}=e,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d}=r;let f=zk({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const t=f;f=nk({inputs:{a:f,b:i},backend:n}),n.disposeIntermediateTensorInfo(t)}if(d){const t=f;f=Hv(n,f,d,o),n.disposeIntermediateTensorInfo(t)}return f}},PN={kernelName:Sr,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:a,bias:i,preluActivationWeights:o}=e,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d}=r;let f=Xk({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const t=f;f=nk({inputs:{a:f,b:i},backend:n}),n.disposeIntermediateTensorInfo(t)}if(d){const t=f;f=Hv(n,f,d,o),n.disposeIntermediateTensorInfo(t)}return f}},WN={kernelName:je,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e,s=Y(r.shape),a=r.shape[r.shape.length-1],i=sk({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),o=AN(i,!0,n),u=sk({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),u}},VN=Rv(Ke,(t=>Number.isFinite(t)?1:0),"bool"),UN={kernelName:Ke,backendName:"cpu",kernelFunc:VN},GN=Rv(Xe,(t=>Math.abs(t)===1/0?1:0),"bool"),HN={kernelName:Xe,backendName:"cpu",kernelFunc:GN},jN=Rv(Ye,(t=>Number.isNaN(t)?1:0),"bool"),qN={kernelName:Ye,backendName:"cpu",kernelFunc:jN},KN=Tk((t=>Math.log(t))),XN=Dv(tn,KN),YN={kernelName:tn,backendName:"cpu",kernelFunc:XN},JN=Rv(en,(t=>Math.log1p(t))),ZN={kernelName:en,backendName:"cpu",kernelFunc:JN},QN=Rv(rn,(t=>t?0:1),"bool"),tI={kernelName:rn,backendName:"cpu",kernelFunc:QN};function eI(t,e,n,r){const s=ut(r,Y(n));for(let n=0;n<s.length;++n){const r=n*e;let a=t[r];for(let n=0;n<e;++n){const e=t[r+n];e>a&&(a=e)}s[n]=a}return s}function nI(t,e,n,r,s){const a=e.length,i=Y(e),o=kt(e),u=kt(s),l=ut(n,Y(s));for(let e=0;e<i;++e){const n=At(e,a,o),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[r[t]];l[Et(s,a,u)]=t[e]}return l}const rI={kernelName:ln,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s,keepDims:a}=e,i=n;let o=r.shape;const u=o.length,l=it(s,o);let c=l;const h=Vo(c,u);let p=i.data.get(r.dataId).values;if(null!=h){const t=new Array(u);for(let e=0;e<t.length;e++)t[e]=o[h[e]];p=nI(p,o,r.dtype,h,t),c=Go(c.length,u),o=t}Iv(r,"max"),Wo("max",c,u);const[d,f]=Bo(o,c),m=eI(p,Y(f),d,r.dtype),g=i.write(m,d,r.dtype);let y=d;return a&&(y=Po(d,l)),{dataId:g,shape:y,dtype:r.dtype}}},sI={kernelName:hn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;Iv(s,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;j(hu(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=eu(s.shape,a,i,1,o,u);let c;if(1===l.filterWidth&&1===l.filterHeight&&Z(l.inShape,l.outShape))c=Ov({inputs:{x:s},backend:n});else{const t=n.data.get(s.dataId).values,e=kt(s.shape),r=Nk(t,s.shape,s.dtype,e,l,"max");c=n.makeTensorInfo(l.outShape,s.dtype,r.values)}return c}},aI={kernelName:pn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:a,output:i}=e,o=a;Iv([a,i],"maxPoolBackprop");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,p=eu(o.shape,u,l,1,c,h),d=n.data.get(o.dataId).values,f=Sa(p.outShape,o.dtype,Ik(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,v=w-1-p.padInfo.left,k=x-1-p.padInfo.top,N=Sa(o.shape,"float32"),I=n.data.get(s.dataId).values,$=Sa(s.shape,"float32",I);for(let t=0;t<p.batchSize;++t)for(let e=0;e<p.inChannels;++e)for(let n=0;n<p.inHeight;++n)for(let r=0;r<p.inWidth;++r){const s=n-k,a=r-v;let i=0;for(let n=0;n<x;n+=y){const r=(s+n)/m;if(!(r<0||r>=p.outHeight||Math.floor(r)!==r))for(let s=0;s<w;s+=b){const o=(a+s)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const u=x*w-1-f.get(t,r,o,e)===n*w+s?1:0;0!==u&&(i+=$.get(t,r,o,e)*u)}}N.set(i,t,n,r,e)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},iI={kernelName:mn,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,u=n;Iv(r,"MaxPoolWithArgmax");const l=u.data.get(r.dataId).values,c=eu(r.shape,s,a,[1,1],i),[h,p]=function(t,e,n,r,s){const a=Nk(t,0,n,kt(e),s,"max"),i=Ik(t,e,n,s,!0,r);return[a.values,i.values]}(l,r.shape,r.dtype,o,c),d=u.write(h,c.outShape,r.dtype),f=u.write(p,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},oI={kernelName:xn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{paddings:a,mode:i}=r;Iv(s,"mirrorPad");const o=a.map(((t,e)=>t[0]+s.shape[e]+t[1])),u=a.map((t=>t[0])),l=a.map(((t,e)=>t[0]+s.shape[e])),c="reflect"===i?0:1,h=n.data.get(s.dataId).values,p=s.shape.length,d=kt(s.shape),f=Y(o),m=o.length,g=kt(o),y=ut(s.dtype,f);for(let t=0;t<f;t++){let e=At(t,m,g);for(let t=0;t<m;t++)e[t]<u[t]?e[t]=2*u[t]-e[t]-c:e[t]>=l[t]&&(e[t]=2*(l[t]-1)-e[t]+c);e=e.map(((t,e)=>t-u[e]));const n=Et(e,p,d);y[t]=h[n]}return{dataId:n.write(y,o,s.dtype),shape:o,dtype:s.dtype}}},uI=sp,lI={kernelName:$n,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:u}=n,l=e;Iv(r,"NonMaxSuppressionPadded");const c=l.data.get(r.dataId).values,h=l.data.get(s.dataId).values,{selectedIndices:p,validOutputs:d}=uI(c,h,a,i,o,u);return[p,d]}},cI=ap,hI={kernelName:Sn,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=n,l=e;Iv(r,"NonMaxSuppressionWithScore");const c=l.data.get(r.dataId).values,h=l.data.get(s.dataId).values,p=a,d=i,f=o,m=u,{selectedIndices:g,selectedScores:y}=cI(c,h,p,d,f,m);return[g,y]}},pI=Lv(((t,e)=>t!==e?1:0)),dI=Zv(Nn,pI,null,"bool"),fI={kernelName:Nn,backendName:"cpu",kernelFunc:dI},mI={kernelName:En,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{paddings:a,constantValue:i}=r;Iv(s,"pad");const o=a.map(((t,e)=>t[0]+s.shape[e]+t[1])),u=a.map((t=>t[0])),l=n.data.get(s.dataId).values,c=Y(s.shape),h=s.shape.length,p=kt(s.shape),d=Y(o),f=o.length,m=kt(o),g=ut(s.dtype,d);0!==i&&g.fill(i);for(let t=0;t<c;t++)g[Et(At(t,h,p).map(((t,e)=>t+u[e])),f,m)]=l[t];return{dataId:n.write(g,o,s.dtype),shape:o,dtype:s.dtype}}},gI=Rv(Mn,(t=>1/t)),yI={kernelName:Mn,backendName:"cpu",kernelFunc:gI},bI={kernelName:Nr,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:a,center:i}=e,o=n,u=ut(r.dtype,Y(r.shape)),[l,c,h,p]=r.shape,[d,f]=Lp(i,c,h),m=Math.sin(s),g=Math.cos(s),y=o.data.get(r.dataId).values;for(let t=0;t<l;t++){const e=t*h*c*p;for(let t=0;t<c;t++){const n=t*(h*p);for(let r=0;r<h;r++){const s=r*p;for(let i=0;i<p;i++){const o=[l,t,r,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,v=(b-d)*m+(x-f)*g;w=Math.round(w+d),v=Math.round(v+f);let k=a;"number"!=typeof a&&(k=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c&&(k=y[e+v*(h*p)+w*p+i]),u[e+n+s+i]=k}}}}return{dataId:o.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},xI=Rv(Hn,(t=>{const e=Math.floor(t);return t-e<.5?Math.floor(t):t-e>.5?Math.ceil(t):e%2==0?e:e+1})),wI={kernelName:Hn,backendName:"cpu",kernelFunc:xI},vI=Tk((t=>1/Math.sqrt(t))),kI=Dv(jn,vI),NI={kernelName:jn,backendName:"cpu",kernelFunc:kI},II=Up,$I=Gp,SI=Rv(Xn,(t=>t>=0?$I*t:II*(Math.exp(t)-1))),CI={kernelName:Xn,backendName:"cpu",kernelFunc:SI},TI=Rv(tr,(t=>1/(1+Math.exp(-t)))),EI={kernelName:tr,backendName:"cpu",kernelFunc:TI},AI=Rv(Qn,(t=>t<0?-1:t>0?1:0)),RI={kernelName:Qn,backendName:"cpu",kernelFunc:AI},DI=Rv(Jn,(t=>Math.sin(t))),FI={kernelName:Jn,backendName:"cpu",kernelFunc:DI},_I=Rv(Zn,(t=>Math.sinh(t))),OI={kernelName:Zn,backendName:"cpu",kernelFunc:_I},MI=Math.log(1.1920928955078125e-7)+2,LI=Rv(er,(t=>{const e=t>-MI,n=t<MI,r=Math.exp(t);let s;return s=n?r:e?t:Math.log(1+r),s})),zI={kernelName:er,backendName:"cpu",kernelFunc:LI};function BI(t){const{inputs:e,attrs:n,backend:r}=t,{x:s}=e,{perm:a}=n;Iv(s,"transpose");const i=s.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=s.shape[a[t]];const u=nI(r.data.get(s.dataId).values,s.shape,s.dtype,a,o);return{dataId:r.write(u,o,s.dtype),shape:o,dtype:s.dtype}}const PI={kernelName:gr,backendName:"cpu",kernelFunc:BI},WI={kernelName:sr,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockShape:a,paddings:i}=r;Iv([s],"spaceToBatchND");const o=Y(a),u=[[0,0]];u.push(...i);for(let t=1+a.length;t<s.shape.length;++t)u.push([0,0]);const l=mI.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),c=zp(l.shape,a,o,!1),h=Bp(c.length,a.length,!1),p=Pp(l.shape,a,o,!1),d=sk({inputs:{x:l},backend:n,attrs:{shape:c}}),f=BI({inputs:{x:d},backend:n,attrs:{perm:h}}),m=sk({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}},VI=Rv(nr,(t=>Math.sqrt(t))),UI={kernelName:nr,backendName:"cpu",kernelFunc:VI},GI={kernelName:ur,backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;Iv(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let t=0;t<s.length;++t){const e=s[t];a[t]=e*e}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},HI=Lv(((t,e)=>{const n=t-e;return n*n})),jI=Zv(or,HI),qI={kernelName:or,backendName:"cpu",kernelFunc:jI},KI=Rv(vr,((t,e)=>{const n=e;return isNaN(t)?NaN:t>0?1:n.alpha})),XI={kernelName:vr,backendName:"cpu",kernelFunc:KI},YI=Rv(pr,(t=>Math.tan(t))),JI={kernelName:pr,backendName:"cpu",kernelFunc:YI},ZI=Rv(dr,(t=>Math.tanh(t)));function QI(t,e,n,r){const s=it(e,n)[0],a=[1,n[0],1];for(let t=0;t<s;t++)a[0]*=n[t];a[1]=n[s];for(let t=s+1;t<n.length;t++)a[2]*=n[t];const i={},o=new Int32Array(n[s]),u=new Zr(a,r,t),l=[],c=1===a[0]&&1===a[2];for(let e=0;e<n[s];e++){let n;if(c)n=t[e].toString();else{const t=[];for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)t.push(u.get(n,e,r));n=t.join(",")}if(void 0!==i[n])o[e]=i[n];else{const t=Object.keys(i).length;i[n]=t,o[e]=t,l.push(e)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new Zr(h,r);l.forEach(((t,e)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)p.set(u.get(n,t,r),n,e,r)}));const d=n.slice();return d[s]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const t$=[uk,ck,pk,fk,rk,gk,bk,wk,kk,$k,Sk,ok,Ck,Jv,Rk,Fk,qv,Lk,Pk,Wk,Bk,Uk,Gk,Vk,jk,Kk,Yk,Jk,Zk,Qk,eN,tN,sN,_v,pN,mN,bN,FN,_N,ON,zN,BN,PN,Mv,WN,Ok,UN,HN,qN,YN,ZN,tI,sI,aI,iI,rI,oI,kN,lI,hI,fI,mI,Pv,Xv,yI,Vv,Gv,ak,bI,wI,NI,CI,EI,RI,FI,OI,$N,zI,WI,UI,GI,qI,XI,EN,JI,{kernelName:dr,backendName:"cpu",kernelFunc:ZI},PI,{kernelName:yr,backendName:"cpu",kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{axis:s}=n,{x:a}=e;Iv(a,"unique");const i=r.data.get(a.dataId).values,{outputValues:o,outputShape:u,indices:l}=QI(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([l.length],"int32",l)]}}];for(const t of t$)Dr(t);const e$={},n$={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function r$(t){if(!(t in e$)){const e=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);return e.addEventListener("webglcontextlost",(e=>{e.preventDefault(),delete e$[t]}),!1),1===t?e.getContext("webgl",n$)||e.getContext("experimental-webgl",n$):e.getContext("webgl2",n$)}(t);if(null===e)return console.log("Could not get context for WebGL version",t),null;e$[t]=e}const e=e$[t];return e.isContextLost()?(delete e$[t],r$(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),e$[t])}var s$,a$,i$;function o$(t,e){return[e,t]}function u$(t){const e=Y(t);return et(Math.ceil(e/4))}function l$(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function c$(t,e){const n=t;let r,s,a,i,o,u,l,c,h,p;return 2===Ft().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,l=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(r=t.RGBA,s=t.RGBA,a=t.RGBA,i=n.RGBA,o=t.RGBA,l=4,c=4,h=null!=e?e.HALF_FLOAT_OES:null,p=t.FLOAT),u=t.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function h$(t,e){const n=e();return Ft().getBool("DEBUG")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${e}`}}(t,e))}(t),n}function p$(t){return!!(Ft().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function d$(t,e){return v$(t,(()=>t.getExtension(e)),'Extension "'+e+'" not supported on this browser.')}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(s$||(s$={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(a$||(a$={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(i$||(i$={}));const f$=/ERROR: [0-9]+:([0-9]+):/g;function m$(t,e){if(h$(t,(()=>t.validateProgram(e))),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function g$(t,e,n,r,s,a,i){const o=t.getAttribLocation(e,n);return-1!==o&&(h$(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,r))),h$(t,(()=>t.vertexAttribPointer(o,s,t.FLOAT,!1,a,i))),h$(t,(()=>t.enableVertexAttribArray(o))),!0)}function y$(t,e,n,r){h$(t,(()=>function(t,e,n){(function(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(t,n),h$(t,(()=>t.activeTexture(t.TEXTURE0+n))),h$(t,(()=>t.bindTexture(t.TEXTURE_2D,e)))}(t,e,r))),h$(t,(()=>t.uniform1i(n,r)))}function b$(t,e,n){h$(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,n))),h$(t,(()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)))}function x$(t,e){h$(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,e))),h$(t,(()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)))}function w$(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${e}`}}(t,e))}function v$(t,e,n){const r=h$(t,(()=>e()));if(null==r)throw new Error(n);return r}function k$(t,e=2){return Y(t.slice(0,t.length-e))}function N$(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function I$(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[k$(t),...N$(t)]),e}function $$(t){return t%2==0}function S$(t,e){if(Z(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if($$(n)&&$$(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&$$(t[0])&&$$(e[0])}let C$,T$;function E$(t,e){return null!=t.getExtension(e)}function A$(t){try{if(null!=r$(t))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function R$(t){const e=c$(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),s}function D$(t,e){Array.isArray(t)||(t=[t]),t.forEach((t=>{null!=t&&j("complex64"!==t.dtype,(()=>`${e} does not support complex64 tensors in the WebGL backend.`))}))}const F$=Ft();F$.registerFlag("HAS_WEBGL",(()=>F$.getNumber("WEBGL_VERSION")>0)),F$.registerFlag("WEBGL_VERSION",(()=>A$(2)?2:A$(1)?1:0)),F$.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),F$.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===F$.get("WEBGL_VERSION"))),F$.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),F$.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),F$.registerFlag("WEBGL_PACK",(()=>F$.getBool("HAS_WEBGL"))),F$.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>F$.getBool("WEBGL_PACK"))),F$.registerFlag("WEBGL_PACK_CLIP",(()=>F$.getBool("WEBGL_PACK"))),F$.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!1)),F$.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>F$.getBool("WEBGL_PACK"))),F$.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>F$.getBool("WEBGL_PACK"))),F$.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>F$.getBool("WEBGL_PACK"))),F$.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>F$.getBool("WEBGL_PACK"))),F$.registerFlag("WEBGL_PACK_REDUCE",(()=>F$.getBool("WEBGL_PACK"))),F$.registerFlag("WEBGL_LAZILY_UNPACK",(()=>F$.getBool("WEBGL_PACK"))),F$.registerFlag("WEBGL_CONV_IM2COL",(()=>F$.getBool("WEBGL_PACK"))),F$.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(t){if(null==C$){const e=r$(t);C$=e.getParameter(e.MAX_TEXTURE_SIZE)}return C$}(F$.getNumber("WEBGL_VERSION")))),F$.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(t){if(null==T$){const e=r$(t);T$=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,T$)}(F$.getNumber("WEBGL_VERSION")))),F$.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const t=F$.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=r$(t);return e=E$(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:E$(n,"EXT_disjoint_timer_query")?1:0,e}(t)})),F$.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>F$.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!ks())),F$.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(t){if(0===t)return!1;const e=r$(t);if(1===t){if(!E$(e,"OES_texture_float"))return!1}else if(!E$(e,"EXT_color_buffer_float"))return!1;return R$(e)}(F$.getNumber("WEBGL_VERSION")))),F$.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!F$.getBool("WEBGL_FORCE_F16_TEXTURES")&&F$.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),F$.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(t){if(0===t)return!1;const e=r$(t);if(1!==t){if(E$(e,"EXT_color_buffer_float"))return R$(e);const t="EXT_color_buffer_half_float";if(E$(e,t)){const n=e.getExtension(t);return function(t,e){const n=c$(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r),t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,s),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(s),a}(e,n)}return!1}return!!E$(e,"OES_texture_float")&&!!E$(e,"WEBGL_color_buffer_float")&&R$(e)}(F$.getNumber("WEBGL_VERSION")))),F$.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(t=F$.getNumber("WEBGL_VERSION"))&&null!=r$(t).fenceSync;var t})),F$.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>F$.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),F$.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)}));const{simpleAbsImpl:_$,addImpl:O$,ceilImpl:M$,expImpl:L$,expm1Impl:z$,floorImpl:B$,logImpl:P$,maxImpl:W$,multiplyImpl:V$,rsqrtImpl:U$,sliceImpl:G$,subImpl:H$,transposeImpl:j$,uniqueImpl:q$}=M;class K${constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map(((t,e)=>`T${e}`));const n=[];this.variableNames.forEach((t=>{n.push(`float v${t} = get${t}AtOutCoords();`)}));const r=this.variableNames.map((t=>`v${t}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class X${constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map(((t,e)=>`T${e}`));const n=[];this.variableNames.forEach((t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)}));const r=this.variableNames.map((t=>`v${t}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class Y${constructor(t,e,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=t;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const i="max"===e?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function J$(t,e){return["x","y","z","w","u","v"].slice(0,e).map((e=>`${t}.${e}`))}function Z$(t,e){return 1===e?[t]:J$(t,e)}function Q$(){let t,e,n,r,s,a,i,o,u,l;return 2===Ft().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:u,defineRound:l}}function tS(t,e,n="index"){const r=kt(e);return r.map(((e,s)=>`int ${t[s]} = ${n} / ${e}; ${s===r.length-1?`int ${t[s+1]} = ${n} - ${t[s]} * ${e}`:`index -= ${t[s]} * ${e}`};`)).join("")}function eS(t){const e=kt(t).map((t=>t.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const nS="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:rS}=g;function sS(t,e,n,r){const s=[];t.forEach((t=>{const e=Y(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?s.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(s.push(`uniform sampler2D ${t.name};`),s.push(`uniform int offset${t.name};`))}));const a=s.join("\n"),i=t.map((t=>function(t,e,n=!1){let r="";r+=n?iS(t):aS(t);const s=t.shapeInfo.logicalShape,a=e.logicalShape;return s.length<=a.length&&(r+=n?function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.shapeInfo.logicalShape.length,i=e.logicalShape.length,o=rS(t.shapeInfo.logicalShape,e.logicalShape),u=dS(i),l=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((t=>`coords.${h[t+l]} = 0;`)).join("\n");let p="";p=i<2&&a>0?"coords":t.shapeInfo.logicalShape.map(((t,e)=>`coords.${h[e+l]}`)).join(", ");let d="return outputValue;";const f=1===Y(t.shapeInfo.logicalShape),m=1===Y(e.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const t=a-2,e=a-1;o.indexOf(t)>-1&&o.indexOf(e)>-1?d="return vec4(outputValue.x);":o.indexOf(t)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(e)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${p});\n      ${d}\n    }\n  `}(t,e):function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.texShape,i=t.shapeInfo.texShape,o=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&o===u&&null==t.shapeInfo.flatOffset&&Z(i,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=dS(u),c=rS(t.shapeInfo.logicalShape,e.logicalShape),h=u-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":u<2&&c.length>=1?"coords = 0;":c.map((t=>`coords.${d[t+h]} = 0;`)).join("\n");let f="";return f=u<2&&o>0?"coords":t.shapeInfo.logicalShape.map(((t,e)=>`coords.${d[e+h]}`)).join(", "),`\n    float ${s}() {\n      ${l} coords = getOutputCoords();\n      ${p}\n      return get${r}(${f});\n    }\n  `}(t,e)),r}(t,e,r))).join("\n"),o=e.texShape,u=Q$(),l=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,h,p=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${oS}\n    ${uS}\n    ${lS}\n  `}(u);return e.isPacked?(c=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return 1===n[0]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(Z(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[2]/2),s=r*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),s=r*Math.ceil(t[t.length-2]/2);let a=s,i="",o="b, r, c";for(let e=2;e<t.length-1;e++)a*=t[t.length-e-1],i=`\n      int b${e} = index / ${a};\n      index -= b${e} * ${a};\n    `+i,o=`b${e}, `+o;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${o});\n    }\n  `}(t,e)}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(u)):(c=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return 1===(n=e)[0]?`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `;case 2:return function(t,e){return Z(t,e)?`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `:1===t[1]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===t[0]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=tS(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=tS(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=tS(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=tS(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(`${t.length}-D output sampling is not yet supported`)}var n}(e.logicalShape,o),h=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),r&&(p+=cS),[p,l,h,a,c,i,n].join("\n")}function aS(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[r,s]=t.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[a,i]=t.shapeInfo.texShape;return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${hS(e)});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${pS(t)}\n      }\n    `;const r=t.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=hS(e);return 1===a?`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `:1===s?`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape;if(null!=s&&Z(e,s)){const t=s[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${s[1]}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=ot(e),o=a;if(o.length<e.length){const e=["row","col"];return`\n      ${aS(fS(t,o))}\n      float ${r}(int row, int col) {\n        return ${r}(${mS(e,i)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${pS(t)}\n      }\n    `;const u=s[0],l=s[1],c=hS(n);return 1===l?`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `:1===u?`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${l}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${u}, ${l}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[1]*e[2],a=e[2],{newShape:i,keptDims:o}=ot(e),u=i;if(u.length<e.length){const e=["row","col","depth"];return`\n        ${aS(fS(t,u))}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${mS(e,o)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${a}, 1)));\n        ${pS(t)}\n      }\n    `;const l=t.shapeInfo.texShape,c=l[0],h=l[1],p=t.shapeInfo.flatOffset;if(h===s&&null==p)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${a} + depth + ${hS(n)};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[3],a=e[2]*s,i=e[1]*a,{newShape:o,keptDims:u}=ot(e);if(o.length<e.length){const e=["row","col","depth","depth2"];return`\n      ${aS(fS(t,o))}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${mS(e,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${s}, 1)));\n        ${pS(t)}\n      }\n    `;const l=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===s&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${hS(n)});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[4],a=e[3]*s,i=e[2]*a,o=e[1]*i,{newShape:u,keptDims:l}=ot(e);if(u.length<e.length){const e=["row","col","depth","depth2","depth3"];return`\n      ${aS(fS(t,u))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${mS(e,l)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${s})) +\n          depth3;\n        ${pS(t)}\n      }\n    `;const c=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${hS(n)};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=ot(e);if(s.length<e.length){const e=["row","col","depth","depth2","depth3","depth4"];return`\n      ${aS(fS(t,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${mS(e,a)});\n      }\n    `}const i=e[5],o=e[4]*i,u=e[3]*o,l=e[2]*u,c=e[1]*l;if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${pS(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${hS(n)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function iS(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name;return`\n    vec4 ${"get"+e.charAt(0).toUpperCase()+e.slice(1)}() {\n      return ${Q$().texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Q$();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=s[0],i=s[1],o=Q$();if(null!=s&&Z(e,s))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(e[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===e[0]){const n=[1,2],s=["b","row","col"];return`\n        ${iS(fS(t,e.slice(1)))}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${mS(s,n)});\n        }\n      `}const i=a[0],o=a[1],u=Math.ceil(e[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${u*Math.ceil(e[1]/2)}, ${u}, b, row, col);\n      return ${Q$().texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,r=t.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],u=i[1],l=Math.ceil(e[n-1]/2);let c=l*Math.ceil(e[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let t=2;t<n-1;t++)h=`int b${t}, `+h,c*=e[n-t-1],p=`b${t} * ${c} + `+p;return`\n    vec4 ${s}(${h}) {\n      int index = ${p};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${o});\n      return ${Q$().texture2D}(${r}, uv);\n    }\n  `}(t)}}const oS="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",uS="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",lS="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",cS="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function hS(t){return`offset${t}`}function pS(t){const e=t.name,n=Y(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function dS(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function fS(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function mS(t,e){return e.map((e=>t[e])).join(", ")}class gS{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,j(t.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=t[t.length-1],a=Math.ceil(s/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,u=dS(o),l=Z$("coords",o);let c,h;if(1===a){h=o+1;const t=dS(h);c=`\n        ${t} sourceLocR = ${t}(${l.join()}, 0);\n        ++${l[o-1]};\n        ${t} sourceLocG = ${t}(${l.join()}, 0);\n        ++${l[o-2]};\n        ${t} sourceLocA = ${t}(${l.join()}, 0);\n        --${l[o-1]};\n        ${t} sourceLocB = ${t}(${l.join()}, 0);\n        --${l[o-2]};`}else h=o,c=`\n        ${u} sourceLocR = coords;\n        ++${l[o-1]};\n        ${u} sourceLocG = coords;\n        ++${l[o-2]};\n        ${u} sourceLocA = coords;\n        --${l[o-1]};\n        ${u} sourceLocB = coords;\n        --${l[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map((t=>"int "+t)),m=Z$("sourceLocR",h-1).concat("inIdx.r"),g=Z$("sourceLocG",h-1).concat("inIdx.g"),y=Z$("sourceLocB",h-1).concat("inIdx.b"),b=Z$("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,k=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${l[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class yS{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterHeight,u=t.effectiveFilterWidth,l=o-1-t.padInfo.top,c=u-1-t.padInfo.left,h=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class bS{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,u=t.dilationHeight,l=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth,d=c-1-t.padInfo.front,f=h-1-t.padInfo.top,m=p-1-t.padInfo.left,g=1/(e*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const xS="return (a < 0.) ? b * a : a;";class wS{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=To(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const vS="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class kS{constructor(t,e,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=To(e,n);const s=this.outputShape.length;let a="";if(r)if(0===s||1===Y(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${dS(s)} coords = getOutputCoords();\n        `,1===s)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=Z$("coords",s);a+=`\n            bool nextRowOutOfBounds =\n              (${t[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${t[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}class NS{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class IS{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class $S{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class SS{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class CS{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a="channelsLast"===t.dataFormat,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left,u=a?1:2,l=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class TS{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${s};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ES{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=e-1-t.padInfo.front,u=n-1-t.padInfo.top,l=r-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class AS{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class RS{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,o=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class DS{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,o=t.strideWidth,u=t.dilationHeight,l=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,p=4*Math.floor(t.inChannels/4),d=t.inChannels%4,f="channelsLast"===t.dataFormat,m=f?1:2,g=f?2:3,y=f?3:1;let b="",x="";n&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const w=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${y}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${l};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===d}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===d}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===d}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}class FS{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,u=t.dilationHeight,l=t.dilationWidth,c=t.filterDepth,h=t.filterHeight,p=t.filterWidth,d=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class _S{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,u=t.strideHeight,l=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=t.outChannels/t.inChannels;let m="",g="";n&&(m=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,g="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${a}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${y}\n        ${g}\n        setOutput(result);\n      }\n    `}}class OS{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,u=t.strideHeight,l=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=d;let m="int xR; int xC; int xCOffset;";for(let t=0;t<p;t++)for(let e=0;e<d;e++)m+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<p;t++)for(let e=0;e<f;e++){const n=2*e;if(m+=`\n          xR = xRCorner + ${t*c};\n          xC = xCCorner + ${n*h};\n        `,1===l){if(n<d&&(m+=o%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${s} && xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<d)){const e=o%2==0?V(h):h;h%2==0&&o%2==1||h%2!=0&&o%2!=1?(m+=`\n                  xCOffset = xC + ${o%2} + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(m+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${s} &&\n                      xCOffset >= 0 && xCOffset < ${a}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):m+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<d&&(m+=`\n              if(xR >= 0 && xR < ${s}) {\n            `,o%2==1?(m+=`\n                xCOffset = xC + 1 - ${l};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<d&&(m+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${l};\n                  if(xCOffset >= 0 && xCOffset < ${a}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(m+=`\n                if(xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${l};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<d&&(m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),m+="}");n<d&&(m+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<d&&(m+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<p;t++)for(let e=0;e<d;e++)m+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let g="",y="";n&&(g=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,y="result = activation(result);");const b=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${m}\n\n        vec4 result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class MS{constructor(t,e,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,u]=t,[l]=e,[c,h]=n;this.outputShape=[l,c,h,u];const p="bilinear"===r?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class LS{constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const r=t.length,s=e?"0.0":`getX(${zS(r,"coords")})`,a=t[t.length-1];let i="",o="";e?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${dS(r)} coords = getOutputCoords();\n        int end = ${BS(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${BS(r,"coords")} = idx;\n          val += getX(${zS(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.index&&(this.index=e.getUniformLocation(n,"index")),e.gl.uniform1f(this.index,t)}}}function zS(t,e){if(1===t)return`${e}`;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}function BS(t,e){if(1===t)return`${e}`;if(2===t)return`${e}.y`;if(3===t)return`${e}.z`;if(4===t)return`${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class PS{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=s$.DENSE;const e=u$(t),n=Q$();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${tS(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class WS{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=s$.DENSE;const e=u$(t),n=Q$();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${tS(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class VS{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class US{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class GS{constructor(t){this.variableNames=["A"],this.outTexUsage=a$.DOWNLOAD;const e=Q$();this.outputShape=t,this.userCode=`\n      ${nS}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class HS{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=a$.DOWNLOAD;const e=Q$();this.outputShape=t,this.userCode=`\n      ${nS}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class jS{constructor(t,e,n=!1){this.variableNames=["A"];const r=Q$(),[s,a]=e;this.outputShape=t;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${eS(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class qS{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=Q$(),[s,a]=e;this.outputShape=t;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let n=0;n<=1;n++){const o=2*e+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${eS(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}class KS{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class XS{constructor(t,e,n){this.variableNames=["A","indices"];const r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;const s=dS(this.rank),a=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let n=0;n<t.length;n++)n===e?s.push(`int(getIndices(${r[n]}))`):s.push(`${r[n]}`);return s.join()}(t,n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}class YS{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const r=dS(e.length),s=dS(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function JS(t,e,n,r,s,a){!function(t,e){const n=Ft().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0)throw new Error(`Requested texture size [${t}x${e}] is invalid.`);if(t>n||e>n)throw new Error(`Requested texture size [${t}x${e}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(e,n);const i=function(t){return v$(t,(()=>t.createTexture()),"Unable to create WebGLTexture.")}(t),o=t.TEXTURE_2D;return h$(t,(()=>t.bindTexture(o,i))),h$(t,(()=>t.texParameteri(o,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE))),h$(t,(()=>t.texParameteri(o,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE))),h$(t,(()=>t.texParameteri(o,t.TEXTURE_MIN_FILTER,t.NEAREST))),h$(t,(()=>t.texParameteri(o,t.TEXTURE_MAG_FILTER,t.NEAREST))),h$(t,(()=>t.texImage2D(o,0,r,e,n,0,s,a,null))),h$(t,(()=>t.bindTexture(t.TEXTURE_2D,null))),i}function ZS(t){return t.internalFormatFloat}function QS(t){return t.internalFormatHalfFloat}function tC(t){return t.downloadTextureFormat}function eC(t){return t.internalFormatPackedFloat}function nC(t){return t.internalFormatPackedHalfFloat}class rC{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=Ft().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){e$[t]=e}(e,t)):this.gl=r$(e);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===Ft().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=d$(this.gl,t),E$(this.gl,e))this.textureHalfFloatExtension=d$(this.gl,e);else if(Ft().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),E$(this.gl,r))this.colorBufferHalfFloatExtension=d$(this.gl,r);else if(Ft().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",E$(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!E$(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function(t){return function(t,e){const n=v$(t,(()=>t.createBuffer()),"Unable to create WebGLBuffer");return h$(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,n))),h$(t,(()=>t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW))),n}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(t){return function(t,e){const n=v$(t,(()=>t.createBuffer()),"Unable to create WebGLBuffer");return h$(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n))),h$(t,(()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW))),n}(t,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(t){return v$(t,(()=>t.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=c$(this.gl,this.textureHalfFloatExtension)}get debug(){return Ft().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;h$(t,(()=>t.finish())),h$(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,null))),h$(t,(()=>t.deleteFramebuffer(this.framebuffer))),h$(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,null))),h$(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null))),h$(t,(()=>t.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=o$(e,n);return JS(t,s,a,ZS(r),r.textureFormatFloat,t.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=o$(e,n);return JS(t,s,a,QS(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=o$(e,n);return JS(t,s,a,tC(r),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n){h$(t,(()=>t.bindTexture(t.TEXTURE_2D,e))),n.data instanceof Uint8Array?h$(t,(()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data))):h$(t,(()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n))),h$(t,(()=>t.bindTexture(t.TEXTURE_2D,null)))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,r){this.throwIfDisposed(),function(t,e,n,r,s,a){let i,o,u;h$(t,(()=>t.bindTexture(t.TEXTURE_2D,e))),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),o=t.UNSIGNED_BYTE,u=t.RGBA):(i=new Float32Array(n*r*4),o=t.FLOAT,u=a.internalFormatPackedFloat),i.set(s),h$(t,(()=>t.texImage2D(t.TEXTURE_2D,0,u,n,r,0,t.RGBA,o,i))),h$(t,(()=>t.bindTexture(t.TEXTURE_2D,null)))}(this.gl,t,e,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=l$(e,n);return JS(t,s,a,nC(r),t.RGBA,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=l$(e,n);return JS(t,s,a,eC(r),t.RGBA,t.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(x$(this.gl,this.framebuffer),this.outputTexture=null),h$(this.gl,(()=>this.gl.deleteTexture(t)))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,(()=>function(t,e,n,r){const[s,a]=o$(e,n),i=new Uint8Array(e*n*4);return h$(t,(()=>t.readPixels(0,0,s,a,r.downloadTextureFormat,t.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,e,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(t,e,n,r,s,a){return function(t,e,n,r,s,a,i,o){const u=t,l=new Float32Array(function(t,e){const[n,r]=l$(t,e);return n*r*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}(this.gl,t,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const r=t,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const r=function(t,e,n,r){const s=t.createBuffer();h$(t,(()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,s)));const a=16*e*n;return h$(t,(()=>t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ))),h$(t,(()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0))),h$(t,(()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null))),s}(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(Ft().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=r.clientWaitSync(s,0,0);return t===r.ALREADY_SIGNALED||t===r.CONDITION_SATISFIED},e=s}else Ft().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,Ft().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,(()=>function(t,e,n){const r=new Float32Array(e*n*4);return h$(t,(()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,r))),r}(this.gl,e,n)))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=function(t,e){const n=v$(t,(()=>t.createShader(t.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(h$(t,(()=>t.shaderSource(n,e))),h$(t,(()=>t.compileShader(n))),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){const n=f$.exec(e);if(null==n)return console.log(`Couldn't parse line number in error: ${e}`),void console.log(t);const r=+n[1],s=t.split("\n"),a=s.length.toString().length+2,i=s.map(((t,e)=>rt((e+1).toString(),a)+t));let o=0;for(let t=0;t<i.length;t++)o=Math.max(i[t].length,o);const u=i.slice(0,r-1),l=i.slice(r-1,r),c=i.slice(r);console.log(u.join("\n")),console.log(e.split("\n")[0]),console.log(`%c ${rt(l[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e,t),r=function(t){const e=Q$();return function(t,e){const n=v$(t,(()=>t.createShader(t.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(h$(t,(()=>t.shaderSource(n,e))),h$(t,(()=>t.compileShader(n))),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(t,`${e.version}\n    precision highp float;\n    ${e.attribute} vec3 clipSpacePos;\n    ${e.attribute} vec2 uv;\n    ${e.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(e),s=function(t){return v$(t,(()=>t.createProgram()),"Unable to create WebGLProgram.")}(e);return h$(e,(()=>e.attachShader(s,r))),h$(e,(()=>e.attachShader(s,n))),function(t,e){if(h$(t,(()=>t.linkProgram(e))),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}(e,s),this.debug&&m$(e,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(t,e,n){return h$(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,n))),g$(t,e,"clipSpacePos",n,3,20,0)&&g$(t,e,"uv",n,2,20,12)}(e,this.program,this.vertexBuffer)),s}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&h$(this.gl,(()=>this.gl.deleteProgram(t)))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&m$(this.gl,this.program),h$(this.gl,(()=>this.gl.useProgram(t)))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n){return v$(t,(()=>t.getUniformLocation(e,n)),'uniform "'+n+'" not present in program.')}(this.gl,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),h$(this.gl,(()=>this.gl.getAttribLocation(t,e)))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),y$(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[r,s]=l$(e,n);this.setOutputMatrixTextureDriver(t,r,s)}setOutputMatrixWriteRegion(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&m$(this.gl,this.program),w$(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),h$(t,(()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),h$(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=d$(this.gl,2===Ft().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Ft().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===Ft().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await st((()=>this.disposed||this.isQueryAvailable(t,Ft().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(t,Ft().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise((e=>{this.addItemToPoll((()=>t.isFencePassed()),(()=>e()))}))}pollItems(){const t=function(t){let e=0;for(;e<t.length&&t[e]();++e);return e-1}(this.itemsToPoll.map((t=>t.isDoneFn)));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||st((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),b$(this.gl,t,this.framebuffer),this.debug&&w$(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(b$(this.gl,this.outputTexture,this.framebuffer),this.debug&&w$(this.gl)):x$(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const r=this.gl;b$(r,t,this.framebuffer),this.debug&&w$(r),this.outputTexture=t,h$(r,(()=>r.viewport(0,0,e,n))),h$(r,(()=>r.scissor(0,0,e,n)))}setOutputMatrixWriteRegionDriver(t,e,n,r){this.throwIfDisposed(),h$(this.gl,(()=>this.gl.scissor(t,e,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function sC(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach(((t,n)=>{const r=t.logicalShape,s=e[n],a=s.shape;if(!Z(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(t.isUniform&&s.isUniform)return;const i=t.texShape,o=s.isUniform?null:s.texData.texShape;if(!Z(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}class aC{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=s*r,m=Q$(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)x+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${e[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${e[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}class iC{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let o;this.outputShape=t;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class oC{constructor(t,e,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class uC{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let o;this.outputShape=t;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}class lC{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,s=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=s-1-t.padInfo.top,o=a-1-t.padInfo.left,u=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class cC{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterDepth,u=t.effectiveFilterHeight,l=t.effectiveFilterWidth,c=o-1-t.padInfo.front,h=u-1-t.padInfo.top,p=l-1-t.padInfo.left,d=o*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class hC{constructor(t,e,n,r=!1,s=!1,a=!1,i=null,o=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const u=r?t[1]:t[2],l=Math.ceil(u/2),c=r?"i * 2, rc.y":"rc.y, i * 2",h=s?"rc.z, i * 2":"i * 2, rc.z",p=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let f="",m="";i&&(f=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,m="result = activation(result);");const g=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights");let y="rc.x",b="rc.x";t[0]<e[0]?y=`int(min(float(rc.x), ${t[0]-1}.))`:e[0]<t[0]&&(b=`int(min(float(rc.x), ${e[0]-1}.))`),this.userCode=`\n      ${f}\n\n      const float sharedDimension = ${l}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${l}; i++) {\n          int batchA = ${y};\n          int batchB = ${b};\n          vec4 a = getMatrixA(batchA, ${c});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${d[0]});\n          result += (${p[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${m}\n\n        setOutput(result);\n      }\n    `}}class pC{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class dC{constructor(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class fC{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=Z$("rc",e),r=dS(e),s=function(t,e,n){if(1===t)return`rc > ${e[0]}`;let r="";for(let s=t-2;s<t;s++)r+=`${n[s]} >= ${e[s]}`,s<t-1&&(r+="||");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){const n=t.length,r=function(t,e){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<t;n++)a=`${e[e.length-1-n]},`+a;n.push(a)}return n}(n,e);return 1===n?`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class mC{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=dS(r),a=e.map((t=>t[0])).join(","),i=e.map(((e,n)=>e[0]+t[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class gC{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=dS(r),a=e.map((t=>t[0])).join(","),i=e.map(((e,n)=>e[0]+t[n])).join(","),o=Z$("rc",r),u=Z$("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[`${s} rc = outputLoc;`,`${o[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${l}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let t=0,e=1===r?2:4;t<e;t++)d+=`\n        ${h[t]}\n        if (${p}) {\n          result[${t}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${t}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}class yC{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,o=t.strideWidth,u=t.dilationHeight,l=t.dilationWidth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.top,d=t.padInfo.left;this.outputShape=t.outShape;const f="avg"===e,m=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,g=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class bC{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,o=t.strideHeight,u=t.strideWidth,l=t.dilationDepth,c=t.dilationHeight,h=t.dilationWidth,p=t.effectiveFilterDepth,d=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=t.padInfo.front,g=t.padInfo.top,y=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const v=4*Math.floor(a/4),k=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}class xC{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=t;this.outputShape=[r,a];let i="0.0",o="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",o="min"):"max"===e&&(i="-1.0 / 1e-20",o="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}class wC{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let t=0;t<4;t++){let e="thisRC = rc;";t%2==1&&(e+="thisRC.z += 1;"),t>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${t>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${t>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${tS(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${eS(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class vC{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class kC{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class NC{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]},\n          ${u[1]/l[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${o-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class IC{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class $C{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n],c=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class SC{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const r=t.map(((n,r)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=dS(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class CC{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const r=Z$("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=dS(n);function o(n){const r=t.map(((r,s)=>function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return o(t)}(r.slice())};\n          if(${s}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",o(t)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class TC{constructor(t,e,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=dS(s.length),u=dS(a.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=e>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class EC{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=t.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class AC{constructor(t,e,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<e.length;r++)i.push(`${n[r]}`),r<t&&a.push(`${n[r]}`);r=a.join(),s=i.join()}const a=dS(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}class RC{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=dS(this.rank),n=`uniform int start[${this.rank}];`,r=function(t){if(1===t)return"sourceLoc";if(t<=6)return DC.slice(0,t).map((t=>"sourceLoc."+t)).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let s;s=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map(((t,e)=>`sourceLoc.${DC[e]} = start[${e}] + coords.${DC[e]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const DC=["x","y","z","w","u","v"];class FC{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=dS(this.rank),n=Z$("coords",this.rank),r=Z$("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map(((t,e)=>`start[${e}]`)).join()});`:t.map(((t,e)=>`${r[e]} = ${n[e]} + start[${e}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class _C{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=dS(n.length),a=dS(n.length);let i="";if(1===r)i="coords * strides + begin";else{let t=0;i=n.map(((e,r)=>(t++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${t-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${t});\n      ${s} strides = ${s}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}class OC{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const r=LC(e,n),s=zC(t,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=MC(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const t=this.freeTextures[s].shift();return this.usedTextures[s].push(t),t}let i;return r===i$.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===i$.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===i$.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===i$.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===i$.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,n,r){if(null==this.freeTextures)return;const s=LC(n,r),a=zC(e,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=MC(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),o=Ft().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=i):(this.freeTextures[a].push(t),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[a],l=u.indexOf(t);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(l,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach((t=>{this.gpgpu.deleteMatrixTexture(t)}));for(const t in this.usedTextures)this.usedTextures[t].forEach((t=>{this.gpgpu.deleteMatrixTexture(t)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function MC(t,e,n,r,s){const a=function(t,e){switch(t){case i$.PACKED_2X2_FLOAT32:return eC(e);case i$.PACKED_2X2_FLOAT16:return nC(e);case i$.UNPACKED_FLOAT32:return ZS(e);case i$.UNPACKED_FLOAT16:return QS(e);case i$.PACKED_4X1_UNSIGNED_BYTE:return tC(e);default:throw new Error(`Unknown physical texture type ${t}`)}}(e,r);let i;if(s){const[e,n]=l$(t[0],t[1]);i=e*n}else{const[e,n]=o$(t[0],t[1]);i=e*n}return i*function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${e}`)}(n,a)}function LC(t,e){if(t===a$.UPLOAD)return i$.PACKED_2X2_FLOAT32;if(t===a$.RENDER||null==t)return function(t){return Ft().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?i$.PACKED_2X2_FLOAT32:i$.UNPACKED_FLOAT32:t?i$.PACKED_2X2_FLOAT16:i$.UNPACKED_FLOAT16}(e);if(t===a$.DOWNLOAD||t===a$.PIXELS)return i$.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${t}`)}function zC(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class BC{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;const r=dS(this.rank),s=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let e=0;e<t.length;e++)r.push(`imod(${n[e]}, ${t[e]})`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}class PC{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const WC="return abs(x);",VC="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",UC="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",GC="return (x >= 0.0) ? x : (exp(x) - 1.0);",HC=`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Up};\n  float scale = ${Gp};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`,jC="return -x;",qC="return ceil(x);",KC="return floor(x);",XC="return exp(x);",YC="return exp(x) - 1.0;",JC=`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Hp};\n  float a1 = ${jp};\n  float a2 = ${qp};\n  float a3 = ${Kp};\n  float a4 = ${Xp};\n  float a5 = ${Yp};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`,ZC="return x;",QC="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",tT="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",eT="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class nT{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class rT{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=Z$("rc",e),r=dS(e),s=function(t,e){if(1===t)return"rc";let n="";for(let r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const{segment_util:sT}=g,aT=cd,iT=hd,oT=pd,uT=uh,lT={};function cT(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?QC:VC;if("elu"===t)return e?eT:GC;if("relu6"===t)return e?tT:UC;if("prelu"===t)return e?vS:xS;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class hT extends z{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!Ft().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=r$(Ft().getNumber("WEBGL_VERSION"));this.binaryCache=((e=Ft().getNumber("WEBGL_VERSION"))in lT||(lT[e]={}),lT[e]),this.gpgpu=new rC(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new OC(this.gpgpu),this.numMBBeforeWarning=null==Ft().global.screen?1024:Ft().global.screen.height*Ft().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new L(this,Pi())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,n){if((Ft().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Ft().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:a$.UPLOAD,refCount:1,complexParentRefCount:0}),r}incRef(t){this.texData.get(t).refCount++}decRef(t){this.texData.has(t)&&this.texData.get(t).refCount--}move(t,e,n,r){if(Ft().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:r,values:e,usage:a$.UPLOAD,refCount:1,complexParentRefCount:0})}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.texData.has(e)){const t=this.texData.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}readSync(t){const e=this.texData.get(t),{values:n,dtype:r,complexTensorInfos:s,slice:a,shape:i,isPacked:o}=e;if(null!=a){let e;e=o?new nT(i,ZC):new PC(i,ZC);const n=this.runWebGLProgram(e,[{dataId:t,shape:i,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;return u&&(l=Kr()),c="complex64"===r?Qp(this.readSync(s.real.dataId),this.readSync(s.imag.dataId)):this.getValuesFromTexture(t),u&&(this.downloadWaitMs+=Kr()-l),this.convertAndCacheOnCPU(t,c)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise((t=>e.push(t)))}const e=this.texData.get(t),{values:n,shape:r,slice:s,dtype:a,complexTensorInfos:i,isPacked:o}=e;if(null!=s){let e;e=o?new nT(r,ZC):new PC(r,ZC);const n=this.runWebGLProgram(e,[{dataId:t,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(t);if(!Ft().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Ft().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,l,c=null;if("complex64"!==a&&Ft().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(t);const e=this.texData.get(u.dataId);c=this.gpgpu.createBufferFromTexture(e.texture,...u$(r))}if(this.pendingRead.set(t,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const t=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);l=Qp(t[0],t[1])}else if(null==c)l=this.getValuesFromTexture(t);else{const t=Y(r);l=this.gpgpu.downloadFloat32MatrixFromBuffer(c,t)}null!=u&&this.disposeIntermediateTensorInfo(u);const h=this.convertAndCacheOnCPU(t,l),p=this.pendingRead.get(t);return this.pendingRead.delete(t),p.forEach((t=>t(h))),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),h}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const n=t[e];if(!p$(n)){if(Ft().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:r}=this.texData.get(t),s=Y(e);if(Ft().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...u$(e)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),a}const a=Ft().getBool("WEBGL_PACK")&&!0===r,i=a?I$(e):e,o=a?new HS(i):new GS(i),u=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:t}],"float32"),l=this.texData.get(u.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture,l.texShape[0],l.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),c}async time(t){const e=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t();const s=X(this.activeTimers.map((t=>t.query))).filter((t=>null!=t)),a=X(this.activeTimers.map((t=>t.name))).filter((t=>null!=t));this.activeTimers=e,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(Ft().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(s);i.kernelMs=U(t),i.getExtraProfileInfo=()=>t.map(((t,e)=>({name:a[e],ms:t}))).map((t=>`${t.name}: ${t.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Ft().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Kr(),endMs:null}}endTimer(t){return Ft().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=Kr(),t)}async getQueryTime(t){if(Ft().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;if(this.texData.get(t).complexParentRefCount>0)return void this.texData.get(t).refCount--;this.releaseGPUData(t);const{complexTensorInfos:e}=this.texData.get(t);null!=e&&(this.texData.get(e.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(e.real),this.texData.get(e.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(e.imag)),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(t),o=i&&i.origDataId||t,u=this.dataRefCount.get(o);u>1?this.dataRefCount.set(o,u-1):(this.dataRefCount.delete(o),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(e,r,s,a)));const l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return Ft().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Pi().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){const n=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&t.every((t=>null==this.texData.get(t.dataId).texture&&Y(t.shape)<e))}getGPGPUContext(){return this.gpgpu}slice(t,e,n){if(this.shouldExecuteOnCPU([t])){const r=G$(this.texData.get(t.dataId).values,e,n,t.shape,t.dtype);return this.makeOutput(n,t.dtype,r)}if(0===Y(n))return _s([],n,t.dtype);const{isPacked:r}=this.texData.get(t.dataId),s=bi(t.shape,e,n);if(r||!s){const r=Ft().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new FC(n):new RC(n),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[t],null,s)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)}shallowSlice(t,e,n){const r=this.texData.get(t.dataId),s=this.makeOutput(n,t.dtype),a=this.texData.get(s.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;let i=xi(e,t.strides);r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||t.dataId};const o=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,o+1),s}stridedSlice(t,e,n,r){const s=this.tryRunOnCpuOrThrow([t],(()=>this.cpuBackend.stridedSlice(t,e,n,r)));if(s)return s;const a=ui(e,n,r);if(a.some((t=>0===t)))return _s([],a);const i=new _C(e,r,a);return this.compileAndRun(i,[t])}reverse(t,e){const n=Ft().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new CC(t.shape,e):new SC(t.shape,e);return this.compileAndRun(n,[t])}neg(t){const e=this.tryRunOnCpuOrThrow([t],(()=>this.cpuBackend.neg(t)));if(e)return e;if(Ft().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,jC,t.dtype);const n=new PC(t.shape,jC);return this.compileAndRun(n,[t])}batchMatMul(t,e,n,r){const s=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],o=Math.max(t.shape[0],e.shape[0]);if((1===s||1===a)&&i>1e3){n&&(t=Ya(t,[0,2,1])),r&&(e=Ya(e,[0,2,1]));const s=1===a?t:t.as3D(o,i,1),u=1===a?2:1,l=1===a?e.as3D(o,1,i):e;return ao(s,l).sum(u,!0)}const u=cs(t.dtype,e.dtype),l=new hC(t.shape,e.shape,[o,s,a],n,r);return this.compileAndRun(l,[t,e],u)}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){const o=n?t.shape[2]:t.shape[1],u=r?e.shape[1]:e.shape[2],l=Math.max(t.shape[0],e.shape[0]),c=cs(t.dtype,e.dtype),h=null!=s,p=null!=i,d=a?cT(a,!0):null,f=new hC(t.shape,e.shape,[l,o,u],n,r,h,d,p),m=[t,e];return s&&m.push(s),i&&m.push(i),this.compileAndRun(f,m,c)}localResponseNormalization4D(t,e,n,r,s){const a=Ft().getBool("WEBGL_PACK_NORMALIZATION")?new uC(t.shape,e,n,r,s):new iC(t.shape,e,n,r,s);return this.compileAndRun(a,[t])}LRNGrad(t,e,n,r,s,a,i){const o=new oC(e.shape,r,s,a,i);return this.compileAndRun(o,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map((t=>Jr(t))),r=Sa(t.shape,t.dtype,n);return iT(r,e)}const n=new BC(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,n){const r=Ft().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new gC(t.shape,e,n):new mC(t.shape,e,n);return this.compileAndRun(r,[t])}gather(t,e,n){const r=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.gather(t,e,n)));if(r)return r;const s=new XS(t.shape,e.size,n);return this.compileAndRun(s,[t,e])}batchToSpaceND(t,e,n){j(t.rank<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const r=e.reduce(((t,e)=>t*e)),s=zp(t.shape,e,r),a=Bp(s.length,e.length),i=Pp(t.shape,e,r),o=Wp(n,e.length),u=Vp(i,n,e.length);return Ya(t.reshape(s),a).reshape(i).slice(o,u)}spaceToBatchND(t,e,n){j(t.rank<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const r=e.reduce(((t,e)=>t*e)),s=[[0,0]];s.push(...n);for(let n=1+e.length;n<t.shape.length;++n)s.push([0,0]);const a=t.pad(s),i=zp(a.shape,e,r,!1),o=Bp(i.length,e.length,!1),u=Pp(a.shape,e,r,!1),l=Ya(a.reshape(i),o);return qa(l,u)}reduce(t,e,n){const r=t.shape[0],s=t.shape[1],a=ul(s),i=Math.ceil(s/a),o=new xC({windowSize:a,inSize:s,batchSize:r,outSize:i},e),u=this.compileAndRun(o,[t],n);return 1===u.shape[1]?u:this.reduce(u,e,n)}argReduce(t,e,n=null){let r=t.shape[0],s=t.shape[1];null!=n&&(r=n.shape[0],s=n.shape[1]);const a=ul(s),i={windowSize:a,inSize:s,batchSize:r,outSize:Math.ceil(s/a)},o=new Y$(i,e,null==n),u=[t];null!=n&&u.push(n);const l=this.compileAndRun(o,u,"int32");return 1===l.shape[1]?l:this.argReduce(t,e,l)}argReducePacked(t,e,n=null){const r=null!=n?n.shape:t.shape,s=ul(r[r.length-1]),a=new gS(r,s,e,null==n),i=null==n?[t]:[t,n],o=this.compileAndRun(a,i,"int32");return o.rank===t.rank?this.argReducePacked(t,e,o):o}sum(t,e){Wo("sum",e,t.rank);const[n,r]=Bo(t.shape,e),s=Y(r),a=t.as2D(-1,s),i=hs(t.dtype);return this.reduce(a,"sum",i).reshape(n)}prod(t,e){const n=this.tryRunOnCpuOrThrow([t],(()=>this.cpuBackend.prod(t,e)));if(n)return n;const[r,s]=Bo(t.shape,e),a=Y(s),i=t.as2D(-1,a),o=hs(t.dtype);return this.reduce(i,"prod",o).reshape(r)}unsortedSegmentSum(t,e,n){let r=0;const s=Vo([r],t.rank);let a=t;null!=s&&(a=Ya(t,s),r=Go(1,t.rank)[0]);const i=sT.computeOutShape(a.shape,r,n),o=Y([a.shape[r]]),u=a.as2D(-1,o),l=hs(t.dtype);let c=this.segOpCompute(u,"unsortedSegmentSum",e,l,n).reshape(i);return null!=s&&(c=Ya(c,Uo(s))),c}segOpCompute(t,e,n,r,s){const a=t.shape[0],i=t.shape[1],o=sT.segOpComputeOptimalWindowSize(i,s),u=new EC({windowSize:o,inSize:i,batchSize:a,numSegments:s},e),l=this.compileAndRun(u,[t,n],r);return l.shape[1]===s?l:(n=bc(0,s).tile([i/o]),this.segOpCompute(l,e,n,r,s))}argMinMaxReduce(t,e,n){const r=[e];if(Wo("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!Ft().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,s]=Bo(t.shape,r),a=Y(s),i=t.as2D(-1,a);return this.argReduce(i,n).reshape(e)}return this.argReducePacked(t,n)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,r){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=${e}`);const s=t.shape[e];let a=t;for(let e=0;e<=Math.ceil(Math.log2(s))-1;e++){const n=new LS(t.shape,!1,r),s=n.getCustomSetupFunc(e),i=a;a=this.compileAndRun(n,[a],a.dtype,s),i.dispose()}if(n){const e=new LS(t.shape,n,r),s=a;a=this.compileAndRun(e,[a]),s.dispose()}return a}equal(t,e){if(Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");const n=new wS("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}less(t,e){const n=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.less(t,e)));if(n)return n;if(Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");const r=new wS("return float(a < b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}lessEqual(t,e){if(Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");const n=new wS("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greater(t,e){const n=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.greater(t,e)));if(n)return n;if(Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");const r=new wS("return float(a > b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}greaterEqual(t,e){if(Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const n=new wS("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalNot(t){const e=new PC(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(t,e){if(Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const n=new wS("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalOr(t,e){if(Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const n=new wS("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}select(t,e,n){const r=new AC(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],cs(e.dtype,n.dtype))}where(t){Jp("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return uT(t.shape,e)}topk(t,e,n){const r=t.dataSync();return oT(r,t.shape,t.dtype,e,n)}min(t,e){Wo("min",e,t.rank);const[n,r]=Bo(t.shape,e),s=Y(r),a=t.as2D(-1,s);return this.reduce(a,"min",a.dtype).reshape(n)}minimum(t,e){const n=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.minimum(t,e)));if(n)return n;const r=Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kS("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new wS("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(r,[t,e])}mod(t,e){const n=Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kS("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new wS("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}maximum(t,e){const n=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.maximum(t,e)));if(n)return n;const r=Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kS("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new wS("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(r,[t,e])}all(t,e){Wo("all",e,t.rank);const[n,r]=Bo(t.shape,e),s=Y(r),a=t.as2D(-1,s);return this.reduce(a,"all",a.dtype).reshape(n)}any(t,e){Wo("any",e,t.rank);const[n,r]=Bo(t.shape,e),s=Y(r),a=t.as2D(-1,s);return this.reduce(a,"any",a.dtype).reshape(n)}floorDiv(t,e){const n="int32";if(Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",n);const r=new wS("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(r,[t,e],n)}packedUnaryOp(t,e,n){const r=new nT(t.shape,e);return this.compileAndRun(r,[t],n)}packedBinaryOp(t,e,n,r,s=!1){const a=new kS(n,t.shape,e.shape,s);return this.compileAndRun(a,[t,e],r)}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>Ft().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}const e=t.map((t=>t.dtype)).reduce(((t,e)=>cs(t,e))),n=t.map((t=>t.shape)),r=Ft().getBool("WEBGL_PACK")?new X$(t[0].shape,n):new K$(t[0].shape,n);return this.compileAndRun(r,t,e)}pow(t,e){const n=Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kS("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new wS("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),r=cs(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],r)}ceil(t){if(this.shouldExecuteOnCPU([t])){const e=M$(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(Ft().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,qC,t.dtype);const e=new PC(t.shape,qC);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t])){const e=B$(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(Ft().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,KC,t.dtype);const e=new PC(t.shape,KC);return this.compileAndRun(e,[t])}sign(t){const e=new PC(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new PC(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new PC(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new PC(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new PC(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t])){const e=L$(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(Ft().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,XC,t.dtype);const e=new PC(t.shape,XC);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t])){const e=z$(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(Ft().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,YC,t.dtype);const e=new PC(t.shape,YC);return this.compileAndRun(e,[t])}softmax(t,e){const n=it([e],t.shape),r=El(t,n),s=Po(r.shape,n),a=No(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return so(i,o)}log(t){if(this.shouldExecuteOnCPU([t])){const e=P$(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(Ft().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new PC(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new PC(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new PC(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t])){const e=U$(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}const e=new PC(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new PC(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=Ft().getBool("WEBGL_PACK")?new nT(t.shape,QC):new PC(t.shape,VC),this.compileAndRun(e,[t])}relu6(t){let e;return e=Ft().getBool("WEBGL_PACK")?new nT(t.shape,tT):new PC(t.shape,UC),this.compileAndRun(e,[t])}prelu(t,e){const n=Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kS(vS,t.shape,e.shape):new wS(xS,t.shape,e.shape);return this.compileAndRun(n,[t,e])}elu(t){if(Ft().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,eT,t.dtype);const e=new PC(t.shape,GC);return this.compileAndRun(e,[t])}eluDer(t,e){const n=Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kS("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new wS("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}selu(t){const e=new PC(t.shape,HC);return this.compileAndRun(e,[t])}clip(t,e,n){let r;r=Ft().getBool("WEBGL_PACK_CLIP")?new IS(t.shape):new NS(t.shape);const s=r.getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,s)}abs(t){if(this.shouldExecuteOnCPU([t])&&"complex64"!==t.dtype){const e=_$(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,e)}if(Ft().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,WC,t.dtype);const e=new PC(t.shape,WC);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new $S(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensorInfos.real),this.makeComplexComponentTensorInfo(t,e.complexTensorInfos.imag)];return this.compileAndRun(n,r)}sigmoid(t){const e=new PC(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new PC(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}asin(t){const e=new PC(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new PC(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new PC(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}sinh(t){const e=new PC(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new PC(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new PC(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new PC(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new PC(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new PC(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new PC(t.shape,JC);return this.compileAndRun(e,[t])}step(t,e){const n=new PC(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,e,n,r,s,a){const i=t.shape,o=this.texData.get(t.dataId),u=n.inChannels,l=i[0]*i[1]*i[2],c=n.outChannels,h="channelsLast"===n.dataFormat,p=(1===l||1===c)&&u>1e3,d=i[2]%2!=0&&!!o.isPacked;if(p||!Ft().getBool("WEBGL_LAZILY_UNPACK")||!Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!d){const o=h?i[0]*i[1]*i[2]:i[0]*i[2]*i[3],u=qa(t,[1,o,n.inChannels]),l=qa(e,[1,n.inChannels,n.outChannels]),c=this.fusedBatchMatMul({a:u,b:l,transposeA:!1,transposeB:!1,bias:r,activation:s,preluActivationWeights:a});return qa(c,n.outShape)}const f=h?i[0]*i[1]*(i[2]+1):i[0]*i[2]*(i[3]+1),m={dataId:t.dataId,shape:[1,f,n.inChannels],dtype:t.dtype},g=o.shape;o.shape=o.shape.slice(),o.shape[o.shape.length-2]++,j(S$(o.shape,m.shape),(()=>`packed reshape ${o.shape} to ${m.shape} isn't free`));const y=qa(e,[1,n.inChannels,n.outChannels]),b=this.fusedBatchMatMul({a:m,b:y,transposeA:!1,transposeB:!1,bias:r,activation:s,preluActivationWeights:a}),x=this.texData.get(b.dataId);return j(x.isPacked,(()=>"batchMatMul result is expected to be packed")),o.shape=g,x.shape=n.outShape,Pi().makeTensorFromDataId(b.dataId,n.outShape,b.dtype)}conv2dWithIm2Row(t,e,n,r,s,a){const{filterWidth:i,filterHeight:o,inChannels:u,outWidth:l,outHeight:c,dataFormat:h}=n,p="channelsLast"===h,d=i*o*u,f=c*l,m=[d,f],g=t.squeeze([0]),y=e.reshape([1,d,-1]),b=new aC(m,g.shape,n),x=this.compileAndRun(b,[g]).reshape([1,m[0],m[1]]),w=null!=r,v=null!=a,k=s?cT(s,!0):null,N=new hC(x.shape,y.shape,[1,f,n.outChannels],!0,!1,w,k,v),I=[x,y];r&&I.push(r),v&&I.push(a);const $=this.compileAndRun(N,I);return p?$.reshape([1,c,l,n.outChannels]):$.reshape([1,n.outChannels,c,l])}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n,r,s,a);if(Ft().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n,r,s,a);const i=null!=r,o=null!=a,u=s?cT(s,!1):null,l=new DS(n,i,u,o),c=[t,e];return r&&c.push(r),a&&c.push(a),this.compileAndRun(l,c)}conv2d(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(Ft().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);const r=new DS(n);return this.compileAndRun(r,[t,e])}conv2dDerInput(t,e,n){const r=new CS(n);return this.compileAndRun(r,[t,e])}conv2dDerFilter(t,e,n){const r=new SS(n);return this.compileAndRun(r,[t,e])}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){const i=Ft().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,o=s?cT(s,i):null,u=[t,e],l=null!=r,c=null!=a;let h;return l&&u.push(r),c&&u.push(a),i?(h=new OS(n,l,o,c),this.compileAndRun(h,u)):(h=new _S(n,l,o,c),this.compileAndRun(h,u))}depthwiseConv2D(t,e,n){let r;return Ft().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new OS(n),this.compileAndRun(r,[t,e])):(r=new _S(n),this.compileAndRun(r,[t,e]))}depthwiseConv2DDerInput(t,e,n){const r=new RS(n);return this.compileAndRun(r,[t,e])}depthwiseConv2DDerFilter(t,e,n){const r=new AS(n);return this.compileAndRun(r,[t,e])}conv3d(t,e,n){const r=new FS(n);return this.compileAndRun(r,[t,e])}conv3dDerInput(t,e,n){const r=new ES(n);return this.compileAndRun(r,[t,e])}conv3dDerFilter(t,e,n){const r=new TS(n);return this.compileAndRun(r,[t,e])}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}avgPool3d(t,e){const n=new bC(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const r=new bS(n);return this.compileAndRun(r,[t],e.dtype)}maxPool3d(t,e){const n=new bC(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,r){const s=new bC(r,"max",!0),a=this.compileAndRun(s,[e]),i=new cC(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}resizeBilinear(t,e,n,r){const s=Ft().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new NC(t.shape,e,n,r):new kC(t.shape,e,n,r);return this.compileAndRun(s,[t],"float32")}resizeBilinearBackprop(t,e,n){const r=new vC(t,e,n);return this.compileAndRun(r,[t])}resizeNearestNeighbor(t,e,n,r){const s=new $C(t.shape,e,n,r);return this.compileAndRun(s,[t])}resizeNearestNeighborBackprop(t,e,n){const r=new IC(t,e,n);return this.compileAndRun(r,[t])}multinomial(t,e,n,r){const s=e?t:Bc(t),a=s.shape[0],i=s.shape[1],o=new pC(a,i,n),u=o.getCustomSetupFunc(r);return this.compileAndRun(o,[s],"int32",u)}oneHot(t,e,n,r){const s=new dC(t.size,e,n,r);return this.compileAndRun(s,[t])}diag(t){const e=new US(t.size);return this.compileAndRun(e,[t])}cropAndResize(t,e,n,r,s,a){const i=new MS(t.shape,e.shape,r,s,a);return this.compileAndRun(i,[t,e,n],"float32")}depthToSpace(t,e,n){j(e>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${e}`));const r=t.shape[0],s="NHWC"===n?t.shape[1]:t.shape[2],a="NHWC"===n?t.shape[2]:t.shape[3],i="NHWC"===n?t.shape[3]:t.shape[1],o=s*e,u=a*e,l=i/(e*e),c=new VS("NHWC"===n?[r,o,u,l]:[r,l,o,u],e,n);return this.compileAndRun(c,[t])}split(t,e,n){return aT(t,e,n)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=ai(0,t,n),u=[o/a,a],l=t.reshape([s,r]),c=e.reshape([s,a]);if(0===o)return ud(_s([]),n);const h=yo(0),p=new TC(s,r,l.rank,c.rank,i,u);return this.compileAndRun(p,[c,l,h]).reshape(n)}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,strides:i,outputSize:o}=ai(0,t,n),u=new TC(a,s,t.rank,e.rank,i,[o,1],!1);return this.compileAndRun(u,[e,t,r]).reshape(n)}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=ni(t,e),u=e.reshape([a,r]),l=t.reshape([t.size/i,i]),c=new YS(r,o,[a,i]);return this.compileAndRun(c,[l,u]).reshape(s)}fill(t,e,n){if("string"===(n=n||xt(e))){const r=lt(n,Y(t));return r.fill(e),Pi().makeTensor(r,t,n,this)}{const r=new KS(t,e),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[],n,s)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return ld(t,e,n)}makeTensorInfo(t,e,n){const r=this.write(n,t,e);return this.texData.get(r).usage=null,{dataId:r,shape:t,dtype:e}}makeOutput(t,e,n){const{dataId:r}=this.makeTensorInfo(t,e,n);return Pi().makeTensorFromDataId(r,t,e,this)}unpackTensor(t){const e=new rT(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new fC(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[k$(t.shape),...N$(t.shape)],r={dtype:t.dtype,shape:n,dataId:t.dataId},s=[k$(e),...N$(e)],a=new wC(s,n),i=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:r,dtype:s}=e,a=I$(r);let i;return i=n?new WS(a):new PS(a),{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:t}],s,null,!0).dataId}}runWebGLProgram(t,e,n,r,s=!1){const a=this.makeTensorInfo(t.outputShape,n),i=this.texData.get(a.dataId);if(t.packedOutput&&(i.isPacked=!0),t.outPackingScheme===s$.DENSE){const e=u$(t.outputShape);i.texShape=e.map((t=>2*t))}if(null!=t.outTexUsage&&(i.usage=t.outTexUsage),0===Y(a.shape))return i.values=ut(a.dtype,0),a;const o=[],u=e.map((e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&Y(e.shape)<=Ft().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?this.unpackTensor(e):this.packTensor(e),o.push(e),n=this.texData.get(e.dataId);else if(n.isPacked&&!S$(n.shape,e.shape)){const t=e,r=e.shape;e.shape=n.shape,e=this.packedReshape(e,r),o.push(e),n=this.texData.get(e.dataId),t.shape=r}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(a.dataId);const l={shape:a.shape,texData:i,isUniform:!1},c=function(t,e,n){let r="";e.concat(n).forEach((t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${n}_${e}`}));const s=t.userCode;let a=t.constructor.name;return a+="_"+r+"_"+s,a}(t,u,l),h=this.getAndSaveBinary(c,(()=>function(t,e,n,r){const s=e.userCode,a=n.map(((t,n)=>{const r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}})),i=a.map((t=>t.shapeInfo)),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=sS(a,o,s,e.packedInputs),l=t.createProgram(u);let c=null;const h=t.getUniformLocation(l,"NAN",!1);1===Ft().getNumber("WEBGL_VERSION")&&(c=t.getUniformLocation(l,"INFINITY",!1));const p={};for(let n=0;n<e.variableNames.length;n++){const r=e.variableNames[n],s=!1;p[r]=t.getUniformLocation(l,r,s),p[`offset${r}`]=t.getUniformLocation(l,`offset${r}`,s)}return{program:e,source:u,webGLProgram:l,uniformLocations:p,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,t,u,l))),p=null!=this.activeTimers;let d;if(p&&(d=this.startTimer()),function(t,e,n,r,s){sC(e.inShapeInfos,n),sC([e.outShapeInfo],[r]);const a=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(a,i[0],i[1]):t.setOutputMatrixTexture(a,i[0],i[1]),t.setProgram(e.webGLProgram),1===Ft().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach(((n,r)=>{const s=e.program.variableNames[r],a=e.uniformLocations[s],i=e.uniformLocations[`offset${s}`];if(null!=a)if(n.isUniform)if(Y(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(a,e)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,r)})),null!=s&&s(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,h,u,l,r),o.forEach((t=>this.disposeIntermediateTensorInfo(t))),p&&(d=this.endTimer(d),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(d)})),!Ft().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const t=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),t}return a}compileAndRun(t,e,n,r,s=!1){n=n||e[0].dtype;const a=this.runWebGLProgram(t,e,n,r,s);return Pi().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(Ft().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Ui((()=>{if(!Ft().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=Ft().getBool("DEBUG");Ft().set("DEBUG",!1);const e=this.abs(yo(1e-8)).dataSync()[0];if(Ft().set("DEBUG",t),e>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:r,values:s,texture:a,usage:i,isPacked:o}=e;if(null!=a)return;const u=null!=this.activeTimers;let l;u&&(l=Kr());let c=e.texShape;if(null==c&&(c=function(t,e=!1){let n=Ft().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(n*=2,1===(t=t.map(((e,n)=>n>=t.length-2?V(t[n]):t[n]))).length&&(t=[2,t[0]])),2!==t.length){const e=ot(t);t=e.newShape}let r=Y(t);if(t.length<=1&&r<=n)return[1,r];if(2===t.length&&t[0]<=n&&t[1]<=n)return t;if(3===t.length&&t[0]*t[1]<=n&&t[2]<=n)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=n&&t[1]*t[2]<=n)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n)return[t[0],t[1]*t[2]*t[3]];if(e){const e=k$(t);let n=2,s=2;return t.length&&([n,s]=N$(t)),r=e*(n/2)*(s/2),et(r).map((t=>2*t))}return et(r)}(n,o),e.texShape=c),null!=s){const t=I$(n);let a,i=c[1],h=c[0];const p=s instanceof Uint8Array;o?([i,h]=l$(c[0],c[1]),a=new qS(t,[h,i],p)):a=new jS(t,[h,i],p);const d=this.makeTensorInfo([h,i],r);this.texData.get(d.dataId).usage=p?a$.PIXELS:a$.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,h,s);const f=!0,m=this.runWebGLProgram(a,[d],r,null,f),g=this.texData.get(m.dataId);e.texture=g.texture,e.texShape=g.texShape,e.isPacked=g.isPacked,e.usage=g.usage,this.disposeIntermediateTensorInfo(d),this.texData.delete(m.dataId),e.values=null,u&&(this.uploadWaitMs+=Kr()-l)}else{const t=this.acquireTexture(c,i,r,o);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:r}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error(`Unknown dtype ${e}`)}(e,r)),n.values}acquireTexture(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*ft(e)}tryRunOnCpuOrThrow(t,e){if(this.shouldExecuteOnCPU(t))try{return e()}catch(t){if(Ft().getBool("IS_TEST"))throw new Error("CPU forwarding failed")}return null}}function pT(t){const{inputs:e,backend:n}=t,{x:r}=e;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}Ns()&&Qi("webgl",(()=>new hT),2);const dT={kernelName:He,backendName:"webgl",kernelFunc:pT};function fT(t){const{inputs:e,backend:n}=t,{real:r,imag:s}=e,a=n.makeTensorInfo(r.shape,"complex64"),i=n.texData.get(a.dataId),o=pT({inputs:{x:r},backend:n});n.texData.get(o.dataId).complexParentRefCount++;const u=pT({inputs:{x:s},backend:n});return n.texData.get(u.dataId).complexParentRefCount++,i.complexTensorInfos={real:o,imag:u},a}const mT={kernelName:ue,backendName:"webgl",kernelFunc:fT};function gT(t){return({inputs:e,backend:n})=>{const{x:r}=e,s=n,a=new PC(r.shape,t);return s.runWebGLProgram(a,[r],r.dtype)}}function yT({opSnippet:t,packedOpSnippet:e,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:i,backend:o})=>{const{a:u,b:l}=i,c=o;if(r&&"complex64"===u.dtype){const e=c.texData.get(u.dataId),n=c.texData.get(l.dataId),[r,s]=[[e.complexTensorInfos.real,n.complexTensorInfos.real],[e.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((e=>{const[n,r]=e,s={dataId:n.dataId,dtype:n.dtype,shape:u.shape},a={dataId:r.dataId,dtype:r.dtype,shape:l.shape},i=new wS(t,u.shape,l.shape);return c.runWebGLProgram(i,[s,a],cs(n.dtype,r.dtype))})),a=fT({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const h=a||cs(u.dtype,l.dtype);if(c.shouldExecuteOnCPU([u,l])&&null!=s){const t=c.texData.get(u.dataId),e=c.texData.get(l.dataId),[n,r]=s(u.shape,l.shape,t.values,e.values,h),a=c.makeTensorInfo(r,h);return c.texData.get(a.dataId).values=n,a}let p;return p=Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=e?new kS(e,u.shape,l.shape,n):new wS(t,u.shape,l.shape),c.runWebGLProgram(p,[u,l],h)}}const bT="return a + b;",xT=yT({opSnippet:bT,packedOpSnippet:bT,supportsComplex:!0,cpuKernelImpl:O$}),wT={kernelName:Wt,backendName:"webgl",kernelFunc:xT},vT=yT({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),kT={kernelName:Jt,backendName:"webgl",kernelFunc:vT},NT={kernelName:Zt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;D$(s,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;j(hu(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=eu(s.shape,a,i,1,o,u);if(1===l.filterWidth&&1===l.filterHeight&&Z(l.inShape,l.outShape))return pT({inputs:{x:s},backend:n});const c=new yC(l,"avg",!1);return n.runWebGLProgram(c,[s],"float32")}},IT={kernelName:Qt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:a}=e,i=a;D$([s,a],"avgPoolBackprop");const{filterSize:o,strides:u,pad:l}=r,c=eu(i.shape,o,u,1,l),h=new yS(c);return n.runWebGLProgram(h,[s],i.dtype)}};class $T{constructor(t,e,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],To(t,e),To(t,n);let i="0.0";null!=r&&(To(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(To(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class ST{constructor(t,e,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],To(t,e),To(t,n);let i="vec4(0.0)";null!=r&&(To(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(To(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const CT={kernelName:Pe,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,mean:s,variance:a,offset:i,scale:o}=t;j(s.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),j(null==i||s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),j(null==o||s.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const l=[r,s,a];let c=null;null!=i&&(c=i.shape,l.push(i));let h=null;null!=o&&(h=o.shape,l.push(o));const p=Ft().getBool("WEBGL_PACK_NORMALIZATION")?new ST(r.shape,s.shape,a.shape,c,h,u):new $T(r.shape,s.shape,a.shape,c,h,u);return e.runWebGLProgram(p,l,l[0].dtype)}},TT=yT({opSnippet:"return float(a != b);",dtype:"bool"}),ET={kernelName:Nn,backendName:"webgl",kernelFunc:TT};function AT(t){const{inputs:e,backend:n}=t,{input:r}=e;return pT({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const RT={kernelName:On,backendName:"webgl",kernelFunc:AT},DT={kernelName:ae,backendName:"webgl",kernelFunc:function t(e){const{inputs:n,backend:r,attrs:s}=e,{x:a}=n,{dtype:i}=s;if("complex64"===i){if("complex64"===a.dtype)return pT({inputs:{x:a},backend:r});const e=Pl(a.shape),n=t({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),s=fT({inputs:{real:n,imag:e},backend:r});return e.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===a.dtype){const e=AT({inputs:{input:a},backend:r}),n=t({inputs:{x:e},backend:r,attrs:{dtype:i}});return r.disposeIntermediateTensorInfo(e),n}if(!pt(a.dtype,i)){const t=pT({inputs:{x:a},backend:r});return{dataId:t.dataId,shape:t.shape,dtype:i}}if("int32"===i)return function(t,e){const n=new PC(t.shape,"return float(int(x));"),r=e.runWebGLProgram(n,[t],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(a,r);if("bool"===i){const t=r.makeTensorInfo([],"bool",ut("bool",1)),e=TT({inputs:{a,b:t},backend:r});return r.disposeIntermediateTensorInfo(t),e}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}};class FT{constructor(t){this.outputShape=[],this.outputShape=gu(t,1),this.variableNames=t.map(((t,e)=>`T${e}`));const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const r=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${r}));`)}const r=e.length,s=e[e.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class _T{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=gu(t,e);const n=this.outputShape,r=n.length,s=dS(r),a=Z$("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map(((t,e)=>`T${e}`));const o=new Array(t.length-1);o[0]=t[0][e];for(let n=1;n<o.length;n++)o[n]=o[n-1]+t[n][e];const u=i[e],l=i.slice(-2),c=i.join();let h=`if (${u} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let t=1;t<o.length;t++){const e=o[t-1];h+=`\n        if (${u} < ${o[t]}  && ${u} >= ${o[t-1]}) {\n          return getChannel(\n            getT${t}(${OT(i,u,e)}),\n            vec2(${OT(l,u,e)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${OT(i,u,d)}),\n          vec2(${OT(l,u,d)}));`,this.userCode=`\n      float getValue(${i.map((t=>"int "+t))}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function OT(t,e,n){const r=t.indexOf(e);return t.map(((t,e)=>e===r?`${t} - ${n}`:t)).join()}function MT(t){const{inputs:e,backend:n}=t,{input:r}=e;return pT({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const LT={kernelName:qe,backendName:"webgl",kernelFunc:MT};function zT(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{shape:a}=r,i=n,o=Y(s.shape),u=at(a,o),l=Y(u);j(o===l,(()=>`The new shape (${u}) has ${l} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(s.dataId);return!c.isPacked||S$(s.shape,u)||null!==c.texture&&S$(c.shape,u)?(i.incRef(s.dataId),{dataId:s.dataId,shape:u,dtype:s.dtype}):function(t,e,n){const r=[k$(t.shape),...N$(t.shape)],s={dtype:t.dtype,shape:r,dataId:t.dataId},a=[k$(e),...N$(e)],i=new wC(a,r),o=n.runWebGLProgram(i,[s],t.dtype,null,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}}(s,u,i)}const BT={kernelName:zn,backendName:"webgl",kernelFunc:zT};function PT(t,e,n){const r=t[0].dtype;if("complex64"===r){const r=t.map((t=>AT({inputs:{input:t},backend:n}))),s=t.map((t=>MT({inputs:{input:t},backend:n}))),a=PT(r,e,n),i=PT(s,e,n),o=fT({inputs:{real:a,imag:i},backend:n});return r.forEach((t=>n.disposeIntermediateTensorInfo(t))),s.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}if(t.length>Ft().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(t.length/2),s=PT(t.slice(0,r),e,n),a=PT(t.slice(r),e,n),i=PT([s,a],e,n);return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}if(Ft().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].shape.length>1){const s=new _T(t.map((t=>t.shape)),e);return n.runWebGLProgram(s,t,r)}const s=gu(t.map((t=>t.shape)),e),a=t.map((t=>zT({inputs:{x:t},attrs:{shape:[-1,Y(t.shape.slice(e))]},backend:n}))),i=new FT(a.map((t=>t.shape))),o=n.runWebGLProgram(i,a,r);a.forEach((t=>n.disposeIntermediateTensorInfo(t)));const u=zT({inputs:{x:o},attrs:{shape:s},backend:n});return n.disposeIntermediateTensorInfo(o),u}const WT={kernelName:le,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{axis:s}=r,a=it(s,e[0].shape)[0],i=gu(e.map((t=>t.shape)),a);if(0===Y(i))return n.makeTensorInfo(i,e[0].dtype,[]);const o=e.filter((t=>Y(t.shape)>0));return 1===o.length?o[0]:(mu(o.map((t=>t.shape)),a),PT(o,a,n))}},VT=gT("if (isnan(x)) return x;\n  return cos(x);\n"),UT={kernelName:ge,backendName:"webgl",kernelFunc:VT},GT=yT({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),HT={kernelName:Te,backendName:"webgl",kernelFunc:GT};class jT{constructor(t,e,n){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${r}.0`:"1.0";let i;if("real"===t)i="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function qT(t,e,n){const r=n.texData.get(t.dataId),s=Y(t.shape),a=t.shape[t.shape.length-1],i=zT({inputs:{x:t},backend:n,attrs:{shape:[s/a,a]}}).shape,o=new jT("real",i,e),u=new jT("imag",i,e),l=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:i},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:i}],c=n.runWebGLProgram(o,l,"float32"),h=n.runWebGLProgram(u,l,"float32"),p=fT({inputs:{real:c,imag:h},backend:n});n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h);const d=zT({inputs:{x:p},backend:n,attrs:{shape:t.shape}});return n.disposeIntermediateTensorInfo(d),d}const KT={kernelName:Oe,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e;return qT(r,!1,n)}};class XT{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const YT={kernelName:Le,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{image:n}=t,r=e,s=new XT(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}};class JT{constructor(t){this.variableNames=["A"];const e=Q$(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class ZT{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=Q$(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const QT={kernelName:kr,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t;let{pixels:s}=e;const{numChannels:a}=r,i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[u,l]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[l,u],h=[l,u,a];(o||i)&&(null==tE&&(tE=document.createElement("canvas").getContext("2d")),tE.canvas.width=u,tE.canvas.height=l,tE.drawImage(s,0,0,u,l),s=tE.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=a$.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),s);const d=Ft().getBool("WEBGL_PACK")?new ZT(h):new JT(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let tE;const eE={kernelName:je,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e;return qT(r,!0,n)}};class nE{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=t;this.outputShape=[r,a];const i=4*Math.floor(n/4),o=n%4;let u="sumValue += dot(values, ones);";if(null!=e){const t=1/e;u=`sumValue += dot(values * ${Q(t)?t.toPrecision(2):t}, ones);`}let l="";s%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}function rE(t,e,n,r){const s=function(t){const e=[];for(;0===e.length||1!==e[e.length-1].outSize;){const n=e.length?e[e.length-1].outSize:t[1],r=ul(n);e.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return e}(t.shape);let a=t;for(let i=0;i<s.length;i++){const{inSize:o,windowSize:u,outSize:l}=s[i];let c,h;c="mean"===n?0===i?new nE({windowSize:u,inSize:o,batchSize:t.shape[0],outSize:l},o):new nE({windowSize:u,inSize:o,batchSize:t.shape[0],outSize:l}):new xC({windowSize:u,inSize:o,batchSize:t.shape[0],outSize:l},n),h=a,a=r.runWebGLProgram(c,[a],e),h.dataId!==t.dataId&&r.disposeIntermediateTensorInfo(h)}return a}class sE{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;const r=dS(this.rank),s=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let e=0;e<t.length;e++)r[t[e]]=n[e];return r.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class aE{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=dS(this.rank),s=J$("rc",this.rank),a=new Array(this.rank);for(let t=0;t<e.length;t++)a[e[t]]=s[t];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${o}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${o}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function iE(t,e,n){const r=Ft().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new aE(t.shape,e):new sE(t.shape,e);return n.runWebGLProgram(r,[t],t.dtype)}const oE={kernelName:ln,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s,keepDims:a}=e,i=n,o=r.shape.length,u=it(s,r.shape);let l=u;const c=Vo(l,o),h=null!=c,p=i.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const t=i.texData.get(d.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=r.shape[c[t]];const n=j$(t,r.shape,r.dtype,c,e);d=i.makeTensorInfo(e,r.dtype),i.texData.get(d.dataId).values=n}else d=iE(r,c,i);l=Go(l.length,o)}Wo("max",l,o);const[f,m]=Bo(d.shape,l);let g,y=f;if(a&&(y=Po(f,u)),p){const t=i.texData.get(d.dataId).values,e=W$(t,Y(m),y,r.dtype);g=i.makeTensorInfo(y,r.dtype),i.texData.get(g.dataId).values=e}else g=function(t,e,n,r){const s=Y(e),a=zT({inputs:{x:t},attrs:{shape:[Y(t.shape)/s,s]},backend:r}),i=rE(a,t.dtype,"max",r),o=zT({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}(d,m,y,i);return h&&i.disposeIntermediateTensorInfo(d),g}},uE={kernelName:hn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;D$(s,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;j(hu(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=eu(s.shape,a,i,1,o,u);if(1===l.filterWidth&&1===l.filterHeight&&Z(l.inShape,l.outShape))return pT({inputs:{x:s},backend:n});const c=new yC(l,"max",!1);return n.runWebGLProgram(c,[s],s.dtype)}},lE={kernelName:pn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:a,output:i}=e,o=a;D$([a,i],"maxPoolBackprop");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,p=eu(o.shape,u,l,1,c,h),d=new yC(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new lC(p),g=n.runWebGLProgram(m,[s,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}},cE={kernelName:mn,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,u=n;j(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const l=[1,1];j(hu(a,l),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${l}'`));const c=eu(r.shape,s,a,l,i),[h,p]=function(t,e,n,r){let s=new yC(n,"max",!1);const a=r.runWebGLProgram(s,[t],"float32");return s=new yC(n,"max",!0,!0,e),[a,r.runWebGLProgram(s,[t],"float32")]}(r,o,c,u);return[h,p]}},hE={kernelName:gn,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{keepDims:s,axis:a}=e,i=n,o=r.shape.length,u=it(a,r.shape);let l=u;const c=Vo(l,o),h=null!=c,p=i.shouldExecuteOnCPU([r]),d=[];let f=r;if(h){if(p){const t=i.texData.get(f.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=r.shape[c[t]];const n=j$(t,r.shape,r.dtype,c,e);f=i.makeTensorInfo(e,r.dtype),i.texData.get(f.dataId).values=n}else f=iE(r,c,i);d.push(f),l=Go(l.length,o)}Wo("sum",l,o);const[m,g]=Bo(f.shape,l);let y=m;s&&(y=Po(m,u));const b=function(t,e,n,r){const s=Y(e),a=zT({inputs:{x:t},attrs:{shape:[Y(t.shape)/s,s]},backend:r}),i=rE(a,"float32","mean",r),o=zT({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}(f,g,y,i);for(const t of d)i.disposeIntermediateTensorInfo(t);return b}};class pE{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=dS(r),a=e.map((t=>t[0])).join(","),i=e.map(((e,n)=>e[0]+t[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class dE{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=dS(r),a=e.map((t=>t[0])).join(","),i=e.map(((e,n)=>e[0]+t[n])).join(","),o=Z$("rc",r),u=Z$("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===r){const t=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${t}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${l}) {\n          ${t}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const t=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${t}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${l}) {\n          ${t}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[r-2]} += 1;\n        if(${o[r-2]} < ${this.outputShape[r-2]}) {\n          ${t}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${o[r-1]} += 1;\n          if(${l}) {\n            ${t}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const fE={kernelName:xn,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r}=t,{paddings:s,mode:a}=n,i=Ft().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new dE(r.shape,s,a):new pE(r.shape,s,a);return e.runWebGLProgram(i,[r],r.dtype)}};class mE{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=To(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const gE="return a * b;",yE={kernelName:vn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{a:r,b:s}=e,a=cs(r.dtype,s.dtype);if("complex64"===r.dtype){const t=n.texData.get(r.dataId),e=n.texData.get(s.dataId),a=new mE("return areal * breal - aimag * bimag;",r.shape,s.shape),i=new mE("return areal * bimag + aimag * breal;",r.shape,s.shape),o=[{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape}],u=n.runWebGLProgram(a,o,"float32"),l=n.runWebGLProgram(i,o,"float32"),c=fT({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,s])){const t=n.texData.get(r.dataId),e=n.texData.get(s.dataId),[i,o]=V$(r.shape,s.shape,t.values,e.values,a),u=n.makeTensorInfo(o,a);return n.texData.get(u.dataId).values=i,u}let i;return i=Ft().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new kS(gE,r.shape,s.shape):new wS(gE,r.shape,s.shape),n.runWebGLProgram(i,[r,s],a)}},bE={kernelName:In,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Jp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=n,u=e;return rp(u.readSync(r.dataId),u.readSync(s.dataId),a,i,o)}},xE=sp,wE={kernelName:$n,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Jp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:u}=n,l=e,c=l.readSync(r.dataId),h=l.readSync(s.dataId),{selectedIndices:p,validOutputs:d}=xE(c,h,a,i,o,u);return[p,d]}},vE=ap,kE={kernelName:Sn,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Jp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=n,l=e,c=l.readSync(r.dataId),h=l.readSync(s.dataId),p=a,d=i,f=o,m=u,{selectedIndices:g,selectedScores:y}=vE(c,h,p,d,f,m);return[g,y]}};class NE{constructor(t,e,n,r){this.variableNames=["Image"],this.outputShape=[];const s=t[1],a=t[2],i=Math.sin(e).toFixed(3),o=Math.cos(e).toFixed(3);this.outputShape=t;const[u,l]=Lp(r,s,a),c=u.toFixed(3),h=l.toFixed(3);let p="";p="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const IE={kernelName:Nr,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:a,center:i}=e,o=n,u=new NE(r.shape,s,a,i);return o.runWebGLProgram(u,[r],r.dtype)}},$E=gT("if (isnan(x)) return x;\n  return sin(x);\n"),SE={kernelName:Jn,backendName:"webgl",kernelFunc:$E},CE=gT("return x * x;"),TE={kernelName:ur,backendName:"webgl",kernelFunc:CE},EE="return (a - b) * (a - b);",AE=yT({opSnippet:EE,packedOpSnippet:EE}),RE={kernelName:or,backendName:"webgl",kernelFunc:AE},DE="return a - b;",FE=yT({opSnippet:DE,packedOpSnippet:DE,supportsComplex:!0,cpuKernelImpl:H$}),_E={kernelName:lr,backendName:"webgl",kernelFunc:FE},OE=gT("return tan(x);"),ME=[wT,kT,NT,IT,CT,DT,mT,WT,UT,HT,KT,YT,QT,dT,eE,LT,oE,uE,lE,cE,hE,fE,yE,bE,wE,kE,ET,RT,BT,IE,SE,TE,_E,RE,{kernelName:pr,backendName:"webgl",kernelFunc:OE},{kernelName:gr,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n,i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[s[t]];let u;if(a.shouldExecuteOnCPU([r])){const t=a.texData.get(r.dataId).values,e=j$(t,r.shape,r.dtype,s,o);u=a.makeTensorInfo(o,r.dtype),a.texData.get(u.dataId).values=e}else u=iE(r,s,a);return u}},{kernelName:yr,backendName:"webgl",kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{axis:s}=n,{x:a}=e;D$(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=r.readSync(a.dataId),{outputValues:o,outputShape:u,indices:l}=q$(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([l.length],"int32",l)]}}];for(const t of ME)Dr(t);var LE=function(t,e){return(LE=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function zE(t,e){function n(){this.constructor=t}LE(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var BE=function(){return(BE=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var s in e=arguments[n])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t}).apply(this,arguments)};function PE(t,e,n,r){return new(n||(n=Promise))((function(s,a){function i(t){try{u(r.next(t))}catch(t){a(t)}}function o(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?s(t.value):new n((function(e){e(t.value)})).then(i,o)}u((r=r.apply(t,e||[])).next())}))}function WE(t,e){var n,r,s,a,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(s=(s=i.trys).length>0&&s[s.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=e.call(t,i)}catch(t){a=[6,t],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}}var VE=function(){function t(t,e){this.model=t,this.outputStride=e;var n=this.model.inputs[0].shape;j(-1===n[1]&&-1===n[2],(function(){return"Input shape ["+n[1]+", "+n[2]+"] must both be equal to or -1"}))}return t.prototype.predict=function(t){var e=this;return Ui((function(){var n=e.preprocessInput(t.toFloat()).expandDims(0),r=e.model.predict(n).map((function(t){return t.squeeze([0])})),s=e.nameOutputResults(r);return{heatmapScores:s.heatmap.sigmoid(),offsets:s.offsets,displacementFwd:s.displacementFwd,displacementBwd:s.displacementBwd}}))},t.prototype.dispose=function(){this.model.dispose()},t}(),UE=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return zE(e,t),e.prototype.preprocessInput=function(t){return Ui((function(){return so(t,127.5).sub(1)}))},e.prototype.nameOutputResults=function(t){return{offsets:t[0],heatmap:t[1],displacementFwd:t[2],displacementBwd:t[3]}},e}(VE);function GE(t){return Math.floor(t/2)}var HE=function(){function t(t,e){this.priorityQueue=new Array(t),this.numberOfElements=-1,this.getElementValue=e}return t.prototype.enqueue=function(t){this.priorityQueue[++this.numberOfElements]=t,this.swim(this.numberOfElements)},t.prototype.dequeue=function(){var t=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,t},t.prototype.empty=function(){return-1===this.numberOfElements},t.prototype.size=function(){return this.numberOfElements+1},t.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},t.prototype.max=function(){return this.priorityQueue[0]},t.prototype.swim=function(t){for(;t>0&&this.less(GE(t),t);)this.exchange(t,GE(t)),t=GE(t)},t.prototype.sink=function(t){for(;2*t<=this.numberOfElements;){var e=2*t;if(e<this.numberOfElements&&this.less(e,e+1)&&e++,!this.less(t,e))break;this.exchange(t,e),t=e}},t.prototype.getValueAt=function(t){return this.getElementValue(this.priorityQueue[t])},t.prototype.less=function(t,e){return this.getValueAt(t)<this.getValueAt(e)},t.prototype.exchange=function(t,e){var n=this.priorityQueue[t];this.priorityQueue[t]=this.priorityQueue[e],this.priorityQueue[e]=n},t}();function jE(t,e,n,r,s,a){for(var i=a.shape,o=i[0],u=i[1],l=!0,c=Math.max(n-s,0),h=Math.min(n+s+1,o),p=c;p<h;++p){for(var d=Math.max(r-s,0),f=Math.min(r+s+1,u),m=d;m<f;++m)if(a.get(p,m,t)>e){l=!1;break}if(!l)break}return l}var qE=["nose","leftEye","rightEye","leftEar","rightEar","leftShoulder","rightShoulder","leftElbow","rightElbow","leftWrist","rightWrist","leftHip","rightHip","leftKnee","rightKnee","leftAnkle","rightAnkle"],KE=qE.length,XE=qE.reduce((function(t,e,n){return t[e]=n,t}),{});function YE(t,e,n,r){return{y:r.get(t,e,n),x:r.get(t,e,n+KE)}}function JE(t,e,n){var r=YE(t.heatmapY,t.heatmapX,t.id,n),s=r.y,a=r.x;return{x:t.heatmapX*e+a,y:t.heatmapY*e+s}}function ZE(t,e,n){return t<e?e:t>n?n:t}function QE(t,e){return{x:t.x+e.x,y:t.y+e.y}}[["leftHip","leftShoulder"],["leftElbow","leftShoulder"],["leftElbow","leftWrist"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["rightHip","rightShoulder"],["rightElbow","rightShoulder"],["rightElbow","rightWrist"],["rightHip","rightKnee"],["rightKnee","rightAnkle"],["leftShoulder","rightShoulder"],["leftHip","rightHip"]].map((function(t){var e=t[0],n=t[1];return[XE[e],XE[n]]}));var tA=[["nose","leftEye"],["leftEye","leftEar"],["nose","rightEye"],["rightEye","rightEar"],["nose","leftShoulder"],["leftShoulder","leftElbow"],["leftElbow","leftWrist"],["leftShoulder","leftHip"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["nose","rightShoulder"],["rightShoulder","rightElbow"],["rightElbow","rightWrist"],["rightShoulder","rightHip"],["rightHip","rightKnee"],["rightKnee","rightAnkle"]].map((function(t){var e=t[0],n=t[1];return[XE[e],XE[n]]})),eA=tA.map((function(t){return t[1]})),nA=tA.map((function(t){return t[0]}));function rA(t,e,n,r){return{y:ZE(Math.round(t.y/e),0,n-1),x:ZE(Math.round(t.x/e),0,r-1)}}function sA(t,e,n,r,s,a,i,o){void 0===o&&(o=2);for(var u=r.shape,l=u[0],c=u[1],h=function(t,e,n){var r=n.shape[2]/2;return{y:n.get(e.y,e.x,t),x:n.get(e.y,e.x,r+t)}}(t,rA(e.position,a,l,c),i),p=QE(e.position,h),d=0;d<o;d++){var f=rA(p,a,l,c),m=YE(f.y,f.x,n,s);p=QE({x:f.x*a,y:f.y*a},{x:m.x,y:m.y})}var g=rA(p,a,l,c),y=r.get(g.y,g.x,n);return{position:p,part:qE[n],score:y}}function aA(t,e,n,r,s,a){var i=e.shape[2],o=eA.length,u=new Array(i),l=t.part,c=t.score,h=JE(l,r,n);u[l.id]={score:c,part:qE[l.id],position:h};for(var p=o-1;p>=0;--p){var d=eA[p],f=nA[p];u[d]&&!u[f]&&(u[f]=sA(p,u[d],f,e,n,r,a))}for(p=0;p<o;++p)d=nA[p],f=eA[p],u[d]&&!u[f]&&(u[f]=sA(p,u[d],f,e,n,r,s));return u}function iA(t,e,n,r){var s=n.x,a=n.y;return t.some((function(t){var n=t.keypoints[r].position;return function(t,e,n,r){var s=n-t,a=r-e;return s*s+a*a}(a,s,n.y,n.x)<=e}))}function oA(t,e,n){return n.reduce((function(n,r,s){var a=r.position,i=r.score;return iA(t,e,a,s)||(n+=i),n}),0)/n.length}function uA(t,e,n,r,s,a,i,o){void 0===i&&(i=.5),void 0===o&&(o=20);for(var u=[],l=function(t,e,n){for(var r=n.shape,s=r[0],a=r[1],i=r[2],o=new HE(s*a*i,(function(t){return t.score})),u=0;u<s;++u)for(var l=0;l<a;++l)for(var c=0;c<i;++c){var h=n.get(u,l,c);h<t||jE(c,h,u,l,1,n)&&o.enqueue({score:h,part:{heatmapY:u,heatmapX:l,id:c}})}return o}(i,0,t),c=o*o;u.length<a&&!l.empty();){var h=l.dequeue();if(!iA(u,c,JE(h.part,s,e),h.part.id)){var p=aA(h,t,e,s,n,r),d=oA(u,c,p);u.push({keypoints:p,score:d})}}return u}function lA(t,e,n,r){return{y:r.get(t,e,n),x:r.get(t,e,n+KE)}}function cA(t,e,n){return Ui((function(){var r=function(t,e){for(var n=[],r=0;r<KE;r++){var s=lA(t.get(r,0).valueOf(),t.get(r,1).valueOf(),r,e),a=s.x,i=s.y;n.push(i),n.push(a)}return Zc(n,[KE,2])}(t,n);return t.toTensor().mul(yo(e,"int32")).toFloat().add(r)}))}function hA(t,e,n){return PE(this,void 0,void 0,(function(){var r,s,a,i,o,u,l,c,h,p;return WE(this,(function(d){switch(d.label){case 0:return r=0,s=function(t){var e=t.shape,n=e[0],r=e[1],s=e[2];return Ui((function(){var e=t.reshape([n*r,s]).argMax(0),a=e.div(yo(r,"int32")).expandDims(1),i=function(t,e){return Ui((function(){var n=t.div(yo(e,"int32"));return t.sub(n.mul(yo(e,"int32")))}))}(e,r).expandDims(1);return yu([a,i],1)}))}(t),[4,Promise.all([t.buffer(),e.buffer(),s.buffer()])];case 1:return a=d.sent(),i=a[0],o=a[1],u=a[2],[4,(l=cA(u,n,o)).buffer()];case 2:return c=d.sent(),h=Array.from(function(t,e){for(var n=e.shape[0],r=new Float32Array(n),s=0;s<n;s++){var a=e.get(s,0),i=e.get(s,1);r[s]=t.get(a,i,s)}return r}(i,u)),p=h.map((function(t,e){return r+=t,{position:{y:c.get(e,0),x:c.get(e,1)},part:qE[e],score:t}})),s.dispose(),l.dispose(),[2,{keypoints:p,score:r/p.length}]}}))}))}var pA="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/",dA="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/",fA=[-123.15,-115.9,-103.06],mA=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return zE(e,t),e.prototype.preprocessInput=function(t){return t.add(fA)},e.prototype.nameOutputResults=function(t){var e=t[0],n=t[1];return{offsets:t[2],heatmap:t[3],displacementFwd:e,displacementBwd:n}},e}(VE);function gA(t){return PE(this,void 0,void 0,(function(){return WE(this,(function(e){return[2,Promise.all(t.map((function(t){return t.buffer()})))]}))}))}function yA(t,e){return vA(t,e)?t:Math.floor(t/e)*e+1}function bA(t){j("number"==typeof t||"object"==typeof t,(function(){return"Invalid inputResolution "+t+". Should be a number or an object with width and height"})),"object"==typeof t&&(j("number"==typeof t.width,(function(){return"inputResolution.width has a value of "+t.width+" which is invalid; it must be a number"})),j("number"==typeof t.height,(function(){return"inputResolution.height has a value of "+t.height+" which is invalid; it must be a number"})))}function xA(t,e){return bA(t),"object"==typeof t?[yA(t.height,e),yA(t.width,e)]:[yA(t,e),yA(t,e)]}Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY;var wA=[8,16,32];function vA(t,e){return(t-1)%e==0}function kA(t){return t instanceof ns?[t.shape[0],t.shape[1]]:[t.height,t.width]}function NA(t,e){var n=e[0],r=e[1],s=kA(t),a=s[0],i=s[1],o=r/n,u=[0,0,0,0],l=u[0],c=u[1],h=u[2],p=u[3];return i/a<o?(l=0,c=0,h=Math.round(.5*(o*a-i)),p=Math.round(.5*(o*a-i))):(l=Math.round(.5*(1/o*i-a)),c=Math.round(.5*(1/o*i-a)),h=0,p=0),{resized:Ui((function(){var e=function(t){return t instanceof ns?t:ei(t)}(t);return(e=rc(e,[[l,c],[h,p],[0,0]])).resizeBilinear([n,r])})),padding:{top:l,left:h,right:p,bottom:c}}}function IA(t,e,n,r,s){var a=e[0],i=e[1],o=n[0],u=n[1],l=function(t,e,n,r,s){return void 0===r&&(r=0),void 0===s&&(s=0),1===n&&1===e&&0===r&&0===s?t:t.map((function(t){return function(t,e,n,r,s){return void 0===r&&(r=0),void 0===s&&(s=0),{score:t.score,keypoints:t.keypoints.map((function(t){var a=t.score,i=t.part,o=t.position;return{score:a,part:i,position:{x:o.x*n+s,y:o.y*e+r}}}))}}(t,e,n,r,s)}))}(t,(a+r.top+r.bottom)/o,(i+r.left+r.right)/u,-r.top,-r.left);return s?function(t,e){return e<=0?t:t.map((function(t){return function(t,e){return{score:t.score,keypoints:t.keypoints.map((function(t){var n=t.score,r=t.part,s=t.position;return{score:n,part:r,position:{x:e-1-s.x,y:s.y}}}))}}(t,e)}))}(l,i):l}var $A={architecture:"MobileNetV1",outputStride:16,multiplier:.75,inputResolution:257},SA=["MobileNetV1","ResNet50"],CA={MobileNetV1:[8,16,32],ResNet50:[32,16]},TA={MobileNetV1:[.5,.75,1],ResNet50:[1]},EA=[1,2,4],AA={flipHorizontal:!1},RA={flipHorizontal:!1,maxDetections:5,scoreThreshold:.5,nmsRadius:20},DA=function(){function t(t,e){(function(t){j("number"==typeof t,(function(){return"outputStride is not a number"})),j(wA.indexOf(t)>=0,(function(){return"outputStride of "+t+" is invalid. It must be either 8, 16, or 32"}))})(t.outputStride),function(t,e){j("number"==typeof t[0]&&"number"==typeof t[1],(function(){return"both resolution values must be a number but had values "+t})),j(vA(t[0],e),(function(){return"height of "+t[0]+" is invalid for output stride "+e+"."})),j(vA(t[1],e),(function(){return"width of "+t[1]+" is invalid for output stride "+e+"."}))}(e,t.outputStride),this.baseModel=t,this.inputResolution=e}return t.prototype.estimateMultiplePoses=function(t,e){return void 0===e&&(e=RA),PE(this,void 0,void 0,(function(){var n,r,s,a,i,o,u,l,c,h,p,d,f,m,g,y,b,x,w,v,k;return WE(this,(function(N){switch(N.label){case 0:return n=BE({},RA,e),function(t){var e=t.maxDetections,n=t.scoreThreshold,r=t.nmsRadius;if(e<=0)throw new Error("Invalid maxDetections "+e+". Should be > 0");if(n<0||n>1)throw new Error("Invalid scoreThreshold "+n+". Should be in range [0.0, 1.0]");if(r<=0)throw new Error("Invalid nmsRadius "+r+".")}(e),r=this.baseModel.outputStride,s=this.inputResolution,a=kA(t),i=a[0],o=a[1],u=NA(t,s),l=u.resized,c=u.padding,h=this.baseModel.predict(l),p=h.heatmapScores,d=h.offsets,f=h.displacementFwd,m=h.displacementBwd,[4,gA([p,d,f,m])];case 1:return g=N.sent(),y=g[0],b=g[1],x=g[2],w=g[3],[4,uA(y,b,x,w,r,n.maxDetections,n.scoreThreshold,n.nmsRadius)];case 2:return v=N.sent(),k=IA(v,[i,o],s,c,n.flipHorizontal),p.dispose(),d.dispose(),f.dispose(),m.dispose(),l.dispose(),[2,k]}}))}))},t.prototype.estimateSinglePose=function(t,e){return void 0===e&&(e=AA),PE(this,void 0,void 0,(function(){var n,r,s,a,i,o,u,l,c,h,p,d,f,m,g,y;return WE(this,(function(b){switch(b.label){case 0:return n=BE({},AA,e),r=this.baseModel.outputStride,s=this.inputResolution,a=kA(t),i=a[0],o=a[1],u=NA(t,s),l=u.resized,c=u.padding,h=this.baseModel.predict(l),p=h.heatmapScores,d=h.offsets,f=h.displacementFwd,m=h.displacementBwd,[4,hA(p,d,r)];case 1:return g=b.sent(),y=IA([g],[i,o],s,c,n.flipHorizontal),p.dispose(),d.dispose(),f.dispose(),m.dispose(),l.dispose(),[2,y[0]]}}))}))},t.prototype.estimatePoses=function(t,e){return PE(this,void 0,void 0,(function(){return WE(this,(function(n){switch(n.label){case 0:return"single-person"!==e.decodingMethod?[3,2]:[4,this.estimateSinglePose(t,e)];case 1:return[2,[n.sent()]];case 2:return[2,this.estimateMultiplePoses(t,e)]}}))}))},t.prototype.dispose=function(){this.baseModel.dispose()},t}();function FA(t){return PE(this,void 0,void 0,(function(){var e,n,r,s,a,i,o;return WE(this,(function(u){switch(u.label){case 0:if(e=t.outputStride,n=t.quantBytes,r=t.multiplier,null==b)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");return s=function(t,e,n){var r={1:"100",.75:"075",.5:"050"},s="model-stride"+t+".json";return 4===n?pA+"float/"+r[e]+"/"+s:pA+"quant"+n+"/"+r[e]+"/"+s}(e,r,n),[4,qw(t.modelUrl||s)];case 1:return a=u.sent(),i=new UE(a,e),o=xA(t.inputResolution,i.outputStride),[2,new DA(i,o)]}}))}))}function _A(t){return PE(this,void 0,void 0,(function(){var e,n,r,s,a,i;return WE(this,(function(o){switch(o.label){case 0:if(e=t.outputStride,n=t.quantBytes,null==b)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");return r=function(t,e){var n="model-stride"+t+".json";return 4===e?dA+"float/"+n:dA+"quant"+e+"/"+n}(e,n),[4,qw(t.modelUrl||r)];case 1:return s=o.sent(),a=new mA(s,e),i=xA(t.inputResolution,a.outputStride),[2,new DA(a,i)]}}))}))}(t=n.hmd(t)).exports={detectFaces:(t,e)=>{let n={accuracy:.2,maxFaces:10};return e&&(Object.keys(e).indexOf("accuracy")>-1&&(n.accuracy=e.accuracy>=0&&e.accuracy<1?e.accuracy:n.accuracy),Object.keys(e).indexOf("maxFaces")>-1&&(n.maxFaces=e.maxFaces>=0?e.maxFaces:n.maxFaces)),new Promise(((n,r)=>{let s=document.createElement("img");s.setAttribute("src",t.toString());let a=s.height>s.width,i=document.createElement("canvas");i.setAttribute("width",s.width.toString()),i.setAttribute("height",s.height.toString()),i.getContext("2d").drawImage(s,0,0);let o=[];Ui((()=>{(function(t){return void 0===t&&(t=$A),PE(this,void 0,void 0,(function(){return WE(this,(function(e){return"ResNet50"===(t=function(t){if(null==(t=t||$A).architecture&&(t.architecture="MobileNetV1"),SA.indexOf(t.architecture)<0)throw new Error("Invalid architecture "+t.architecture+". Should be one of "+SA);if(null==t.inputResolution&&(t.inputResolution=257),bA(t.inputResolution),null==t.outputStride&&(t.outputStride=16),CA[t.architecture].indexOf(t.outputStride)<0)throw new Error("Invalid outputStride "+t.outputStride+". Should be one of "+CA[t.architecture]+" for architecutre "+t.architecture+".");if(null==t.multiplier&&(t.multiplier=1),TA[t.architecture].indexOf(t.multiplier)<0)throw new Error("Invalid multiplier "+t.multiplier+". Should be one of "+TA[t.architecture]+" for architecutre "+t.architecture+".");if(null==t.quantBytes&&(t.quantBytes=4),EA.indexOf(t.quantBytes)<0)throw new Error("Invalid quantBytes "+t.quantBytes+". Should be one of "+EA+" for architecutre "+t.architecture+".");return t}(t)).architecture?[2,_A(t)]:"MobileNetV1"===t.architecture?[2,FA(t)]:[2,null]}))}))})({architecture:"MobileNetV1",outputStride:16,inputResolution:{width:a?600:800,height:a?800:600}}).then((t=>{t.estimateMultiplePoses(s,{flipHorizontal:!1,maxDetections:e.maxFaces}).then((t=>{(t=t.sort(((t,e)=>e.score-t.score))).forEach((t=>{if(t.score>e.accuracy){let e,n,r,s,a;t.keypoints.forEach((t=>{"nose"==t.part&&(e=t.position),"leftEar"==t.part&&(n=t.position),"rightEar"==t.part&&(r=t.position),"leftEye"==t.part&&(s=t.position),"rightEye"==t.part&&(a=t.position)}));let u=e,l=1+(n.x-r.x)/2/u.x,c=(n.x-r.x)*l,h=u.x-c/2,p=u.y-c/2,d=i.getContext("2d").getImageData(h,p,c,c),f=document.createElement("canvas");f.setAttribute("width",c.toString()),f.setAttribute("height",c.toString()),f.getContext("2d").putImageData(d,0,0),o.push({score:t.score,imgURL:f.toDataURL()}),f.remove()}})),n(o)})).catch((t=>r(t)))})).catch((t=>r(t)))}))}))}}},906:()=>{},993:()=>{},352:()=>{},589:()=>{},758:()=>{}},e={};function n(r){if(e[r])return e[r].exports;var s=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.hmd=t=>((t=Object.create(t)).children||(t.children=[]),Object.defineProperty(t,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+t.id)}}),t),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),n(656)})();